{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Create controller-based automations with ease to control your home devices and scenes from Home Assistant (HA).</p> <p>ControllerX brings the following functionalities for different controllers:</p> <ul> <li>Turn on/Turn off any home device (light, switch, media player, etc.)</li> <li>Manual increase/decrease of brightness and color temperature</li> <li>Smooth increase/decrease (holding button) of brightness, color temperature, volume, etc.</li> <li>Color loop changing if the light supports xy color</li> <li>Play/pause music</li> <li>Open/close covers</li> </ul> <p>ControllerX uses an async loop to make HA call services requests (e.g. to change the brightness, the color temperature, the xy color, the volume of a media player). This means that when a button is held, ControllerX calls periodically HA services until a release action is fired.</p>"},{"location":"#why-controllerx","title":"Why ControllerX?","text":"<p>Solutions like Zigbee2MQTT, deCONZ and ZHA have their pros and cons, but if there is something good about these solutions is that we can remove the dependency of a propietary hub (e.g.: IKEA, Xiaomi, Phillips). However, there is a downside about removing this dependency and it is that not only the proprietary hubs let you integrate a controller with lights or media players, but it also gives a behaviour to them. This is why we end up using Home Assistant automations, however when it comes to create complex automations like this kind, it gets tricky and difficult to maintain. This is where ControllerX comes in together with AppDaemon, to give the behaviour to the devices we lose when not having the original hub as well as easily create automation focus on button events.</p>"},{"location":"#quick-example","title":"Quick example","text":"<p>With just this configuration placed in <code>/homeassistant/appdaemon/apps/apps.yaml</code>, you can have the E2002 controller from IKEA (4 buttons) connected to the livingroom light and be able to change the brightness and color temperature or color.</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E2002LightController\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.livingroom\n</code></pre>"},{"location":"#videos-examples","title":"Videos examples","text":"<ul> <li>E1810 (IKEA) controlling a light through MQTT</li> <li>Symfonisk controlling Chromecast volume</li> <li>Magic Xiaomi Cube controlling a colour light</li> <li>E1810 (IKEA) controlling a colour light with ZHA</li> <li>Symfonisk controlling Google Home mini</li> <li>Symfonisk controlling a light</li> <li>Showing the colour wheel from HA</li> <li>E1743 (IKEA) button as a cover controller</li> <li>E1810 (IKEA) as a TV remote</li> <li>Double click for the middle button for E1810 (IKEA)</li> </ul>"},{"location":"#community","title":"Community","text":"<p>Thank you to all these people for putting out there content related to ControllerX:</p> <ul> <li>/u/canaletto - canaletto.fr (French)</li> <li>/u/jones - jbetzen.net (German)</li> <li>/u/fribse - YouTube (Danish)</li> </ul> <p>Questions can be asked in following channels:</p> <ul> <li>GitHub issue</li> <li>Home Assistant Community Forum topic</li> </ul>"},{"location":"controllers/","title":"Supported controllers","text":"<p>Currently 70 devices are supported.</p> Model Integrations Picture AUA1ZBR2GW                ZHA              AdeoHRC99CZC045                Zigbee2MQTT              E1743                Zigbee2MQTT, deCONZ, ZHA              E1744                Zigbee2MQTT, deCONZ, ZHA              E1766                Zigbee2MQTT, deCONZ, ZHA              E1810                Zigbee2MQTT, deCONZ, ZHA              E1812                Zigbee2MQTT, deCONZ, ZHA              E1EG7F                Zigbee2MQTT, ZHA              E2002                Zigbee2MQTT, deCONZ, ZHA              E2123                Zigbee2MQTT, deCONZ, ZHA              E2213                Zigbee2MQTT              HG06323                Zigbee2MQTT, ZHA              HMPB2WM552                Homematic              HMPB6WM55                Homematic              HMPBI4FM                Homematic              HMSenMDIRWM55                Homematic              HueDimmer                Zigbee2MQTT, deCONZ, ZHA              HueSmartButton                Zigbee2MQTT, deCONZ              ICTCG1                Zigbee2MQTT, deCONZ, ZHA              LZL4BWHL01                deCONZ, ZHA              Legrand600083                Zigbee2MQTT, ZHA              Legrand600088                Zigbee2MQTT, ZHA              LutronPJ22B                State, Lutron Caseta              LutronPJ22BRL                State              LutronPJ23BRL                State, Lutron Caseta              LutronPJ24B                State              MFKZQ01LM                Zigbee2MQTT, deCONZ, ZHA              MLI404002                Zigbee2MQTT, ZHA              MLI404011                Zigbee2MQTT, deCONZ              OsramAC025XX00NJ                deCONZ, ZHA              PTM215X                Zigbee2MQTT, deCONZ              Philips929002398602                Zigbee2MQTT, deCONZ, ZHA              Philips929003017102                Zigbee2MQTT, deCONZ, ZHA              PhilipsRDM002                Zigbee2MQTT              Prolight5412748727388                Zigbee2MQTT              ROB2000070                Zigbee2MQTT              SK5700002228949                deCONZ              SNZB01                Zigbee2MQTT, ZHA              Shelly25                Shelly              ShellyDimmer2                Shelly              ShellyI3                ShellyForHass              ShellyPlusI4                Shelly              SmartThingsButton                Zigbee2MQTT, deCONZ, ZHA              TS0042                ZHA              TS0043                Zigbee2MQTT, ZHA              TS0044                Zigbee2MQTT              TS0044F                Zigbee2MQTT              TasmotaButton                Tasmota              TasmotaSwitch                Tasmota              TerncyPP01                ZHA              TerncySD01                ZHA              TuYaERS10TZBVKAA                Zigbee2MQTT, ZHA              WXCJKG11LM                Zigbee2MQTT, deCONZ              WXCJKG12LM                Zigbee2MQTT, ZHA              WXCJKG13LM                Zigbee2MQTT, deCONZ, ZHA              WXKG01LM                Zigbee2MQTT, deCONZ, ZHA              WXKG02LM                Zigbee2MQTT, deCONZ, ZHA              WXKG06LM                Zigbee2MQTT, deCONZ              WXKG07LM                Zigbee2MQTT, deCONZ, ZHA              WXKG11LMRemote                Zigbee2MQTT, deCONZ, ZHA              WXKG11LMSensorSwitch                deCONZ, ZHA              WXKG12LM                Zigbee2MQTT, deCONZ              WXKG15LM                Zigbee2MQTT              Z31BRL                Zigbee2MQTT, deCONZ              ZB3009                Zigbee2MQTT              ZB5121                ZHA              ZB5122                ZHA              ZNXNKG02LM                Zigbee2MQTT              ZS23000278                Zigbee2MQTT              ZYCT202                Zigbee2MQTT"},{"location":"faq/","title":"Frequently asked questions (FAQ)","text":""},{"location":"faq/#1-i-placed-the-configuration-in-configurationyaml-and-it-doesnt-work","title":"1. I placed the configuration in configuration.yaml and it doesn't work","text":"<p>ControllerX depends on AppDaemon and all the configuration for AppDaemon apps goes to <code>/homeassistant/appdaemon/apps/apps.yaml</code> and not <code>/config/configuration.yaml</code>.</p>"},{"location":"faq/#2-i-updated-controllerx-to-a-new-version-and-it-does-not-work","title":"2. I updated ControllerX to a new version and it does not work","text":"<p>When updating ControllerX, the AppDaemon server (or addon) needs to be restarted.</p>"},{"location":"faq/#3-i-properly-configured-e1744-symfonisk-with-z2m-but-it-doesnt-work","title":"3. I properly configured E1744 (symfonisk) with z2m but it doesn't work","text":"<p>From the zigbee2mqtt documentation is recommended to set the <code>debounce</code> attribute. However, when set it does not send an empty state and the state of the controller stays active instead of being removed. This causes problems to ControllerX, so if you want to use this controller, I recommend to remove the <code>debounce</code> attribute since ControllerX handles repeated events by itself already.</p>"},{"location":"faq/#4-i-have-a-group-of-lights-and-it-does-not-work-properly","title":"4. I have a group of lights and it does not work properly","text":"<p>Please see here to understand how grouped entities work.</p>"},{"location":"faq/#5-error-value-for-x-attribute-could-not-be-retrieved-from-light-y","title":"5. Error: \"Value for X attribute could not be retrieved from light Y\"","text":"<p>This error is shown when the light has support for the X attribute (e.g. brightness or color_temp) and the attribute is not in the state attribute of the entity. You can check whether the attribute X is shown in the state attributes from the \"Developer Tools &gt; States\".</p>"},{"location":"faq/#6-light-is-not-turning-on-to-the-previous-brightness","title":"6. Light is not turning on to the previous brightness","text":"<p>Zigbee does not support transition natively to lights, so this attribute depends on the integration you have installed for your light. ControllerX by default adds transition when changing brightness or color, but not when turning on/off the light. So if this is happening to you it might be because <code>add_transition_turn_toggle: true</code> is added in your controller configuration. These are the issues created related to this problem on the different integrations:</p> <ul> <li>Zigbee2MQTT (FIXED)</li> <li>Hue integration (CLOSED, but not fixed)</li> </ul>"},{"location":"faq/#7-when-holding-or-rotating-the-controller-especially-the-symfonisk-e1744-it-doesnt-stop-changing-the-brightness-or-volume","title":"7. When holding or rotating the controller (especially the Symfonisk - E1744), it doesn't stop changing the brightness or volume","text":"<p>This is a known issue that cannot be fixed in the code. Controllers with holding-release functionality fire 2 events, one when the holding/rotation starts and another when it stops rotating or is released. What ControllerX does for you is send periodically requests to HA via call services to update your brightness, volume, etc.</p> <p>This is probably happenning to you sometimes and is because the stop/release action has not been fired. This can happen due to:</p> <ul> <li>A rotation is too fast and confusing to know if it stopped or not.</li> <li>The network is overloaded.</li> <li>The server cannot handle the requests on time.</li> <li>The controller and the light are far distanced from the coordinator.</li> </ul> <p>However, these are some actions you can take to overcome this problem and reduce the number of times that this happens:</p> <ul> <li>If <code>release</code> action is sent at a similar time than a <code>hold</code> one, you could use <code>release_delay</code> attribute to execute <code>release</code> actions some amount of time defined after they have been fired. For example: <code>release_delay: 0.01</code> (time in seconds).</li> <li>If using z2m, change the integration to listen MQTT directly, this way it will avoid the HA state machine layer. Read more about in here.</li> <li>If using deCONZ and you just want to dim your lights smoothly, then you can consider using this AppDaemon app from @Burningstone91. It brightens/dims your lights with a deCONZ calls instead of calling HA periodically, this means that deCONZ would handle the dimming for you.</li> <li>Play around with delay (default is 350ms) and automatic_steps (default is 10) attributes. You can read more about them in here. The lower the delay is, the more requests will go to HA. The more automatic_steps, the more steps it will take to get from min to max, and vice versa.</li> <li>Add more Zigbee routers to the network.</li> </ul>"},{"location":"faq/#8-symfonisk-controller-e1744-is-not-working-with-zigbee2mqtt-integration","title":"8. Symfonisk controller (E1744) is not working with Zigbee2MQTT integration","text":"<p>Do you have a configuration that seems to be right, but is not working? Well, the default mapping for E1744 has the actions of the new implementation in Zigbee2MQTT for this controller. For this, you will need to deactivate the legacy mode for this controller in Zigbee2MQTT. If you have the Zigbee2MQTT addon, you will have a file in <code>/share/zigbee2mqtt/devices.yaml</code> with the device-specific configuration. You will need to add <code>legacy: false</code> to your E1744 controller as shown in the Zigbee2MQTT documentation. With this the problem will be solved once Zigbee2MQTT is restarted. While I have you here reading this, I strongly recommend to you to check the FAQ#9 if you are having slowness issues with your controller.</p>"},{"location":"faq/#9-symfonisk-controller-e1744-works-but-pretty-laggy","title":"9. Symfonisk controller (E1744) works, but pretty laggy","text":"<p>If you are using the <code>sensor</code> entity as your controller, then I recommend you to change this configuration to listen from MQTT directly instead of HA. For this, you will need to change your controller configuration (<code>apps.yaml</code>) and your AppDaemon configuration (<code>appdaemon.yaml</code>). Your new controller configurtion will look like this:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1744MediaPlayerController\n  controller: my_z2m_friendly_name # This is the Zigbee2MQTT friendly name\n  integration:\n    name: z2m\n    listen_to: mqtt\n  media_player: media_player.my_media_player\n</code></pre> <p>Notice how we added the <code>listen_to</code> attribute and change the <code>controller</code> to the Zigbee2MQTT friendly name. Finally, you will also need to have the MQTT plugin enabled.</p>"},{"location":"advanced/","title":"Custom mapping","text":"<p>We can make use of the attribute <code>mapping</code> to overwrite completely the behaviour of our default controller, or <code>merge_mapping</code> to overwrite just the specified events. The content of both work the same way:</p> <ul> <li>key: The event to get fired from the controller. You can check these events in the individual pages from the supported controllers. Note that they change depending on the controller and the integration (z2m, deconz, zha). Mutliple click functionality can be configured in the <code>key</code> part.</li> <li>value: An action type or a list of them. This is/are the action(s) to be executed when the event (<code>key</code>) is fired.</li> </ul> <p>Let's see an example:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1743Controller\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.livingroom\n  merge_mapping:\n    \"off\":\n      - scene: scene.night\n      - service: notify.telegram\n        data:\n          message: \"off\" clicked\n</code></pre> <p>In this example, the <code>key</code> is <code>\"off\"</code> (extracted from the Zigbee2MQTT mapping of the E1743 IKEA controller) and the value is a list of 2 action types: one to activate an scene and the other to send a message through HA call service.</p>"},{"location":"advanced/action-types/","title":"Action types","text":"<p>This page assumes you already know how the <code>mapping</code> attribute works.</p> <p>An action type is reduced version of Script Syntax from Home Assistant. It allows to one or a sequence of actions to execute when an event is fired. The available action types are predefined action, call service, scene activation and delay.</p> <pre><code>...\nmapping: # or merge_mapping\n  ## Predefined actions\n  # `toogle` is a light predefined action\n  &lt;event&gt;:\n    action: toggle\n\n  # The previous action type can be reduced as:\n  &lt;event&gt;: toggle\n\n  ## Call services\n  # Call any service the same way as it is done through `Developer Tools &gt; Services` in HA\n  &lt;event&gt;:\n    service: script.my_script\n    data:\n      attr1: 42\n      attr2: foo\n\n  # `entity_id` can be passed directly like this or through `data`.\n  # Additionally, if the service is within the same domain\n  # (light, media_player, etc) as the main entity from the configuration,\n  # and entity_id is not passed, then it will use the one from the configuration.\n  # This is handy, so there is no need to repeat the same entity over and over.\n  # Priority order for entity_id:\n  # - Inside data\n  # - In the same level as \"service\"\n  # - From the main config if the domain matches\n  &lt;event&gt;:\n    service: light.turn_on\n    entity_id: light.my_light\n\n  ## Scene activation\n  # Activate any HA Scene\n  &lt;event&gt;:\n    scene: scene.my_scene\n\n  ## Delay\n  # `delay` is usefull when defining a list of actions, and you want\n  # an action to be triggered after some defined time.\n  # The value of the attribute only accepts seconds.\n  &lt;event&gt;:\n    - on_min_brightness # predefined action\n    - delay: 5 # wait 5 seconds\n    - on_full_brightness # predefined action\n</code></pre> <p>The <code>&lt;event&gt;</code> key is the event from your controller and integration.</p> <p>If an action is still executing (most likely because of a <code>delay</code> in place), and another of the same type gets fired, the previous one will be cancelled and a new one will be executed. This is not configurable and it works the same as <code>mode: restart</code> from Home Assistant automations.</p> <p>Actions will be executed sequentially, so keep in mind that if using predefined actions, it is not recommended to use a list of <code>hold</code> actions since they will be executed sequentially, and it will not result in an expected behaviour. This is because the <code>hold</code> actions are blocking operations and they will not be finished until a <code>release</code> action is fired.</p>"},{"location":"advanced/entity-groups/","title":"Entity groups","text":"<p>This is supported since ControllerX v4.14.0</p> <p>ControllerX allow for Entity Controllers (LightController, MediaPlayerController, CoverController, etc) to work with grouped entities.</p> <p>All is needed is an entity with <code>entity_id</code> attribute with a list of entities controlled by the grouped entity. For example, we can use a group entity from Group Integration, or from Light Group Integration. ControllerX will read attribute from the main entity (the first one from the list), but will run the actions on the grouped entity.</p> <p>Let's imagine we have a Light Group entity (<code>light.livingroom</code>):</p> <pre><code>light:\n  - platform: group\n    name: livingroom\n    entities:\n      - light.livingroom_1\n      - light.livingroom_2\n      - light.livingroom_3\n</code></pre> <p>Then, we could for example configure the following in apps.yaml file:</p> <pre><code>example_app:\n  module: controllerx\n  class: E2002LightController\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.livingroom\n</code></pre> <p><code>light.livingroom_1</code> will be the main light that ControllerX will read from, but <code>light.livingroom</code> will be the grouped entity that ControllerX will perform the actions.</p> <p>For example, if <code>light.livingroom_1</code> does not support <code>brightness</code>, but <code>light.livingroom_2</code> and <code>light.livingroom_3</code> do, then the configuration will not work because ControllerX will not be able to read <code>brightness</code> attribute from <code>light.livingroom_1</code>.</p>"},{"location":"advanced/event-integration/","title":"Event integration","text":"<p>This is supported since ControllerX v4.23.0</p> <p>Most of the integrations supported by ControllerX are defined for an specific use case (zigbee2mqtt, deCONZ, ZHA), but we also have the <code>State</code> integration, which is a more generic integration and allows us to listen to any Home Assistant entity state and build a mapping from it. From ControllerX v4.23.0, we can also use the <code>Event</code> integration which allows us define the event we want to listen to, and which actions build from it.</p> <p>Each event has its own payload that could look like:</p> <pre><code>{\n  \"device_ieee\": \"00:67:88:56:06:78:9b:3f\",\n  \"device_name\": \"my_device\",\n  \"command\": \"step\",\n  \"args\": { \"direction\": \"up\" }\n}\n</code></pre> <p>Then, ControllerX needs to convert this JSON-like data to an action string, so we can build our mapping on something like <code>action_step_up</code>.</p> <p>Following this use case, we can create our own ControllerX configuration with this custom event:</p> <pre><code>example_app:\n  module: controllerx\n  class: LightController\n  controller: my_device # This is the value we listen from `controller_key` defined below.\n  light: light.my_light\n  integration:\n    name: event # This name is necessary\n    event_type: my_custom_event\n    controller_key: device_name\n    action_template: \"action_{command}_{args[direction]}\"\n  mapping:\n    action_step_up: click_brightness_up\n    action_step_down: click_brightness_down\n</code></pre> <p>Let's break down the configuration for the integration:</p> <ul> <li><code>event_type</code>: This is the event we will be listening to. For example, ZHA uses <code>zha_event</code>.</li> <li><code>controller_key</code>: This is the key that we will listen from. It can be extracted from the event. Note that the following names cannot be used for this field: <code>name</code>, <code>event</code>, <code>callback</code>, <code>namespace</code> or <code>cb</code></li> <li><code>action_template</code>: This is the template that allows us build the name of the actions. We can use <code>{}</code> to retrieve the keys from the data, and <code>[]</code> inside to access attributes inside it as shown in the example.</li> </ul>"},{"location":"advanced/hold-click-modes/","title":"Hold/Click modes","text":"<p>This page assumes you already know how the <code>mapping</code> attribute and predefined actions work.</p> <p>A new feature that came with ControllerX v4.16.0 is the ability to configure the hold and click actions. Up until now, we had the <code>{hold,click}_{brightness,color_temp,white_color,...}_{up,down,toggle}</code> predefined actions like:</p> <ul> <li><code>hold_brightness_toggle</code></li> <li><code>hold_color_up</code></li> <li><code>click_colortemp_up</code></li> <li><code>click_brightness_down</code></li> <li>...</li> </ul> <p>They allow to use click (1 step) or hold (smooth dim) with different attributes and directions. However, it became difficult to expand and add more functionality, so now the <code>click</code> and <code>hold</code> actions can be configured as follows:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  integration: deconz\n  controller: my_controller\n  light: light.my_light\n  merge_mapping:\n    2001:\n      action: click # [click, hold] This is the predefined action.\n      attribute: brightness # [brightness, color_temp, white_value, color, xy_color]\n      direction: up # [up, down, toggle (only for hold)]\n      mode: stop # [stop, loop, bounce (only for hold)] Stepper mode\n      steps: 10 # It overrides the `manual_steps` and `automatic_steps` global attributes\n</code></pre> <p>The fields are the following:</p> <ul> <li>action: This is the predefined action, which in this case is <code>click</code> or <code>hold</code>.</li> <li>attribute: Attribute we want to act on. The available values are: <code>brightness</code>, <code>color_temp</code>, <code>white_value</code>, <code>color</code>, and <code>xy_color</code>. However, <code>xy_color</code> will ignore the <code>mode</code> and <code>steps</code> attribute since it already loops through the color wheel.</li> <li>direction: Direction to start. Options are <code>up</code>, <code>down</code>, and <code>toggle</code>. In case of <code>click</code> action, it will not accept <code>toggle</code>.</li> <li><code>up</code>: It goes up.</li> <li><code>down</code>: It goes down.</li> <li><code>toggle</code>: It changes direction everytime the action is performed.</li> <li>mode: This is the stepper mode. Options are <code>stop</code>, <code>loop</code>, and <code>bounce</code>. In case of <code>click</code> action, it will not accept <code>bounce</code>.</li> <li><code>stop</code>: This is the default behaviour. It stops when it reaches the ends (min or max).</li> <li><code>loop</code>: It loops through all the values under the same direction, so when reaching the end, it will start over. For example, if you configure the brightness with direction <code>up</code>, it will go from the value is currently in until 255 (default max), and then it will start over (1 default min) without releasing the button. This <code>mode</code> will not stop unless there is a <code>release</code> action or it reaches the <code>max_loops</code> attribute (default is 50 steps).</li> <li><code>bounce</code>: It bounces the ends, so when reaching the end it will switch directions. For example, if you configure the brightness with direction <code>down</code>, it will go from the value is currently in until 1 (default min), then it will start going up until reaching 255 and bouncing back again. This <code>mode</code> will not stop unless there is a <code>release</code> action or it reaches the <code>max_loops</code> attribute (default is 50 steps).</li> </ul> <p>As you can see, the configuration is much flexible, however, it adds more lines than using the direct predefined actions. For this reason, the predefined actions like <code>{hold,click}_{brightness,color_temp,white_color,...}_{up,down,toggle}</code> will not be removed, but ControllerX will not have more of these since now it can be configured differently. This means for example that this configuration:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  integration: deconz\n  controller: my_controller\n  light: light.my_light\n  merge_mapping:\n    2001:\n      action: hold\n      attribute: brightness\n      direction: up\n</code></pre> <p>It is the same as:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  integration: deconz\n  controller: my_controller\n  light: light.my_light\n  merge_mapping:\n    2001:\n      action: hold_brightness_up\n</code></pre> <p>The old predefined actions have <code>stop</code> as a default mode.</p>"},{"location":"advanced/multiple-clicks/","title":"Multiple clicks","text":"<p>This page assumes you already know how the <code>mapping</code> attribute works.</p> <p>Some controllers allow events like double, triple (even quadruple) clicks, but others only allow single clicks events coming from the controller. This feature, then, allows you to virtually manage multiple clicks, especially for those single click events.</p> <p>When adding a new custom mapping for your controller, you can use a new token (<code>$</code>) to indicate how many times an events needs to occur, so the action gets fired. Let's see an example:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  controller: my_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.my_light\n  multiple_click_delay: 500 # default\n  mapping:\n    brightness_up_click: \"on\"\n    toggle: click_color_down\n    toggle$1: click_color_up\n    toggle$2: \"off\"\n</code></pre> <p>This could be a silly example, but it is enough to remark some points about this feature. In this configuration we see 2 actions: <code>brightness_up_click</code> (not \"multi-clickable\") and <code>toggle</code> (\"multi-clickable\"). We also see an attribute called <code>multiple_click_delay</code>, which indicates the delay (in milliseconds and 500 by default) when a multiple click action should be trigger. Let's go over the next scenarios:</p> <ul> <li><code>brightness_up_click</code> is clicked once: The <code>on</code> action will be triggered immidiately, with no delay.</li> <li><code>toggle</code> is clicked once: The <code>click_color_up</code> action will be triggered after 500ms. Also noticed that <code>toggle</code> and <code>toggle$1</code> are basically the same, so if both are present, the one with the token (<code>$</code>) will be the prevalent. So <code>click_color_down</code> will never be called.</li> <li><code>toggle</code> is clicked twice (with less than 500ms between clicks): The <code>off</code> action will be triggered in 500ms after the second click.</li> </ul> <p>This next example will show a real use of this feature with the E1810 controller from IKEA.</p> <pre><code>livingroom:\n  module: controllerx\n  class: E1810Controller\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.livingroom_lamp\n  smooth_power_on: true\n  merge_mapping:\n    toggle$2:\n      service: light.toggle\n      data:\n        entity_id: light.livingroom_fairylights\n    toggle$3:\n      service: light.toggle\n      data:\n        entity_id: light.bedroom\n</code></pre> <p>This will keep the default mapping for the E1810 controller by using <code>merge_mapping</code> and add a new action when clicking 2 and 3 times the middle button to toggle the fairylights and the bedroom lamp.</p> <p>Note that ControllerX registers the multiple-click events in the initialization phase by checking the events with <code>$</code>, so it records whether it needs to wait to trigger the multiple-click event or not. If the triggered event is not registered as mutliple-clickable, then it will be triggered immidiately. However, if the triggered event is mutliple-clickable then it will wait as much time as specified in <code>multiple_click_delay</code> to detect if another click is issued or not. If not second (n-th click) is registered, then the event is triggered. Therefore, all multi-clickable events will have a delay specified by <code>multiple_click_delay</code>.</p>"},{"location":"advanced/predefined-actions/","title":"Predefined actions","text":"<p>This page assumes you already know how the <code>mapping</code> attribute works.</p> <p>Here you can find a list of predefined actions (one of the action types) for each type of controller.</p>"},{"location":"advanced/predefined-actions/#light","title":"Light","text":"<p>When using a light controller (e.g. <code>E1743Controller</code>) or <code>LightController</code>, the following actions can be used as a predefined action:</p> value description parameters <code>\"on\"</code> It turns on the light - <code>attributes</code>: a mapping with attribute and value <code>\"off\"</code> It turns off the light <code>toggle</code> It toggles the light - <code>attributes</code>: a mapping with attribute and value <code>toggle_full_brightness</code> It toggles the light, setting the brightness to the maximum value when turning on. <code>toggle_full_white_value</code> It toggles the light, setting the white value to the maximum value when turning on. <code>toggle_full_color_temp</code> It toggles the light, setting the color temperature to the maximum value when turning on. <code>toggle_min_brightness</code> It toggles the light, setting the brightness to the minimum value when turning on. <code>toggle_min_white_value</code> It toggles the light, setting the white value to the minimum value when turning on. <code>toggle_min_color_temp</code> It toggles the light, setting the color temperature to the minimum value when turning on. <code>release</code> It stops <code>hold</code> actions <code>on_full_brightness</code> It puts the brightness to the maximum value <code>on_full_white_value</code> It puts the white value to the maximum value <code>on_full_color_temp</code> It puts the color temp to the maximum value <code>on_min_brightness</code> It puts the brightness to the minimum value <code>on_min_white_value</code> It puts the white value to the minimum value <code>on_min_color_temp</code> It puts the color temp to the minimum value <code>on_min_max_brightness</code> It puts the brightness to the minimum value if the light is off or brightness different to minimum value; else it puts the brightness to the maximum value. <code>on_max_min_brightness</code> It puts the brightness to the maximum value if the light is off or brightness different to maximum value; else it puts the brightness to the minimum value. <code>on_min_max_color_temp</code> It puts the color temp to the minimum value if the light is off or color temp different to minimum value; else it puts the color temp to the maximum value. <code>on_max_min_color_temp</code> It puts the color temp to the maximum value if the light is off or color temp different to maximum value; else it puts the color temp to the minimum value. <code>set_half_brightness</code> It sets the brightness to 50% <code>set_half_white_value</code> It sets the white value to 50% <code>set_half_color_temp</code> It sets the color temp to 50% <code>sync</code> It syncs the light(s) to full brightness and white colour or 2700K (370 mireds) - <code>brightness</code>- <code>color_temp</code>- <code>xy_color</code> <code>click</code> It brights up/down accordingly with the <code>manual_steps</code> attribute, and allow to pass parameters through YAML config. You can read more about it here. - <code>attribute</code>- <code>direction</code>- <code>mode</code>- <code>steps</code> <code>click_brightness_up</code> It brights up accordingly with the <code>manual_steps</code> attribute <code>click_brightness_down</code> It brights down accordingly with the <code>manual_steps</code> attribute <code>click_white_value_up</code> It turns the white value up accordingly with the <code>manual_steps</code> attribute <code>click_white_value_down</code> It turns the white value down accordingly with the <code>manual_steps</code> attribute <code>click_color_up</code> It turns the color up accordingly with the <code>manual_steps</code> attribute <code>click_color_down</code> It turns the color down accordingly with the <code>manual_steps</code> attribute <code>click_colortemp_up</code> It turns the color temp up accordingly with the <code>manual_steps</code> attribute <code>click_colortemp_down</code> It turns the color temp down accordingly with the <code>manual_steps</code> attribute <code>click_xycolor_up</code> It turns the xy color up accordingly with the <code>manual_steps</code> attribute <code>click_xycolor_down</code> It turns the xy color down accordingly with the <code>manual_steps</code> attribute <code>hold</code> It brights up/down until release accordingly with the <code>automatic_steps</code> attribute, and allow to pass parameters through YAML config. You can read more about it here. - <code>attribute</code>- <code>direction</code>- <code>mode</code>- <code>steps</code> <code>hold_brightness_up</code> It brights up until release accordingly with the <code>automatic_steps</code> attribute <code>hold_brightness_down</code> It brights down until release accordingly with the <code>automatic_steps</code> attribute <code>hold_brightness_toggle</code> It brights up/down until release accordingly with the <code>automatic_steps</code> attribute and alternates in each click <code>hold_white_value_up</code> It turns the white value up until release accordingly with the <code>automatic_steps</code> attribute <code>hold_white_value_down</code> It turns the white value down until release accordingly with the <code>automatic_steps</code> attribute <code>hold_white_value_toggle</code> It turns the white value up/down until release accordingly with the <code>automatic_steps</code> attribute and alternates in each click <code>hold_color_up</code> It turns the color up until release accordingly with the <code>automatic_steps</code> attribute <code>hold_color_down</code> It turns the color down until release accordingly with the <code>automatic_steps</code> attribute <code>hold_color_toggle</code> It turns the color up/down until release accordingly with the <code>automatic_steps</code> attribute and alternates in each click <code>hold_colortemp_up</code> It turns the color temp up until release accordingly with the <code>automatic_steps</code> attribute <code>hold_colortemp_down</code> It turns the color temp down until release accordingly with the <code>automatic_steps</code> attribute <code>hold_colortemp_toggle</code> It turns the color temp up/down until release accordingly with the <code>automatic_steps</code> attribute and alternates in each click <code>hold_xycolor_up</code> It turns the xy color up until release accordingly with the <code>automatic_steps</code> attribute <code>hold_xycolor_down</code> It turns the xy color down until release accordingly with the <code>automatic_steps</code> attribute <code>hold_xycolor_toggle</code> It turns the xy color up/down until release accordingly with the <code>automatic_steps</code> attribute and alternates in each click <code>xycolor_from_controller</code> It changes the xy color of the light from the value sent by the controller (if supported) <code>colortemp_from_controller</code> It changes the color temperature of the light from the value sent by the controller (if supported) <code>brightness_from_controller_level</code> It changes the brightness of the light from the value sent by the controller <code>action_level</code> (if supported) <code>brightness_from_controller_angle</code> It changes the brightness of the light from the value sent by the controller <code>action_rotation_angle</code> (if supported). This fires a <code>hold</code> action, so a <code>release</code> one will be needed to stop brightness change. - <code>mode</code>- <code>steps</code>"},{"location":"advanced/predefined-actions/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>When using a Zigbee2MQTT light controller (e.g. <code>E1743Z2MLightController</code>) or <code>Z2MLightController</code>, the following actions can be used as a predefined action:</p> value description parameters <code>\"on\"</code> It turns on the light - <code>attributes</code>: a mapping with attribute and value <code>\"off\"</code> It turns off the light <code>toggle</code> It toggles the light <code>release</code> It stops <code>hold</code> actions <code>on_full_brightness</code> It puts the brightness to the maximum value <code>on_full_color_temp</code> It puts the color temp to the maximum value <code>on_min_brightness</code> It puts the brightness to the minimum value <code>on_min_color_temp</code> It puts the color temp to the minimum value <code>set_half_brightness</code> It sets the brightness to 50% <code>set_half_color_temp</code> It sets the color temp to 50% <code>click</code> It brights up/down accordingly with the <code>click_steps</code> attribute, and allow to pass parameters through YAML config. You can read more about it here. - <code>attribute</code>- <code>direction</code>- <code>steps</code>- <code>transition</code>- <code>use_onoff</code> <code>click_brightness_up</code> It brights up accordingly with the <code>click_steps</code> attribute <code>click_brightness_down</code> It brights down accordingly with the <code>click_steps</code> attribute <code>click_colortemp_up</code> It turns the color temp up accordingly with the <code>click_steps</code> attribute <code>click_colortemp_down</code> It turns the color temp down accordingly with the <code>click_steps</code> attribute <code>hold</code> It brights up/down until release accordingly with the <code>hold_steps</code> attribute, and allow to pass parameters through YAML config. You can read more about it here. - <code>attribute</code>- <code>direction</code>- <code>steps</code>- <code>use_onoff</code> <code>hold_brightness_up</code> It brights up until release accordingly with the <code>hold_steps</code> attribute <code>hold_brightness_down</code> It brights down until release accordingly with the <code>hold_steps</code> attribute <code>hold_brightness_toggle</code> It brights up/down until release accordingly with the <code>hold_steps</code> attribute and alternates in each click <code>hold_colortemp_up</code> It turns the color temp up until release accordingly with the <code>hold_steps</code> attribute <code>hold_colortemp_down</code> It turns the color temp down until release accordingly with the <code>hold_steps</code> attribute <code>hold_colortemp_toggle</code> It turns the color temp up/down until release accordingly with the <code>hold_steps</code> attribute and alternates in each click <code>xycolor_from_controller</code> It changes the xy color of the light from the value sent by the controller (if supported) <code>colortemp_from_controller</code> It changes the color temperature of the light from the value sent by the controller (if supported) <code>colortemp_from_controller_step</code> It changes the color temperature of the light from the value sent by the controller <code>step_mode</code>/<code>step_size</code> (if supported). <code>brightness_from_controller_level</code> It changes the brightness of the light from the value sent by the controller <code>action_level</code> (if supported) <code>brightness_from_controller_angle</code> It changes the brightness of the light from the value sent by the controller <code>action_rotation_angle</code> (if supported). This fires a <code>hold</code> action, so a <code>release</code> one will be needed to stop brightness change. - <code>steps</code>- <code>use_onoff</code> <code>brightness_from_controller_step</code> It changes the brightness of the light from the value sent by the controller <code>step_mode</code>/<code>step_size</code> (if supported)."},{"location":"advanced/predefined-actions/#media-player","title":"Media Player","text":"<p>When using a media player controller (e.g. <code>E1743MediaPlayerController</code>) or <code>MediaPlayerController</code>, the following actions can be used as a predefined action:</p> value description parameters <code>hold_volume_down</code> It turns the volume down until <code>release</code> is called <code>hold_volume_up</code> It turns the volume up until <code>release</code> is called <code>click_volume_down</code> It turns the volume down one step <code>click_volume_up</code> It turns the volume up one step <code>volume_set</code> It sets the volume to given level - <code>volume_level</code>: volume level (from 0 to 1) <code>release</code> It calls <code>release</code> for <code>hold</code> actions <code>play_pause</code> It toggles the play/pause media <code>next_track</code> It skips the track forward <code>previous_track</code> It skips the track backward <code>next_source</code> It changes to the next source <code>previous_source</code> It changes to the previous source <code>mute</code> It mutes the media player <code>tts</code> Text-to-Speech - <code>message</code>- <code>service</code>: the service to call without \"tts.\" (str; default: \"google_translate_say\")- <code>cache</code> (bool; default: None)- <code>language</code> (str; default: None)- <code>options</code> (dict; default: None) <code>volume_from_controller_angle</code> It changes volume based on controller angle (if supported). This fires a <code>hold</code> action, so a <code>release</code> one will be needed to stop volume change."},{"location":"advanced/predefined-actions/#switch","title":"Switch","text":"<p>When using a switch controller (e.g. <code>E1743SwitchController</code>) or <code>SwitchController</code>, the following actions can be used as a predefined action:</p> value description parameters <code>on</code> It turns the switch on <code>off</code> It turns the switch off <code>toggle</code> It toggles the state of the switch"},{"location":"advanced/predefined-actions/#cover","title":"Cover","text":"<p>When using a cover controller (e.g. <code>E1743CoverController</code>) or <code>CoverController</code>, the following actions can be used as a predefined action:</p> value description parameters <code>open</code> It opens the cover <code>close</code> It closes the cover <code>stop</code> It stops the cover <code>toggle_open</code> It stops the cover if running and opens otherwise <code>toggle_close</code> It stops the cover if running and closes otherwise"},{"location":"advanced/predefined-actions/#how-to-pass-parameters","title":"How to pass parameters","text":"<p>When passing parameters to predefined actions, we will nede to use the <code>action</code> keyword together with the parameters. This is an example to change the default parameters for <code>sync</code> action:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.my_light\n  merge_mapping:\n    toggle_hold:\n      action: sync\n      brightness: 128\n      color_temp: 153\n</code></pre> <p>And this is another example for the <code>toggle</code> action:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  controller: controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.my_light\n  merge_mapping:\n    toggle:\n      action: toggle\n      attributes:\n        brightness: 128\n        xy_color: [0.323, 0.329]\n</code></pre>"},{"location":"advanced/stateful-controllers/","title":"Stateful Controllers","text":"<p>This page describes how to define an state to execute one action or another depending on the state selected. This is a feature that is not necessarily from ControlleX, but from to Input Select (a.k.a. Dropdown) from Home Assistant, and Callback Constraints from AppDaemon.</p> <p>Through this page we will go over an easy example to setup a single controller to manage multiple lights. However, this can also be used for other use cases like:</p> <ul> <li>Change/cycle the state of the controller to run different commands over the same device (e.g. light).</li> <li>Cycle through a series of light states.</li> </ul> <p>First, we will need to setup an Input Select. Home Assistant allows you to create one through UI on <code>Settings -&gt; Devices &amp; Services -&gt; Helpers</code>, and then clicking <code>Dropdown</code>, but we can also create one through YAML:</p> <pre><code>input_select:\n  controller_state:\n    options:\n      - state_0\n      - state_1\n</code></pre> <p>Once we have an entity that Home Assistant controls, we can create the following ControllerX configs:</p> <pre><code>example_app_0:\n  module: controllerx\n  class: E1810Controller\n  controller: your_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.my_light_1\n  merge_mapping:\n    arrow_left_click:\n      service: input_select.select_previous\n      entity_id: input_select.controller_state\n    arrow_right_click:\n      service: input_select.select_next\n      entity_id: input_select.controller_state\n  constrain_input_select: input_select.controller_state,state_0\n\nexample_app_1:\n  module: controllerx\n  class: E1810Controller\n  controller: your_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.my_light_2\n  merge_mapping:\n    arrow_left_click:\n      service: input_select.select_previous\n      entity_id: input_select.controller_state\n    arrow_right_click:\n      service: input_select.select_next\n      entity_id: input_select.controller_state\n  constrain_input_select: input_select.controller_state,state_1\n</code></pre> <p>From these configuration we see the following:</p> <ul> <li><code>arrow_left_click</code> and <code>arrow_right_click</code> are used to change the <code>input_select.controller_state</code> state. This service will cycle through the options, so we could have only one (e.g. <code>input_select.select_next</code>).</li> <li><code>constrain_input_select</code> is used to select which configuration is active depending on the state from <code>input_select.controller_state</code>.</li> <li>First config controls <code>light.my_light_1</code>, and the second one controls <code>light.my_light_2</code>.</li> </ul> <p>This particular example, could be simplified if we configured the <code>input_select</code> with the <code>light</code> entities names:</p> <pre><code>input_select:\n  controller_state:\n    options:\n      - light.my_light_1\n      - light.my_light_2\n</code></pre> <p>Then, the configuration would be simplified to the following thanks to templating:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  controller: your_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: \"{{ states('input_select.controller_state') }}\"\n  merge_mapping:\n    arrow_left_click:\n      service: input_select.select_previous\n      entity_id: input_select.controller_state\n    arrow_right_click:\n      service: input_select.select_next\n      entity_id: input_select.controller_state\n</code></pre> <p>Note that the <code>constrain_input_select</code> is no longer necessary since the <code>light</code> already has a template that checks the name dynamically. However, if we want to do any specific mapping depending on the light, we would need to go back to the previous configuration since it is more flexible and allows us to define a mapping for each state.</p> <p>In the <code>Advanced</code> section from the examples page, we can see some examples using this feature.</p>"},{"location":"advanced/templating/","title":"Templating","text":"<p>Templating can be used when we want to dynamically use some of the properties during action execution based on their current state. It leverages the HA templating system with the same syntax. It can be used for these type of parameters:</p> <ul> <li>Device types (<code>light</code>, <code>media_player</code>, <code>switch</code>, <code>cover</code>)</li> <li>Predefined actions</li> <li>Scene activation</li> <li>Call services</li> </ul>"},{"location":"advanced/templating/#examples","title":"Examples","text":"<p>It can be used to get the current media player is playing. It assumes there is a sensor that already gets updated when the current media player changes.</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810MediaPlayerController\n  controller: my_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  media_player: \"{{ states('sensor.current_media_player') }}\"\n</code></pre> <p>Get data for call services. For example, get a random effect for our WLED light.</p> <pre><code>example_app:\n  module: controllerx\n  class: Controller\n  controller: my_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  mapping:\n    toggle:\n      service: wled.effect\n      data:\n        entity_id: light.wled\n        effect: \"{{ state_attr('light.wled', 'effect_list') | random }}\"\n</code></pre>"},{"location":"controllers/AUA1ZBR2GW/","title":"AUA1ZBR2GW","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>AUA1ZBR2GWLightController</code> </li> </ul> <ul> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/AUA1ZBR2GW/#light","title":"Light","text":"<p>Class: <code>AUA1ZBR2GWLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> ZHA Predefined actions <code>1_toggle</code>, <code>2_toggle</code> toggle <code>1_step_up</code>, <code>2_step_up</code> click_brightness_up <code>1_step_down</code>, <code>2_step_down</code> click_brightness_down <code>1_step_color_temp_up</code>, <code>2_step_color_temp_up</code> click_colortemp_up <code>1_step_color_temp_down</code>, <code>2_step_color_temp_down</code> click_colortemp_down ZHA <pre><code>example_app:\n  module: controllerx\n  class: AUA1ZBR2GWLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/AdeoHRC99CZC045/","title":"AdeoHRC99CZC045","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>AdeoHRC99CZC045LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>AdeoHRC99CZC045Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/AdeoHRC99CZC045/#light","title":"Light","text":"<p>Class: <code>AdeoHRC99CZC045LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>brightness_step_up</code> hold_brightness_up <code>brightness_step_down</code> hold_brightness_down <code>brightness_stop</code>, <code>color_stop</code> release <code>color_hue_step_up</code>, <code>color_saturation_step_up</code> hold_color_up <code>color_hue_step_down</code>, <code>color_saturation_step_down</code> hold_color_down <code>color_temperature_step_up</code> hold_colortemp_up <code>color_temperature_step_down</code> hold_colortemp_down <code>scene_1</code>, <code>scene_2</code>, <code>scene_3</code>, <code>scene_4</code> <code>No action</code> Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: AdeoHRC99CZC045LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: AdeoHRC99CZC045LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/AdeoHRC99CZC045/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>AdeoHRC99CZC045Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>brightness_step_up</code> hold_brightness_up <code>brightness_step_down</code> hold_brightness_down <code>brightness_stop</code>, <code>color_stop</code> release <code>color_hue_step_up</code>, <code>color_saturation_step_up</code>, <code>color_temperature_step_up</code> hold_colortemp_up <code>color_hue_step_down</code>, <code>color_saturation_step_down</code>, <code>color_temperature_step_down</code> hold_colortemp_down <code>scene_1</code>, <code>scene_2</code>, <code>scene_3</code>, <code>scene_4</code> <code>No action</code> Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: AdeoHRC99CZC045Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: AdeoHRC99CZC045Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/E1743/","title":"E1743","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>E1743Controller</code> </li> <li> Zigbee2MQTT Light \u2014 <code>E1743Z2MLightController</code> </li> <li> Media Player \u2014 <code>E1743MediaPlayerController</code> </li> <li> Switch \u2014 <code>E1743SwitchController</code> </li> <li> Cover \u2014 <code>E1743CoverController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/E1743/#light","title":"Light","text":"<p>Class: <code>E1743Controller</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>\"on\"</code> <code>1002</code> <code>\"on\"</code> on <code>\"off\"</code> <code>2002</code> <code>\"off\"</code> off <code>brightness_move_up</code> <code>1001</code> <code>move_with_on_off_0_83</code> hold_brightness_up <code>brightness_move_down</code> <code>2001</code> <code>move_1_83_0_0</code> hold_brightness_down <code>brightness_stop</code> <code>1003</code>, <code>2003</code> <code>stop</code>, <code>stop_with_on_off</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1743Controller\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743Controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743Controller\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743Controller\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/E1743/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>E1743Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E1743Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/E1743/#media-player","title":"Media Player","text":"<p>Class: <code>E1743MediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>\"on\"</code> <code>1002</code> <code>\"on\"</code> play_pause <code>\"off\"</code> <code>2002</code> <code>\"off\"</code> next_track <code>brightness_move_up</code> <code>1001</code> <code>move_with_on_off_0_83</code> hold_volume_up <code>brightness_move_down</code> <code>2001</code> <code>move_1_83_0_0</code> hold_volume_down <code>brightness_stop</code> <code>1003</code>, <code>2003</code> <code>stop</code>, <code>stop_with_on_off</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1743MediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743MediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743MediaPlayerController\n  integration: deconz\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743MediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/E1743/#switch","title":"Switch","text":"<p>Class: <code>E1743SwitchController</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>\"on\"</code> <code>1002</code> <code>\"on\"</code> on <code>\"off\"</code> <code>2002</code> <code>\"off\"</code> off Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1743SwitchController\n  integration: z2m\n  controller: sensor.my_controller_action\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743SwitchController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743SwitchController\n  integration: deconz\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743SwitchController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/E1743/#cover","title":"Cover","text":"<p>Class: <code>E1743CoverController</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>\"on\"</code> <code>1002</code> <code>\"on\"</code> toggle_open <code>\"off\"</code> <code>2002</code> <code>\"off\"</code> toggle_close <code>brightness_move_up</code> <code>1001</code> <code>move_with_on_off_0_83</code> open <code>brightness_move_down</code> <code>2001</code> <code>move_1_83_0_0</code> close <code>brightness_stop</code> <code>1003</code>, <code>2003</code> <code>stop</code>, <code>stop_with_on_off</code> stop Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1743CoverController\n  integration: z2m\n  controller: sensor.my_controller_action\n  cover: cover.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743CoverController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  cover: cover.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743CoverController\n  integration: deconz\n  controller: my_controller\n  cover: cover.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1743CoverController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  cover: cover.my_entity_id\n</code></pre>"},{"location":"controllers/E1744/","title":"E1744","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>E1744LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>E1744Z2MLightController</code> </li> <li> Media Player \u2014 <code>E1744MediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/E1744/#notes","title":"Notes","text":"<p>If you want to use the default controller, you will need to set <code>legacy: false</code> in the Zigbee2MQTT configuration. Read more in here.</p>"},{"location":"controllers/E1744/#light","title":"Light","text":"<p>Class: <code>E1744LightController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>brightness_move_down</code> <code>3001</code> <code>move_1_195_0_0</code> hold_brightness_down <code>brightness_move_up</code> <code>2001</code> <code>move_0_195_0_0</code> hold_brightness_up <code>brightness_stop</code> <code>2003</code>, <code>3003</code> <code>stop</code> release <code>toggle</code> <code>1002</code> <code>toggle</code> toggle <code>brightness_step_up</code> <code>1004</code> <code>step_0_1_0_0_0</code> on_full_brightness <code>brightness_step_down</code> <code>1005</code> <code>step_1_1_0_0_0</code> on_min_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1744LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1744LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1744LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1744LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/E1744/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>E1744Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>brightness_move_down</code> hold_brightness_down <code>brightness_move_up</code> hold_brightness_up <code>brightness_stop</code> release <code>toggle</code> toggle <code>brightness_step_up</code> on_full_brightness <code>brightness_step_down</code> on_min_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E1744Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1744Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/E1744/#media-player","title":"Media Player","text":"<p>Class: <code>E1744MediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>brightness_move_down</code> <code>3001</code> <code>move_1_195_0_0</code> hold_volume_down <code>brightness_move_up</code> <code>2001</code> <code>move_0_195_0_0</code> hold_volume_up <code>brightness_stop</code> <code>2003</code>, <code>3003</code> <code>stop</code> release <code>toggle</code> <code>1002</code> <code>toggle</code> play_pause <code>brightness_step_up</code> <code>1004</code> <code>step_0_1_0_0_0</code> next_track <code>brightness_step_down</code> <code>1005</code> <code>step_1_1_0_0_0</code> previous_track Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1744MediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1744MediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1744MediaPlayerController\n  integration: deconz\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1744MediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/E1766/","title":"E1766","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>E1766LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>E1766Z2MLightController</code> </li> <li> Switch \u2014 <code>E1766SwitchController</code> </li> <li> Cover \u2014 <code>E1766CoverController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/E1766/#light","title":"Light","text":"<p>Class: <code>E1766LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>open</code> <code>1002</code> <code>up_open</code> on <code>close</code> <code>2002</code> <code>down_close</code> off <code>1003</code> on_full_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1766LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/E1766/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>E1766Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>open</code> on <code>close</code> off Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E1766Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/E1766/#switch","title":"Switch","text":"<p>Class: <code>E1766SwitchController</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>open</code> <code>1002</code> <code>up_open</code> on <code>close</code> <code>2002</code> <code>down_close</code> off Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1766SwitchController\n  integration: z2m\n  controller: sensor.my_controller_action\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766SwitchController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766SwitchController\n  integration: deconz\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766SwitchController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/E1766/#cover","title":"Cover","text":"<p>Class: <code>E1766CoverController</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>open</code> <code>1002</code> <code>up_open</code> toggle_open <code>close</code> <code>2002</code> <code>down_close</code> toggle_close <code>stop</code> <code>1003</code>, <code>2003</code> <code>stop</code> stop Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1766CoverController\n  integration: z2m\n  controller: sensor.my_controller_action\n  cover: cover.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766CoverController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  cover: cover.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766CoverController\n  integration: deconz\n  controller: my_controller\n  cover: cover.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1766CoverController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  cover: cover.my_entity_id\n</code></pre>"},{"location":"controllers/E1810/","title":"E1810","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>E1810Controller</code> </li> <li> Zigbee2MQTT Light \u2014 <code>E1810Z2MLightController</code> </li> <li> Media Player \u2014 <code>E1810MediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/E1810/#notes","title":"Notes","text":"<p>This device mapping also supports E1524 controller.</p>"},{"location":"controllers/E1810/#light","title":"Light","text":"<p>Class: <code>E1810Controller</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>toggle</code> <code>1002</code> <code>toggle</code> toggle <code>toggle_hold</code> <code>1001</code> <code>press_2_0_0</code> sync <code>brightness_up_click</code> <code>2002</code> <code>step_with_on_off_0_43_5</code> click_brightness_up <code>brightness_down_click</code> <code>3002</code> <code>step_1_43_5_0_0</code> click_brightness_down <code>arrow_left_click</code> <code>4002</code> <code>press_257_13_0</code> click_color_down <code>arrow_right_click</code> <code>5002</code> <code>press_256_13_0</code> click_color_up <code>brightness_up_hold</code> <code>2001</code> <code>move_with_on_off_0_83</code>, <code>move_with_on_off_0_84</code> hold_brightness_up <code>brightness_up_release</code>, <code>brightness_down_release</code>, <code>arrow_left_release</code>, <code>arrow_right_release</code> <code>2003</code>, <code>3003</code>, <code>4003</code>, <code>5003</code> <code>stop</code>, <code>stop_with_on_off</code>, <code>release</code> release <code>brightness_down_hold</code> <code>3001</code> <code>move_1_83_0_0</code>, <code>move_1_84_0_0</code> hold_brightness_down <code>arrow_left_hold</code> <code>4001</code> <code>hold_3329_0</code> hold_color_down <code>arrow_right_hold</code> <code>5001</code> <code>hold_3328_0</code> hold_color_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/E1810/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>E1810Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>toggle</code> toggle <code>toggle_hold</code> on_full_brightness <code>brightness_up_click</code> click_brightness_up <code>brightness_down_click</code> click_brightness_down <code>arrow_left_click</code> click_colortemp_down <code>arrow_right_click</code> click_colortemp_up <code>brightness_up_hold</code> hold_brightness_up <code>brightness_up_release</code>, <code>brightness_down_release</code>, <code>arrow_left_release</code>, <code>arrow_right_release</code> release <code>brightness_down_hold</code> hold_brightness_down <code>arrow_left_hold</code> hold_colortemp_down <code>arrow_right_hold</code> hold_colortemp_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E1810Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1810Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/E1810/#media-player","title":"Media Player","text":"<p>Class: <code>E1810MediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>toggle</code> <code>1002</code> <code>toggle</code> play_pause <code>brightness_up_click</code> <code>2002</code> <code>step_with_on_off_0_43_5</code> click_volume_up <code>brightness_down_click</code> <code>3002</code> <code>step_1_43_5_0_0</code> click_volume_down <code>arrow_left_click</code> <code>4002</code> <code>press_257_13_0</code> previous_track <code>arrow_right_click</code> <code>5002</code> <code>press_256_13_0</code> next_track <code>arrow_left_hold</code> <code>4001</code> <code>hold_3329_0</code> previous_source <code>arrow_right_hold</code> <code>5001</code> <code>hold_3328_0</code> next_source <code>brightness_up_hold</code> <code>2001</code> <code>move_with_on_off_0_83</code>, <code>move_with_on_off_0_84</code> hold_volume_up <code>brightness_up_release</code>, <code>brightness_down_release</code> <code>2003</code>, <code>3003</code> <code>stop</code>, <code>stop_with_on_off</code>, <code>release</code> release <code>brightness_down_hold</code> <code>3001</code> <code>move_1_83_0_0</code>, <code>move_1_84_0_0</code> hold_volume_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1810MediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1810MediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1810MediaPlayerController\n  integration: deconz\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1810MediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/E1812/","title":"E1812","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>E1812LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>E1812Z2MLightController</code> </li> <li> Switch \u2014 <code>E1812SwitchController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/E1812/#light","title":"Light","text":"<p>Class: <code>E1812LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>\"on\"</code> <code>1002</code> <code>\"on\"</code> toggle <code>brightness_move_up</code> <code>1001</code> <code>move_with_on_off</code> hold_brightness_toggle <code>brightness_stop</code> <code>1003</code> <code>stop</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1812LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1812LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1812LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1812LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/E1812/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>E1812Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> toggle <code>brightness_move_up</code> hold_brightness_toggle <code>brightness_stop</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E1812Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1812Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/E1812/#switch","title":"Switch","text":"<p>Class: <code>E1812SwitchController</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>\"on\"</code> <code>1002</code> <code>\"on\"</code> toggle Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E1812SwitchController\n  integration: z2m\n  controller: sensor.my_controller_action\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1812SwitchController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1812SwitchController\n  integration: deconz\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1812SwitchController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/E1EG7F/","title":"E1EG7F","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>E1EG7FLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>E1EG7FZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/E1EG7F/#light","title":"Light","text":"<p>Class: <code>E1EG7FLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>\"on\"</code> <code>\"on\"</code> on <code>on_long</code> <code>on_long</code> click_color_up <code>on_double</code> <code>on_double</code> on_full_color_temp <code>up</code> <code>step_0_1_0</code> click_brightness_up <code>up_long</code> <code>step_0_2_0</code> on_full_brightness <code>down</code> <code>step_1_1_0</code> click_brightness_down <code>down_long</code> <code>step_1_2_0</code> on_min_brightness <code>\"off\"</code> <code>\"off\"</code> off <code>off_long</code> <code>off_long</code> click_color_down <code>off_double</code> <code>off_double</code> on_min_color_temp Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: E1EG7FLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1EG7FLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1EG7FLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/E1EG7F/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>E1EG7FZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>on_long</code> click_colortemp_up <code>on_double</code> on_full_color_temp <code>up</code> click_brightness_up <code>up_long</code> on_full_brightness <code>down</code> click_brightness_down <code>down_long</code> on_min_brightness <code>\"off\"</code> off <code>off_long</code> click_colortemp_down <code>off_double</code> on_min_color_temp Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E1EG7FZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E1EG7FZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/E2002/","title":"E2002","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>E2002LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>E2002Z2MLightController</code> </li> <li> Media Player \u2014 <code>E2002MediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/E2002/#notes","title":"Notes","text":"<p>This controller fires \"on\" action when arrows are held as well as the hold arrow action. So this means that when long pressing the arrows, the light(s) will turn on before changing the color.</p> <p>This device mapping also supports E2001 controller.</p>"},{"location":"controllers/E2002/#light","title":"Light","text":"<p>Class: <code>E2002LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>\"on\"</code> <code>1002</code> <code>\"on\"</code> on <code>\"off\"</code> <code>2002</code> <code>\"off\"</code> off <code>arrow_left_click</code> <code>3002</code> <code>press_257_13_0</code> click_color_down <code>arrow_right_click</code> <code>4002</code> <code>press_256_13_0</code> click_color_up <code>brightness_move_up</code> <code>1001</code> <code>move_with_on_off_0_83</code> hold_brightness_up <code>brightness_stop</code>, <code>arrow_left_release</code>, <code>arrow_right_release</code> <code>1003</code>, <code>2003</code>, <code>3003</code>, <code>4003</code> <code>stop</code>, <code>stop_with_on_off</code>, <code>release</code> release <code>brightness_move_down</code> <code>2001</code> <code>move_1_83_0_0</code> hold_brightness_down <code>arrow_left_hold</code> <code>3001</code> <code>hold_3329_0</code> hold_color_down <code>arrow_right_hold</code> <code>4001</code> <code>hold_3328_0</code> hold_color_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E2002LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2002LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2002LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2002LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/E2002/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>E2002Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>arrow_left_click</code> click_colortemp_down <code>arrow_right_click</code> click_colortemp_up <code>brightness_move_up</code> hold_brightness_up <code>brightness_stop</code>, <code>arrow_left_release</code>, <code>arrow_right_release</code> release <code>brightness_move_down</code> hold_brightness_down <code>arrow_left_hold</code> hold_colortemp_down <code>arrow_right_hold</code> hold_colortemp_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E2002Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2002Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/E2002/#media-player","title":"Media Player","text":"<p>Class: <code>E2002MediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>\"on\"</code> <code>1002</code> <code>\"on\"</code> play_pause <code>\"off\"</code> <code>2002</code> <code>\"off\"</code> click_volume_down <code>arrow_left_click</code> <code>3002</code> <code>press_257_13_0</code> previous_track <code>arrow_right_click</code> <code>4002</code> <code>press_256_13_0</code> next_track <code>arrow_left_hold</code> <code>3001</code> <code>hold_3329_0</code> previous_source <code>arrow_left_release</code>, <code>arrow_right_release</code>, <code>brightness_stop</code> <code>1003</code>, <code>2003</code>, <code>3003</code>, <code>4003</code> <code>stop</code>, <code>stop_with_on_off</code>, <code>release</code> release <code>arrow_right_hold</code> <code>4001</code> <code>hold_3328_0</code> next_source <code>brightness_move_up</code> <code>1001</code> <code>move_with_on_off_0_83</code> hold_volume_up <code>brightness_move_down</code> <code>2001</code> <code>move_1_83_0_0</code> hold_volume_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E2002MediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2002MediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2002MediaPlayerController\n  integration: deconz\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2002MediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/E2123/","title":"E2123","text":"Picture Controller types Integrations <ul> <li> Media Player \u2014 <code>E2123MediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/E2123/#notes","title":"Notes","text":"<p>The device supports other events which are not added to the default mapping. Please check this GitHub issue for more information.</p>"},{"location":"controllers/E2123/#media-player","title":"Media Player","text":"<p>Class: <code>E2123MediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>toggle</code>, <code>play_pause</code> <code>toggle</code>, <code>play_pause</code> play_pause <code>track_next</code> <code>5002</code> <code>step_0_1_0_0_0</code> next_track <code>track_previous</code> <code>4002</code> <code>step_1_1_0_0_0</code> previous_track <code>volume_up</code>, <code>volume_up_hold</code> <code>move_with_on_off_0_255</code> click_volume_up <code>volume_down</code>, <code>volume_down_hold</code> <code>move_with_on_off_1_255</code> click_volume_down <code>dots_1_initial_press</code> <code>6000</code> <code>2_initial_press_0</code> previous_source <code>dots_2_initial_press</code> <code>7000</code> <code>3_initial_press_0</code> next_source <code>1002</code> play <code>2001</code> <code>move_0_255_0_0</code> hold_volume_up <code>2002</code>, <code>3002</code> release <code>3001</code> <code>move_1_255_0_0</code> hold_volume_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: E2123MediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2123MediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2123MediaPlayerController\n  integration: deconz\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2123MediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/E2213/","title":"E2213","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>E2213LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>E2213Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/E2213/#light","title":"Light","text":"<p>Class: <code>E2213LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>1_initial_press</code> on <code>2_initial_press</code> off <code>1_long_press</code> hold_brightness_up <code>2_long_press</code> hold_brightness_down <code>1_short_release</code>, <code>2_short_release</code>, <code>1_long_release</code>, <code>2_long_release</code> release <code>1_double_press</code> hold_color_up <code>2_double_press</code> hold_color_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E2213LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2213LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/E2213/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>E2213Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>1_initial_press</code> on <code>2_initial_press</code> off <code>1_long_press</code> hold_brightness_up <code>2_long_press</code> hold_brightness_down <code>1_short_release</code>, <code>2_short_release</code>, <code>1_long_release</code>, <code>2_long_release</code> release <code>1_double_press</code> hold_colortemp_up <code>2_double_press</code> hold_colortemp_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: E2213Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: E2213Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/HG06323/","title":"HG06323","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>HG06323LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>HG06323Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/HG06323/#light","title":"Light","text":"<p>Class: <code>HG06323LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>\"on\"</code> <code>\"on\"</code> on <code>brightness_step_up</code> <code>step_0_51_10</code> click_brightness_up <code>brightness_move_up</code> <code>move_0_51</code> hold_brightness_up <code>brightness_stop</code> <code>stop</code> release <code>brightness_step_down</code> <code>step_1_51_10</code> click_brightness_down <code>brightness_move_down</code> <code>move_1_51</code> hold_brightness_down <code>\"off\"</code> <code>\"off\"</code> off Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: HG06323LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HG06323LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HG06323LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/HG06323/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>HG06323Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>brightness_step_up</code> click_brightness_up <code>brightness_move_up</code> hold_brightness_up <code>brightness_stop</code> release <code>brightness_step_down</code> click_brightness_down <code>brightness_move_down</code> hold_brightness_down <code>\"off\"</code> off Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: HG06323Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HG06323Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/HMPB2WM552/","title":"HMPB2WM552","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>HMPB2WM552LightController</code> </li> </ul> <ul> <li>           Homematic (homematic)         </li> </ul>"},{"location":"controllers/HMPB2WM552/#light","title":"Light","text":"<p>Class: <code>HMPB2WM552LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Homematic Predefined actions <code>PRESS_SHORT_1</code> off <code>PRESS_LONG_1</code> hold_brightness_down <code>PRESS_CONT_1</code>, <code>PRESS_CONT_2</code> <code>No action</code> <code>PRESS_LONG_RELEASE_1</code>, <code>PRESS_LONG_RELEASE_2</code> release <code>PRESS_SHORT_2</code> on <code>PRESS_LONG_2</code> hold_brightness_up Homematic <pre><code>example_app:\n  module: controllerx\n  class: HMPB2WM552LightController\n  integration: homematic\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/HMPB6WM55/","title":"HMPB6WM55","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>HMPB6WM55LightController</code> </li> </ul> <ul> <li>           Homematic (homematic)         </li> </ul>"},{"location":"controllers/HMPB6WM55/#light","title":"Light","text":"<p>Class: <code>HMPB6WM55LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Homematic Predefined actions <code>PRESS_SHORT_1</code> off <code>PRESS_CONT_1</code>, <code>PRESS_CONT_2</code>, <code>PRESS_CONT_3</code>, <code>PRESS_CONT_4</code>, <code>PRESS_CONT_5</code>, <code>PRESS_CONT_6</code> <code>No action</code> <code>PRESS_LONG_1</code>, <code>PRESS_LONG_2</code> sync <code>PRESS_LONG_RELEASE_1</code>, <code>PRESS_LONG_RELEASE_2</code>, <code>PRESS_LONG_RELEASE_3</code>, <code>PRESS_LONG_RELEASE_4</code>, <code>PRESS_LONG_RELEASE_5</code>, <code>PRESS_LONG_RELEASE_6</code> release <code>PRESS_SHORT_2</code> on <code>PRESS_SHORT_3</code> click_brightness_down <code>PRESS_LONG_3</code> hold_brightness_down <code>PRESS_SHORT_4</code> click_brightness_up <code>PRESS_LONG_4</code> hold_brightness_up <code>PRESS_SHORT_5</code> click_color_down <code>PRESS_LONG_5</code> hold_color_down <code>PRESS_SHORT_6</code> click_color_up <code>PRESS_LONG_6</code> hold_color_up Homematic <pre><code>example_app:\n  module: controllerx\n  class: HMPB6WM55LightController\n  integration: homematic\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/HMPBI4FM/","title":"HMPBI4FM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>HMPBI4FMLightController</code> </li> </ul> <ul> <li>           Homematic (homematic)         </li> </ul>"},{"location":"controllers/HMPBI4FM/#light","title":"Light","text":"<p>Class: <code>HMPBI4FMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Homematic Predefined actions <code>PRESS_SHORT_1</code> off <code>PRESS_CONT_1</code>, <code>PRESS_CONT_2</code>, <code>PRESS_CONT_3</code>, <code>PRESS_CONT_4</code> <code>No action</code> <code>PRESS_LONG_1</code> click_color_down <code>PRESS_SHORT_2</code> on <code>PRESS_LONG_2</code> click_color_up <code>PRESS_SHORT_3</code> click_brightness_down <code>PRESS_LONG_3</code> on_min_brightness <code>PRESS_SHORT_4</code> click_brightness_up <code>PRESS_LONG_4</code> on_full_brightness Homematic <pre><code>example_app:\n  module: controllerx\n  class: HMPBI4FMLightController\n  integration: homematic\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/HMSenMDIRWM55/","title":"HMSenMDIRWM55","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>HMSenMDIRWM55LightController</code> </li> </ul> <ul> <li>           Homematic (homematic)         </li> </ul>"},{"location":"controllers/HMSenMDIRWM55/#light","title":"Light","text":"<p>Class: <code>HMSenMDIRWM55LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Homematic Predefined actions <code>PRESS_SHORT_1</code> off <code>PRESS_LONG_1</code> hold_brightness_down <code>PRESS_CONT_1</code>, <code>PRESS_CONT_2</code> <code>No action</code> <code>PRESS_LONG_RELEASE_1</code>, <code>PRESS_LONG_RELEASE_2</code> release <code>PRESS_SHORT_2</code> on <code>PRESS_LONG_2</code> hold_brightness_up Homematic <pre><code>example_app:\n  module: controllerx\n  class: HMSenMDIRWM55LightController\n  integration: homematic\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/HueDimmer/","title":"HueDimmer","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>HueDimmerController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>HueDimmerZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/HueDimmer/#notes","title":"Notes","text":"<p>In case of working with z2m the device needs to be flagged as <code>legacy: false</code> as Zigbee2MQTT documentation recommends.</p> <p>In case of working with z2m and wanting to use the multiclick functionality, then you need to make sure to remove from the device specific (devices.yaml) the <code>multiple_press_timeout</code> option.</p> <p>In case of deCONZ, all the click actions are mapped with X002 actions, so when the button is released after being clicked.</p>"},{"location":"controllers/HueDimmer/#light","title":"Light","text":"<p>Class: <code>HueDimmerController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>on_press_release</code> <code>1002</code> <code>on_short_release</code> on <code>on_hold</code> <code>1001</code> <code>on_hold</code> hold_color_up <code>on_hold_release</code>, <code>up_hold_release</code>, <code>down_hold_release</code>, <code>off_hold_release</code> <code>1003</code>, <code>2003</code>, <code>3003</code>, <code>4003</code> <code>off_long_release</code>, <code>down_long_release</code>, <code>up_long_release</code>, <code>on_long_release</code> release <code>up_press_release</code> <code>2002</code> <code>up_short_release</code> click_brightness_up <code>up_hold</code> <code>2001</code> <code>up_hold</code> hold_brightness_up <code>down_press_release</code> <code>3002</code> <code>down_short_release</code> click_brightness_down <code>down_hold</code> <code>3001</code> <code>down_hold</code> hold_brightness_down <code>off_press_release</code> <code>4002</code> <code>off_short_release</code> off <code>off_hold</code> <code>4001</code> <code>off_hold</code> hold_color_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: HueDimmerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HueDimmerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HueDimmerController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HueDimmerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/HueDimmer/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>HueDimmerZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>on_press_release</code> on <code>on_hold</code> hold_colortemp_up <code>on_hold_release</code>, <code>up_hold_release</code>, <code>down_hold_release</code>, <code>off_hold_release</code> release <code>up_press_release</code> click_brightness_up <code>up_hold</code> hold_brightness_up <code>down_press_release</code> click_brightness_down <code>down_hold</code> hold_brightness_down <code>off_press_release</code> off <code>off_hold</code> hold_colortemp_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: HueDimmerZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HueDimmerZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/HueSmartButton/","title":"HueSmartButton","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>HueSmartButtonLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>HueSmartButtonZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> </ul>"},{"location":"controllers/HueSmartButton/#light","title":"Light","text":"<p>Class: <code>HueSmartButtonLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ Predefined actions <code>\"on\"</code>, <code>\"off\"</code> <code>1002</code> toggle <code>hold</code> <code>1001</code> hold_brightness_toggle <code>release</code> <code>1003</code> release <code>1000</code> <code>No action</code> Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZ <pre><code>example_app:\n  module: controllerx\n  class: HueSmartButtonLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HueSmartButtonLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HueSmartButtonLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/HueSmartButton/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>HueSmartButtonZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code>, <code>\"off\"</code> toggle <code>hold</code> hold_brightness_toggle <code>release</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: HueSmartButtonZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: HueSmartButtonZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/ICTCG1/","title":"ICTCG1","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ICTCG1Controller</code> </li> <li> Zigbee2MQTT Light \u2014 <code>ICTCG1Z2MLightController</code> </li> <li> Media Player \u2014 <code>ICTCG1MediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/ICTCG1/#light","title":"Light","text":"<p>Class: <code>ICTCG1Controller</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>brightness_move_up</code> <code>move_with_on_off_0_70</code> hold_brightness_up <code>brightness_move_down</code> <code>move_1_70</code>, <code>move_1_195</code> hold_brightness_down <code>brightness_stop</code> <code>stop</code> release <code>brightness_move_to_level</code> brightness_from_controller_level <code>1002</code> <code>move_to_level_with_on_off_255_1</code> rotate_right_quick <code>2002</code> click_brightness_up <code>3002</code> click_brightness_down <code>4002</code> <code>move_to_level_with_on_off_0_1</code> rotate_left_quick <code>move_with_on_off_0_195</code> on Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1Controller\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1Controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1Controller\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1Controller\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ICTCG1/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>ICTCG1Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release <code>brightness_move_to_level</code> brightness_from_controller_level Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/ICTCG1/#media-player","title":"Media Player","text":"<p>Class: <code>ICTCG1MediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>brightness_move_up</code> <code>move_with_on_off_0_70</code>, <code>move_with_on_off_0_195</code> hold_volume_up <code>brightness_move_down</code> <code>move_1_70</code>, <code>move_1_195</code> hold_volume_down <code>brightness_stop</code> <code>stop</code> release <code>1002</code> <code>move_to_level_with_on_off_255_1</code> rotate_right_quick <code>2002</code> click_volume_up <code>3002</code> click_volume_down <code>4002</code> <code>move_to_level_with_on_off_0_1</code> rotate_left_quick Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1MediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1MediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1MediaPlayerController\n  integration: deconz\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ICTCG1MediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/LZL4BWHL01/","title":"LZL4BWHL01","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>LZL4BWHL01LightController</code> </li> </ul> <ul> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/LZL4BWHL01/#light","title":"Light","text":"<p>Class: <code>LZL4BWHL01LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> deCONZ ZHA Predefined actions <code>1002</code> <code>move_to_level_with_on_off_254_4</code> on_full_brightness <code>2001</code> <code>step_with_on_off_0_30_6</code> hold_brightness_up <code>2003</code>, <code>3003</code> <code>stop</code> release <code>3001</code> <code>step_1_30_6</code> hold_brightness_down <code>4002</code> <code>move_to_level_with_on_off_0_4</code> off deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: LZL4BWHL01LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: LZL4BWHL01LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Legrand600083/","title":"Legrand600083","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>Legrand600083LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>Legrand600083Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/Legrand600083/#light","title":"Light","text":"<p>Class: <code>Legrand600083LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>\"on\"</code> <code>1_on</code> on <code>\"off\"</code> <code>1_off</code> off <code>brightness_move_up</code> <code>1_move_up</code> hold_brightness_up <code>brightness_move_down</code> <code>1_move_down</code> hold_brightness_down <code>brightness_stop</code> <code>1_stop</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: Legrand600083LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Legrand600083LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Legrand600083LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Legrand600083/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>Legrand600083Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: Legrand600083Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Legrand600083Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/Legrand600088/","title":"Legrand600088","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>Legrand600088LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>Legrand600088Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/Legrand600088/#light","title":"Light","text":"<p>Class: <code>Legrand600088LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>on_left</code> <code>1_on</code> on <code>off_left</code> <code>1_off</code> off <code>brightness_move_up_left</code> <code>1_move_up</code> hold_color_up <code>brightness_move_down_left</code> <code>1_move_down</code> hold_color_down <code>brightness_stop_left</code>, <code>brightness_stop_right</code> <code>1_stop</code>, <code>2_stop</code> release <code>on_right</code> <code>2_on</code> on_full_brightness <code>off_right</code> <code>2_off</code> on_min_brightness <code>brightness_move_up_right</code> <code>2_move_up</code> hold_brightness_up <code>brightness_move_down_right</code> <code>2_move_down</code> hold_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: Legrand600088LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Legrand600088LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Legrand600088LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Legrand600088/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>Legrand600088Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>on_left</code> on <code>off_left</code> off <code>brightness_move_up_left</code> hold_colortemp_up <code>brightness_move_down_left</code> hold_colortemp_down <code>brightness_stop_left</code>, <code>brightness_stop_right</code> release <code>on_right</code> on_full_brightness <code>off_right</code> on_min_brightness <code>brightness_move_up_right</code> hold_brightness_up <code>brightness_move_down_right</code> hold_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: Legrand600088Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Legrand600088Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/LutronPJ22B/","title":"LutronPJ22B","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>LutronPJ22BLightController</code> </li> <li> Media Player \u2014 <code>LutronPJ22BMediaPlayerController</code> </li> </ul> <ul> <li>           State (state)         </li> <li>           Lutron Caseta (lutron)         </li> </ul>"},{"location":"controllers/LutronPJ22B/#notes","title":"Notes","text":"<p>For the State integration, it requires the LutronCasetaPro CUSTOM integration by upsert. THIS WILL NOT WORK with the default Lutron Caseta integration. All Lutron Caseta Pro Pico remotes supported by LutronCasetaPro are supported using this controller type except for the 4-button PJ2-4B remotes which is separate.</p>"},{"location":"controllers/LutronPJ22B/#light","title":"Light","text":"<p>Class: <code>LutronPJ22BLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> State Lutron Caseta Predefined actions <code>1</code> on_full_brightness <code>4</code> <code>button_4_press</code> off <code>button_2_press</code> on StateLutron Caseta <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ22BLightController\n  integration: state\n  controller: sensor.my_custom_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ22BLightController\n  integration: lutron\n  controller: 87654321\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/LutronPJ22B/#media-player","title":"Media Player","text":"<p>Class: <code>LutronPJ22BMediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> State Lutron Caseta Predefined actions <code>1</code> <code>button_2_press</code> play_pause <code>4</code> <code>button_4_press</code> next_track StateLutron Caseta <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ22BMediaPlayerController\n  integration: state\n  controller: sensor.my_custom_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ22BMediaPlayerController\n  integration: lutron\n  controller: 87654321\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/LutronPJ22BRL/","title":"LutronPJ22BRL","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>LutronPJ22BRLLightController</code> </li> <li> Media Player \u2014 <code>LutronPJ22BRLMediaPlayerController</code> </li> </ul> <ul> <li>           State (state)         </li> </ul>"},{"location":"controllers/LutronPJ22BRL/#notes","title":"Notes","text":"<p>For the State integration, it requires the LutronCasetaPro CUSTOM integration by upsert. THIS WILL NOT WORK with the default Lutron Caseta integration. All Lutron Caseta Pro Pico remotes supported by LutronCasetaPro are supported using this controller type except for the 4-button PJ2-4B remotes which is separate.</p>"},{"location":"controllers/LutronPJ22BRL/#light","title":"Light","text":"<p>Class: <code>LutronPJ22BRLLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> State Predefined actions <code>1</code> on_full_brightness <code>8</code> hold_brightness_up <code>16</code> hold_brightness_down <code>4</code> off <code>0</code> release State <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ22BRLLightController\n  integration: state\n  controller: sensor.my_custom_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/LutronPJ22BRL/#media-player","title":"Media Player","text":"<p>Class: <code>LutronPJ22BRLMediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> State Predefined actions <code>1</code> play_pause <code>8</code> hold_volume_up <code>16</code> hold_volume_down <code>4</code> next_track <code>0</code> release State <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ22BRLMediaPlayerController\n  integration: state\n  controller: sensor.my_custom_controller\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/LutronPJ23BRL/","title":"LutronPJ23BRL","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>LutronPJ23BRLLightController</code> </li> <li> Media Player \u2014 <code>LutronPJ23BRLMediaPlayerController</code> </li> </ul> <ul> <li>           State (state)         </li> <li>           Lutron Caseta (lutron)         </li> </ul>"},{"location":"controllers/LutronPJ23BRL/#notes","title":"Notes","text":"<p>For the State integration, it requires the LutronCasetaPro CUSTOM integration by upsert. THIS WILL NOT WORK with the default Lutron Caseta integration. All Lutron Caseta Pro Pico remotes supported by LutronCasetaPro are supported using this controller type except for the 4-button PJ2-4B remotes which is separate.</p>"},{"location":"controllers/LutronPJ23BRL/#light","title":"Light","text":"<p>Class: <code>LutronPJ23BRLLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> State Lutron Caseta Predefined actions <code>1</code> <code>button_2_press</code> on_full_brightness <code>8</code> <code>button_5_press</code> hold_brightness_up <code>2</code> <code>button_3_press</code> set_half_brightness <code>16</code> <code>button_6_press</code> hold_brightness_down <code>4</code> <code>button_4_press</code> off <code>0</code> <code>button_5_release</code>, <code>button_6_release</code> release StateLutron Caseta <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ23BRLLightController\n  integration: state\n  controller: sensor.my_custom_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ23BRLLightController\n  integration: lutron\n  controller: 87654321\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/LutronPJ23BRL/#media-player","title":"Media Player","text":"<p>Class: <code>LutronPJ23BRLMediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> State Lutron Caseta Predefined actions <code>1</code> <code>button_2_press</code> play_pause <code>8</code> <code>button_5_press</code> hold_volume_up <code>2</code> <code>button_3_press</code> next_source <code>16</code> <code>button_6_press</code> hold_volume_down <code>4</code> <code>button_4_press</code> next_track <code>0</code> <code>button_5_release</code>, <code>button_6_release</code> release StateLutron Caseta <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ23BRLMediaPlayerController\n  integration: state\n  controller: sensor.my_custom_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ23BRLMediaPlayerController\n  integration: lutron\n  controller: 87654321\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/LutronPJ24B/","title":"LutronPJ24B","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>LutronPJ24BLightController</code> </li> <li> Media Player \u2014 <code>LutronPJ24BMediaPlayerController</code> </li> </ul> <ul> <li>           State (state)         </li> </ul>"},{"location":"controllers/LutronPJ24B/#notes","title":"Notes","text":"<p>For the State integration, it requires the LutronCasetaPro CUSTOM integration by upsert. THIS WILL NOT WORK with the default Lutron Caseta integration.</p>"},{"location":"controllers/LutronPJ24B/#light","title":"Light","text":"<p>Class: <code>LutronPJ24BLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> State Predefined actions <code>1</code> on_full_brightness <code>2</code> hold_brightness_up <code>4</code> hold_brightness_down <code>8</code> off <code>0</code> release State <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ24BLightController\n  integration: state\n  controller: sensor.my_custom_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/LutronPJ24B/#media-player","title":"Media Player","text":"<p>Class: <code>LutronPJ24BMediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> State Predefined actions <code>1</code> play_pause <code>2</code> hold_volume_up <code>4</code> hold_volume_down <code>8</code> next_track <code>0</code> release State <pre><code>example_app:\n  module: controllerx\n  class: LutronPJ24BMediaPlayerController\n  integration: state\n  controller: sensor.my_custom_controller\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/MFKZQ01LM/","title":"MFKZQ01LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>MFKZQ01LMLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/MFKZQ01LM/#notes","title":"Notes","text":"<p>This controller does not have a self-explained way to use it since its main purpose is to be customized, this is why we recommend to customize it with custom mapping.</p> <p>deCONZ integration should be added with type gesture.</p>"},{"location":"controllers/MFKZQ01LM/#light","title":"Light","text":"<p>Class: <code>MFKZQ01LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>shake</code> <code>1</code> <code>shake</code> on_min_brightness <code>tap</code> <code>6</code> <code>knock</code> toggle <code>slide</code> <code>5</code> <code>slide</code> on_full_brightness <code>flip180</code> <code>4</code> <code>flip180</code> click_color_up <code>flip90</code> <code>3</code> <code>flip90</code> click_color_down <code>rotate_left</code> <code>8</code> <code>rotate_left</code> click_brightness_down <code>rotate_right</code> <code>7</code> <code>rotate_right</code> click_brightness_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: MFKZQ01LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MFKZQ01LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MFKZQ01LMLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MFKZQ01LMLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/MLI404002/","title":"MLI404002","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>MLI404002LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>MLI404002Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/MLI404002/#light","title":"Light","text":"<p>Class: <code>MLI404002LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>\"on\"</code>, <code>\"off\"</code> <code>\"on\"</code>, <code>\"off\"</code> toggle <code>brightness_step_up</code> <code>step_up</code> click_brightness_up <code>brightness_step_down</code> <code>step_down</code> click_brightness_down <code>brightness_move_up</code> <code>move_up</code> hold_brightness_up <code>brightness_move_down</code> <code>move_down</code> hold_brightness_down <code>brightness_stop</code> <code>stop</code> release <code>recall_1</code> <code>recall</code> on_full_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: MLI404002LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MLI404002LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MLI404002LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/MLI404002/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>MLI404002Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code>, <code>\"off\"</code> toggle <code>brightness_step_up</code> click_brightness_up <code>brightness_step_down</code> click_brightness_down <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release <code>recall_1</code> on_full_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: MLI404002Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MLI404002Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/MLI404011/","title":"MLI404011","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>MLI404011LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>MLI404011Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> </ul>"},{"location":"controllers/MLI404011/#notes","title":"Notes","text":"<p>Some buttons are left to be mapped for both integrations. Please read more about in here (deconz) and here (z2m).</p>"},{"location":"controllers/MLI404011/#light","title":"Light","text":"<p>Class: <code>MLI404011LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ Predefined actions <code>\"on\"</code>, <code>\"off\"</code> <code>1002</code> toggle <code>brightness_down_click</code> <code>3002</code> click_brightness_down <code>brightness_down_hold</code> <code>3001</code> hold_brightness_down <code>brightness_down_release</code>, <code>brightness_up_release</code> <code>2003</code>, <code>3003</code> release <code>brightness_up_click</code> <code>2002</code> click_brightness_up <code>brightness_up_hold</code> <code>2001</code> hold_brightness_up <code>color_wheel</code> <code>6002</code> xycolor_from_controller <code>color_temp</code> colortemp_from_controller <code>scene_1</code>, <code>scene_2</code>, <code>scene_3</code>, <code>scene_4</code>, <code>scene_5</code>, <code>scene_6</code> <code>7002</code>, <code>8002</code>, <code>9002</code>, <code>10002</code>, <code>11002</code>, <code>12002</code> <code>No action</code> <code>4002</code> click_color_up <code>5002</code> click_color_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZ <pre><code>example_app:\n  module: controllerx\n  class: MLI404011LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MLI404011LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MLI404011LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/MLI404011/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>MLI404011Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code>, <code>\"off\"</code> toggle <code>brightness_down_click</code> click_brightness_down <code>brightness_down_hold</code> hold_brightness_down <code>brightness_down_release</code>, <code>brightness_up_release</code> release <code>brightness_up_click</code> click_brightness_up <code>brightness_up_hold</code> hold_brightness_up <code>color_wheel</code> xycolor_from_controller <code>color_temp</code> colortemp_from_controller <code>scene_1</code>, <code>scene_2</code>, <code>scene_3</code>, <code>scene_4</code>, <code>scene_5</code>, <code>scene_6</code> <code>No action</code> Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: MLI404011Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: MLI404011Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/OsramAC025XX00NJ/","title":"OsramAC025XX00NJ","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>OsramAC025XX00NJLightController</code> </li> </ul> <ul> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/OsramAC025XX00NJ/#notes","title":"Notes","text":"<p>This controller is supported for AC0251100NJ / AC0251400NJ / AC0251600NJ / AC0251700NJ. Different models are just different colours.</p>"},{"location":"controllers/OsramAC025XX00NJ/#light","title":"Light","text":"<p>Class: <code>OsramAC025XX00NJLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> deCONZ ZHA Predefined actions <code>1002</code> <code>1_on</code> on <code>1001</code> <code>1_move_with_on_off</code> hold_brightness_up <code>1003</code>, <code>2003</code>, <code>3003</code> <code>1_stop</code>, <code>3_move_hue</code>, <code>2_stop</code> release <code>2002</code> <code>2_off</code> off <code>2001</code> <code>2_move</code> hold_brightness_down <code>3002</code> <code>3_move_to_color_temp</code> sync <code>3001</code> <code>3_move_to_saturation</code> hold_color_up <code>3_move_to_level_with_on_off</code> <code>No action</code> deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: OsramAC025XX00NJLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: OsramAC025XX00NJLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/PTM215X/","title":"PTM215X","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>PTM215XLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> </ul>"},{"location":"controllers/PTM215X/#notes","title":"Notes","text":"<p>Check the button mapping in here.</p>"},{"location":"controllers/PTM215X/#light","title":"Light","text":"<p>Class: <code>PTM215XLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ Predefined actions <code>press_1</code> <code>1002</code> on <code>release_1</code>, <code>release_2</code>, <code>release_3</code>, <code>release_4</code>, <code>release_1_and_3</code>, <code>release_2_and_4</code> <code>3003</code>, <code>4003</code>, <code>5003</code>, <code>6003</code> release <code>press_2</code> <code>2002</code> off <code>press_3</code> <code>3002</code> on_full_brightness <code>press_4</code> <code>4002</code> on_min_brightness <code>press_1_and_3</code> <code>5002</code> on_full_color_temp <code>press_2_and_4</code> <code>6002</code> on_min_color_temp <code>press_energy_bar</code> <code>1001</code>, <code>2001</code> sync <code>1000</code>, <code>1003</code>, <code>2000</code>, <code>2003</code>, <code>3000</code>, <code>4000</code>, <code>5000</code>, <code>6000</code> <code>No action</code> <code>3001</code> hold_brightness_up <code>4001</code> hold_brightness_down <code>5001</code> hold_color_up <code>6001</code> hold_color_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZ <pre><code>example_app:\n  module: controllerx\n  class: PTM215XLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: PTM215XLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: PTM215XLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Philips929002398602/","title":"Philips929002398602","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>Philips929002398602LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>Philips929002398602Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/Philips929002398602/#light","title":"Light","text":"<p>Class: <code>Philips929002398602LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>on_press_release</code>, <code>on_hold</code> <code>1002</code>, <code>1001</code> <code>on_hold</code>, <code>on_short_release</code> toggle <code>on_hold_release</code>, <code>up_hold_release</code>, <code>down_hold_release</code>, <code>off_hold_release</code> <code>1003</code>, <code>2003</code>, <code>3003</code>, <code>4003</code> <code>off_long_release</code>, <code>down_long_release</code>, <code>up_long_release</code>, <code>on_long_release</code> release <code>up_press_release</code> <code>2002</code> <code>up_short_release</code> click_brightness_up <code>up_hold</code> <code>2001</code> <code>up_hold</code> hold_brightness_up <code>down_press_release</code> <code>3002</code> <code>down_short_release</code> click_brightness_down <code>down_hold</code> <code>3001</code> <code>down_hold</code> hold_brightness_down <code>off_press_release</code> <code>4002</code> <code>off_short_release</code> click_color_up <code>off_hold</code> <code>4001</code> <code>off_hold</code> hold_color_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: Philips929002398602LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Philips929002398602LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Philips929002398602LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Philips929002398602LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Philips929002398602/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>Philips929002398602Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>on_press_release</code> on <code>on_hold</code> hold_colortemp_up <code>on_hold_release</code>, <code>up_hold_release</code>, <code>down_hold_release</code>, <code>off_hold_release</code> release <code>up_press_release</code> click_brightness_up <code>up_hold</code> hold_brightness_up <code>down_press_release</code> click_brightness_down <code>down_hold</code> hold_brightness_down <code>off_press_release</code> off <code>off_hold</code> hold_colortemp_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: Philips929002398602Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Philips929002398602Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/Philips929003017102/","title":"Philips929003017102","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>Philips929003017102LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>Philips929003017102Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/Philips929003017102/#notes","title":"Notes","text":"<p>This controller has 4 modes and depending on which one is used, it will trigger one action or another: single_rocker, single_push_button, dual_rocker, dual_push_button. You can read more about it in these threads: deconz and zigbee2mqtt.</p>"},{"location":"controllers/Philips929003017102/#light","title":"Light","text":"<p>Class: <code>Philips929003017102LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>left_press_release</code>, <code>right_press_release</code> <code>1002</code>, <code>2002</code> <code>left_press_release</code>, <code>right_press_release</code> toggle <code>left_hold</code>, <code>right_hold</code> <code>1001</code>, <code>2001</code> <code>left_hold</code>, <code>right_hold</code> hold_brightness_toggle <code>left_hold_release</code>, <code>right_hold_release</code> <code>1003</code>, <code>2003</code> <code>left_hold_release</code>, <code>right_hold_release</code> release <code>1000</code>, <code>2000</code> <code>No action</code> Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: Philips929003017102LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Philips929003017102LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Philips929003017102LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Philips929003017102LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Philips929003017102/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>Philips929003017102Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>left_press_release</code>, <code>right_press_release</code> toggle <code>left_hold</code>, <code>right_hold</code> hold_brightness_toggle <code>left_hold_release</code>, <code>right_hold_release</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: Philips929003017102Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Philips929003017102Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/PhilipsRDM002/","title":"PhilipsRDM002","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>PhilipsRDM002LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>PhilipsRDM002Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/PhilipsRDM002/#light","title":"Light","text":"<p>Class: <code>PhilipsRDM002LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>button_1_press_release</code> off <code>button_1_hold</code> hold_brightness_down <code>button_1_hold_release</code>, <code>button_2_hold_release</code>, <code>button_3_hold_release</code>, <code>button_4_hold_release</code> release <code>button_2_press_release</code> on <code>button_2_hold</code> hold_brightness_up <code>button_3_press_release</code> click_color_down <code>button_3_hold</code> hold_color_down <code>button_4_press_release</code> click_color_up <code>button_4_hold</code> hold_color_up <code>dial_rotate_left_step</code> click_brightness_down <code>dial_rotate_left_slow</code> on_min_color_temp <code>dial_rotate_left_fast</code> on_min_brightness <code>dial_rotate_right_step</code> click_brightness_up <code>dial_rotate_right_slow</code> on_full_color_temp <code>dial_rotate_right_fast</code> on_full_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: PhilipsRDM002LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: PhilipsRDM002LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/PhilipsRDM002/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>PhilipsRDM002Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>button_1_press_release</code> off <code>button_1_hold</code> hold_brightness_down <code>button_1_hold_release</code>, <code>button_2_hold_release</code>, <code>button_3_hold_release</code>, <code>button_4_hold_release</code> release <code>button_2_press_release</code> on <code>button_2_hold</code> hold_brightness_up <code>button_3_press_release</code> click_colortemp_down <code>button_3_hold</code> hold_colortemp_down <code>button_4_press_release</code> click_colortemp_up <code>button_4_hold</code> hold_colortemp_up <code>dial_rotate_left_step</code> click_brightness_down <code>dial_rotate_left_slow</code> on_min_color_temp <code>dial_rotate_left_fast</code> on_min_brightness <code>dial_rotate_right_step</code> click_brightness_up <code>dial_rotate_right_slow</code> on_full_color_temp <code>dial_rotate_right_fast</code> on_full_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: PhilipsRDM002Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: PhilipsRDM002Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/Prolight5412748727388/","title":"Prolight5412748727388","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>Prolight5412748727388LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>Prolight5412748727388Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/Prolight5412748727388/#light","title":"Light","text":"<p>Class: <code>Prolight5412748727388LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release <code>brightness_move_to_level</code> brightness_from_controller_level <code>color_temperature_move</code> colortemp_from_controller <code>color_temperature_move_up</code> click_colortemp_up <code>color_temperature_move_down</code> click_colortemp_down <code>color_move</code> xycolor_from_controller Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: Prolight5412748727388LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Prolight5412748727388LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Prolight5412748727388/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>Prolight5412748727388Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release <code>brightness_move_to_level</code> brightness_from_controller_level <code>color_temperature_move</code> colortemp_from_controller <code>color_temperature_move_up</code> click_colortemp_up <code>color_temperature_move_down</code> click_colortemp_down <code>color_move</code> xycolor_from_controller Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: Prolight5412748727388Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Prolight5412748727388Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/ROB2000070/","title":"ROB2000070","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ROB2000070LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>ROB2000070Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/ROB2000070/#notes","title":"Notes","text":"<p>Note that each button perform the same actions. This is because ControllerX is designed to control just one entity (light or media player). So, you can include the <code>actions</code> parameter to include the actions needed, or use the <code>mapping</code> attribute to define a custom mapping. You can check here for reference.</p> <p>This controller is a white-label version of the Sunricher SR-ZG9001K8-DIM.</p>"},{"location":"controllers/ROB2000070/#light","title":"Light","text":"<p>Class: <code>ROB2000070LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>on_1</code>, <code>on_2</code>, <code>on_3</code>, <code>on_4</code> on <code>off_1</code>, <code>off_2</code>, <code>off_3</code>, <code>off_4</code> off <code>brightness_move_up_1</code>, <code>brightness_move_up_2</code>, <code>brightness_move_up_3</code>, <code>brightness_move_up_4</code> hold_brightness_up <code>brightness_move_down_1</code>, <code>brightness_move_down_2</code>, <code>brightness_move_down_3</code>, <code>brightness_move_down_4</code> hold_brightness_down <code>brightness_stop_1</code>, <code>brightness_stop_2</code>, <code>brightness_stop_3</code>, <code>brightness_stop_4</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ROB2000070LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ROB2000070LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ROB2000070/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>ROB2000070Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>on_1</code>, <code>on_2</code>, <code>on_3</code>, <code>on_4</code> on <code>off_1</code>, <code>off_2</code>, <code>off_3</code>, <code>off_4</code> off <code>brightness_move_up_1</code>, <code>brightness_move_up_2</code>, <code>brightness_move_up_3</code>, <code>brightness_move_up_4</code> hold_brightness_up <code>brightness_move_down_1</code>, <code>brightness_move_down_2</code>, <code>brightness_move_down_3</code>, <code>brightness_move_down_4</code> hold_brightness_down <code>brightness_stop_1</code>, <code>brightness_stop_2</code>, <code>brightness_stop_3</code>, <code>brightness_stop_4</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ROB2000070Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ROB2000070Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/SK5700002228949/","title":"SK5700002228949","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>SK5700002228949LightController</code> </li> </ul> <ul> <li>           deCONZ (deconz)         </li> </ul>"},{"location":"controllers/SK5700002228949/#light","title":"Light","text":"<p>Class: <code>SK5700002228949LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> deCONZ Predefined actions <code>1002</code> on <code>1001</code> hold_brightness_up <code>1003</code>, <code>3003</code>, <code>2003</code>, <code>4003</code> release <code>3002</code> off <code>3001</code> hold_brightness_down <code>2002</code> click_color_up <code>2001</code> hold_color_up <code>4002</code> click_color_down <code>4001</code> hold_color_down deCONZ <pre><code>example_app:\n  module: controllerx\n  class: SK5700002228949LightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/SNZB01/","title":"SNZB01","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>SNZB01LightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/SNZB01/#light","title":"Light","text":"<p>Class: <code>SNZB01LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>single</code> <code>toggle</code> toggle <code>double</code> <code>\"on\"</code> on_full_brightness <code>long</code> <code>\"off\"</code> on_min_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: SNZB01LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: SNZB01LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: SNZB01LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Shelly25/","title":"Shelly25","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>Shelly25LightController</code> </li> </ul> <ul> <li>           Shelly (shelly)         </li> </ul>"},{"location":"controllers/Shelly25/#light","title":"Light","text":"<p>Class: <code>Shelly25LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Shelly Predefined actions <code>single_push_1</code> on <code>long_push_1</code> hold_brightness_up <code>btn_up_1</code>, <code>btn_up_2</code> release <code>double_push_1</code> on_full_brightness <code>single_push_2</code> off <code>long_push_2</code> hold_brightness_down <code>double_push_2</code> on_min_brightness Shelly <pre><code>example_app:\n  module: controllerx\n  class: Shelly25LightController\n  integration: shelly\n  controller: shellybutton-ABC123456\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ShellyDimmer2/","title":"ShellyDimmer2","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ShellyDimmer2LightController</code> </li> </ul> <ul> <li>           Shelly (shelly)         </li> </ul>"},{"location":"controllers/ShellyDimmer2/#light","title":"Light","text":"<p>Class: <code>ShellyDimmer2LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Shelly Predefined actions <code>single_1</code>, <code>long_1</code> toggle <code>single_2</code>, <code>long_2</code> <code>No action</code> Shelly <pre><code>example_app:\n  module: controllerx\n  class: ShellyDimmer2LightController\n  integration: shelly\n  controller: shellybutton-ABC123456\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ShellyI3/","title":"ShellyI3","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ShellyI3LightController</code> </li> </ul> <ul> <li>           ShellyForHass (shellyforhass)         </li> </ul>"},{"location":"controllers/ShellyI3/#light","title":"Light","text":"<p>Class: <code>ShellyI3LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> ShellyForHass Predefined actions <code>single</code> click_brightness_up <code>long</code> click_brightness_down <code>double</code> on_full_brightness ShellyForHass <pre><code>example_app:\n  module: controllerx\n  class: ShellyI3LightController\n  integration: shellyforhass\n  controller: binary_sensor.shelly_button_switch\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ShellyPlusI4/","title":"ShellyPlusI4","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ShellyPlusI4LightController</code> </li> </ul> <ul> <li>           Shelly (shelly)         </li> </ul>"},{"location":"controllers/ShellyPlusI4/#light","title":"Light","text":"<p>Class: <code>ShellyPlusI4LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Shelly Predefined actions <code>single_push_1</code> on <code>long_push_1</code> hold_color_up <code>btn_up_1</code>, <code>btn_up_2</code>, <code>btn_up_3</code>, <code>btn_up_4</code> release <code>double_push_1</code> on_full_color_temp <code>single_push_2</code> off <code>long_push_2</code> hold_color_down <code>double_push_2</code> on_min_color_temp <code>single_push_3</code> click_brightness_up <code>long_push_3</code> hold_brightness_up <code>double_push_3</code> on_full_brightness <code>single_push_4</code> click_brightness_down <code>long_push_4</code> hold_brightness_down <code>double_push_4</code> on_min_brightness Shelly <pre><code>example_app:\n  module: controllerx\n  class: ShellyPlusI4LightController\n  integration: shelly\n  controller: shellybutton-ABC123456\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/SmartThingsButton/","title":"SmartThingsButton","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>SmartThingsButtonLightController</code> </li> <li> Media Player \u2014 <code>SmartThingsButtonMediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/SmartThingsButton/#light","title":"Light","text":"<p>Class: <code>SmartThingsButtonLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>single</code> <code>1002</code> <code>button_single_1_0_0_0</code> toggle <code>double</code> <code>1004</code> <code>button_double_2_0_0_0</code> on_full_brightness <code>hold</code> <code>1001</code> <code>button_hold_3_0_0_0</code> set_half_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: SmartThingsButtonLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: SmartThingsButtonLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: SmartThingsButtonLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: SmartThingsButtonLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/SmartThingsButton/#media-player","title":"Media Player","text":"<p>Class: <code>SmartThingsButtonMediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>single_click</code> <code>1002</code> <code>button_single_1_0_0_0</code> play_pause <code>double_click</code> <code>1004</code> <code>button_double_2_0_0_0</code> next_track <code>hold</code> <code>1001</code> <code>button_hold_3_0_0_0</code> previous_track Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: SmartThingsButtonMediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: SmartThingsButtonMediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: SmartThingsButtonMediaPlayerController\n  integration: deconz\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: SmartThingsButtonMediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/TS0042/","title":"TS0042","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TS0042LightController</code> </li> </ul> <ul> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/TS0042/#light","title":"Light","text":"<p>Class: <code>TS0042LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> ZHA Predefined actions <code>1_remote_button_short_press</code> on <code>1_remote_button_double_press</code> click_brightness_up <code>1_remote_button_long_press</code> on_full_brightness <code>2_remote_button_short_press</code> off <code>2_remote_button_double_press</code> on_min_brightness ZHA <pre><code>example_app:\n  module: controllerx\n  class: TS0042LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TS0043/","title":"TS0043","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TS0043LightController</code> </li> <li> Cover \u2014 <code>TS0043CoverController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/TS0043/#light","title":"Light","text":"<p>Class: <code>TS0043LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>1_single</code>, <code>2_single</code>, <code>3_single</code> <code>1_remote_button_short_press</code>, <code>2_remote_button_short_press</code>, <code>3_remote_button_short_press</code> toggle <code>1_double</code>, <code>2_double</code>, <code>3_double</code> <code>1_remote_button_double_press</code>, <code>2_remote_button_double_press</code>, <code>3_remote_button_double_press</code> click_brightness_up <code>1_hold</code>, <code>2_hold</code>, <code>3_hold</code> <code>1_remote_button_long_press</code>, <code>2_remote_button_long_press</code>, <code>3_remote_button_long_press</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: TS0043LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TS0043LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TS0043LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TS0043/#cover","title":"Cover","text":"<p>Class: <code>TS0043CoverController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>1_single</code> open <code>2_single</code> stop <code>3_single</code> close Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: TS0043CoverController\n  integration: z2m\n  controller: sensor.my_controller_action\n  cover: cover.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TS0043CoverController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  cover: cover.my_entity_id\n</code></pre>"},{"location":"controllers/TS0044/","title":"TS0044","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TS0044LightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/TS0044/#notes","title":"Notes","text":"<p>Note that each button perform the same actions. This is because ControllerX is designed to control just one entity (light or media player). So, you can include the <code>actions</code> parameter to include the actions needed, or use the <code>mapping</code> attribute to define a custom mapping. You can check here for reference.</p> <p>Also, this controller support hold action, but not release. This means that there is not smooth brightness changes when holding, just step by step everytime is held.</p>"},{"location":"controllers/TS0044/#light","title":"Light","text":"<p>Class: <code>TS0044LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>1_single</code>, <code>2_single</code>, <code>3_single</code>, <code>4_single</code> toggle <code>1_double</code>, <code>2_double</code>, <code>3_double</code>, <code>4_double</code> click_brightness_up <code>1_hold</code>, <code>2_hold</code>, <code>3_hold</code>, <code>4_hold</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: TS0044LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TS0044LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TS0044F/","title":"TS0044F","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TS0044FLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/TS0044F/#notes","title":"Notes","text":"<p>This device is very similar to the TS0044 Tuya, except that it doesn't hold action, double clicks.</p> <p>Note that each button perform the same actions. This is because ControllerX is designed to control just one entity (light or media player). So, you can include the <code>actions</code> parameter to include the actions needed, or use the <code>mapping</code> attribute to define a custom mapping. You can check here for reference.</p> <p>Also, this controller doesn't support hold action. This means that there is not smooth brightness changes when holding, just step by step everytime it's pressed.</p>"},{"location":"controllers/TS0044F/#light","title":"Light","text":"<p>Class: <code>TS0044FLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code>, <code>\"off\"</code> toggle <code>brightness_step_up</code> click_brightness_up <code>brightness_step_down</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: TS0044FLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TS0044FLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TasmotaButton/","title":"TasmotaButton","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TasmotaButtonLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>TasmotaButtonZ2MLightController</code> </li> <li> Switch \u2014 <code>TasmotaButtonSwitchController</code> </li> <li> Cover \u2014 <code>TasmotaButtonCoverController</code> </li> </ul> <ul> <li>           Tasmota (tasmota)         </li> </ul>"},{"location":"controllers/TasmotaButton/#light","title":"Light","text":"<p>Class: <code>TasmotaButtonLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Tasmota Predefined actions <code>TOGGLE</code>, <code>SINGLE</code> toggle <code>DOUBLE</code> on_min_brightness <code>TRIPLE</code> set_half_brightness <code>QUAD</code> on_full_brightness <code>PENTA</code> <code>No action</code> <code>HOLD</code> hold_brightness_toggle <code>CLEAR</code> release Tasmota <pre><code>example_app:\n  module: controllerx\n  class: TasmotaButtonLightController\n  integration:\n    name: tasmota\n    component: MyComponent\n  controller: stat/tasmota_device/RESULT\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TasmotaButton/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>TasmotaButtonZ2MLightController</code></p> <p>Default mapping:</p> Tasmota Predefined actions <code>TOGGLE</code>, <code>SINGLE</code> toggle <code>DOUBLE</code> on_min_brightness <code>TRIPLE</code> set_half_brightness <code>QUAD</code> on_full_brightness <code>PENTA</code> <code>No action</code> <code>HOLD</code> hold_brightness_toggle <code>CLEAR</code> release Tasmota <pre><code>example_app:\n  module: controllerx\n  class: TasmotaButtonZ2MLightController\n  integration:\n    name: tasmota\n    component: MyComponent\n  controller: stat/tasmota_device/RESULT\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/TasmotaButton/#switch","title":"Switch","text":"<p>Class: <code>TasmotaButtonSwitchController</code></p> <p>Default mapping:</p> Tasmota Predefined actions <code>TOGGLE</code>, <code>SINGLE</code> toggle <code>DOUBLE</code> on <code>TRIPLE</code> off <code>QUAD</code>, <code>PENTA</code>, <code>HOLD</code>, <code>CLEAR</code> <code>No action</code> Tasmota <pre><code>example_app:\n  module: controllerx\n  class: TasmotaButtonSwitchController\n  integration:\n    name: tasmota\n    component: MyComponent\n  controller: stat/tasmota_device/RESULT\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/TasmotaButton/#cover","title":"Cover","text":"<p>Class: <code>TasmotaButtonCoverController</code></p> <p>Default mapping:</p> Tasmota Predefined actions <code>TOGGLE</code>, <code>SINGLE</code> toggle_open <code>DOUBLE</code>, <code>HOLD</code> close <code>TRIPLE</code>, <code>QUAD</code>, <code>PENTA</code>, <code>CLEAR</code> <code>No action</code> Tasmota <pre><code>example_app:\n  module: controllerx\n  class: TasmotaButtonCoverController\n  integration:\n    name: tasmota\n    component: MyComponent\n  controller: stat/tasmota_device/RESULT\n  cover: cover.my_entity_id\n</code></pre>"},{"location":"controllers/TasmotaSwitch/","title":"TasmotaSwitch","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TasmotaSwitchLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>TasmotaSwitchZ2MLightController</code> </li> <li> Switch \u2014 <code>TasmotaSwitchSwitchController</code> </li> <li> Cover \u2014 <code>TasmotaSwitchCoverController</code> </li> </ul> <ul> <li>           Tasmota (tasmota)         </li> </ul>"},{"location":"controllers/TasmotaSwitch/#light","title":"Light","text":"<p>Class: <code>TasmotaSwitchLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Tasmota Predefined actions <code>TOGGLE</code> toggle <code>ON</code> on <code>OFF</code> off <code>HOLD</code> on_min_max_brightness Tasmota <pre><code>example_app:\n  module: controllerx\n  class: TasmotaSwitchLightController\n  integration:\n    name: tasmota\n    component: MyComponent\n  controller: stat/tasmota_device/RESULT\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TasmotaSwitch/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>TasmotaSwitchZ2MLightController</code></p> <p>Default mapping:</p> Tasmota Predefined actions <code>TOGGLE</code> toggle <code>ON</code> on <code>OFF</code> off <code>HOLD</code> set_half_brightness Tasmota <pre><code>example_app:\n  module: controllerx\n  class: TasmotaSwitchZ2MLightController\n  integration:\n    name: tasmota\n    component: MyComponent\n  controller: stat/tasmota_device/RESULT\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/TasmotaSwitch/#switch","title":"Switch","text":"<p>Class: <code>TasmotaSwitchSwitchController</code></p> <p>Default mapping:</p> Tasmota Predefined actions <code>TOGGLE</code> toggle <code>ON</code> on <code>OFF</code> off <code>HOLD</code> <code>No action</code> Tasmota <pre><code>example_app:\n  module: controllerx\n  class: TasmotaSwitchSwitchController\n  integration:\n    name: tasmota\n    component: MyComponent\n  controller: stat/tasmota_device/RESULT\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/TasmotaSwitch/#cover","title":"Cover","text":"<p>Class: <code>TasmotaSwitchCoverController</code></p> <p>Default mapping:</p> Tasmota Predefined actions <code>TOGGLE</code> toggle_open <code>ON</code> open <code>OFF</code> close <code>HOLD</code> toggle_close Tasmota <pre><code>example_app:\n  module: controllerx\n  class: TasmotaSwitchCoverController\n  integration:\n    name: tasmota\n    component: MyComponent\n  controller: stat/tasmota_device/RESULT\n  cover: cover.my_entity_id\n</code></pre>"},{"location":"controllers/TerncyPP01/","title":"TerncyPP01","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TerncyPP01LightController</code> </li> </ul> <ul> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/TerncyPP01/#light","title":"Light","text":"<p>Class: <code>TerncyPP01LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> ZHA Predefined actions <code>button_single</code> toggle <code>button_double</code> on_full_brightness <code>button_triple</code> on_min_brightness <code>button_quadruple</code> set_half_brightness <code>button_quintuple</code> set_half_color_temp ZHA <pre><code>example_app:\n  module: controllerx\n  class: TerncyPP01LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TerncySD01/","title":"TerncySD01","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TerncySD01LightController</code> </li> <li> Media Player \u2014 <code>TerncySD01MediaPlayerController</code> </li> </ul> <ul> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/TerncySD01/#light","title":"Light","text":"<p>Class: <code>TerncySD01LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> ZHA Predefined actions <code>button_single</code> toggle <code>button_double</code> on_full_brightness <code>button_triple</code> on_min_brightness <code>button_quadruple</code> set_half_brightness <code>button_quintuple</code> set_half_color_temp <code>rotate_left</code> click_brightness_down <code>rotate_right</code> click_brightness_up ZHA <pre><code>example_app:\n  module: controllerx\n  class: TerncySD01LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TerncySD01/#media-player","title":"Media Player","text":"<p>Class: <code>TerncySD01MediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> ZHA Predefined actions <code>button_single</code> play_pause <code>button_double</code> mute <code>button_triple</code> next_track <code>button_quadruple</code> previous_track <code>button_quintuple</code> next_source <code>rotate_left</code> click_volume_down <code>rotate_right</code> click_volume_up ZHA <pre><code>example_app:\n  module: controllerx\n  class: TerncySD01MediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/TuYaERS10TZBVKAA/","title":"TuYaERS10TZBVKAA","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>TuYaERS10TZBVKAALightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>TuYaERS10TZBVKAAZ2MLightController</code> </li> <li> Media Player \u2014 <code>TuYaERS10TZBVKAAMediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/TuYaERS10TZBVKAA/#light","title":"Light","text":"<p>Class: <code>TuYaERS10TZBVKAALightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>brightness_step_up</code>, <code>rotate_right</code> click_brightness_up <code>brightness_step_down</code>, <code>rotate_left</code> click_brightness_down <code>toggle</code>, <code>single</code> <code>toggle</code> toggle <code>hue_move</code> hold_brightness_toggle <code>hue_stop</code> release <code>color_temperature_step_up</code> click_color_up <code>color_temperature_step_down</code> click_color_down <code>double</code> on_full_brightness <code>hold</code> on_min_brightness <code>step_brightness</code> brightness_from_controller_step <code>step_color_temp</code> colortemp_from_controller_step Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: TuYaERS10TZBVKAALightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TuYaERS10TZBVKAALightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TuYaERS10TZBVKAALightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/TuYaERS10TZBVKAA/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>TuYaERS10TZBVKAAZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>brightness_step_up</code>, <code>rotate_right</code> click_brightness_up <code>brightness_step_down</code>, <code>rotate_left</code> click_brightness_down <code>toggle</code>, <code>single</code> toggle <code>hue_move</code> hold_brightness_toggle <code>hue_stop</code> release <code>color_temperature_step_up</code> click_colortemp_up <code>color_temperature_step_down</code> click_colortemp_down <code>double</code> on_full_brightness <code>hold</code> on_min_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: TuYaERS10TZBVKAAZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TuYaERS10TZBVKAAZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/TuYaERS10TZBVKAA/#media-player","title":"Media Player","text":"<p>Class: <code>TuYaERS10TZBVKAAMediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>brightness_step_up</code>, <code>rotate_right</code> click_volume_up <code>brightness_step_down</code>, <code>rotate_left</code> click_volume_down <code>toggle</code>, <code>single</code> play_pause <code>hue_move</code> hold_volume_up <code>hue_stop</code> release <code>color_temperature_step_up</code>, <code>double</code> next_track <code>color_temperature_step_down</code>, <code>hold</code> previous_track Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: TuYaERS10TZBVKAAMediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: TuYaERS10TZBVKAAMediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/WXCJKG11LM/","title":"WXCJKG11LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXCJKG11LMLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXCJKG11LMZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> </ul>"},{"location":"controllers/WXCJKG11LM/#light","title":"Light","text":"<p>Class: <code>WXCJKG11LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ Predefined actions <code>button_1_single</code> <code>1002</code> off <code>button_1_double</code> on_min_brightness <code>button_1_hold</code> <code>1001</code> hold_brightness_down <code>button_1_release</code>, <code>button_2_release</code> <code>1003</code>, <code>2003</code> release <code>button_2_single</code> <code>2002</code> on <code>button_2_double</code> on_full_brightness <code>button_2_hold</code> <code>2001</code> hold_brightness_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZ <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG11LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG11LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG11LMLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXCJKG11LM/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXCJKG11LMZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>button_1_single</code> off <code>button_1_double</code> on_min_brightness <code>button_1_hold</code> hold_brightness_down <code>button_1_release</code>, <code>button_2_release</code> release <code>button_2_single</code> on <code>button_2_double</code> on_full_brightness <code>button_2_hold</code> hold_brightness_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG11LMZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG11LMZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXCJKG12LM/","title":"WXCJKG12LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXCJKG12LMLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXCJKG12LMZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/WXCJKG12LM/#light","title":"Light","text":"<p>Class: <code>WXCJKG12LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT ZHA Predefined actions <code>button_1_single</code> <code>1_single</code> off <code>button_1_double</code> <code>1_double</code> on_min_color_temp <code>button_1_triple</code>, <code>button_2_triple</code>, <code>button_3_triple</code>, <code>button_4_triple</code> <code>1_triple</code>, <code>2_triple</code>, <code>3_triple</code>, <code>4_triple</code> <code>No action</code> <code>button_1_hold</code> <code>1_long press</code> hold_color_down <code>button_1_release</code>, <code>button_2_release</code>, <code>button_3_release</code>, <code>button_4_release</code> <code>1_release</code>, <code>2_release</code>, <code>3_release</code>, <code>4_release</code> release <code>button_2_single</code> <code>2_single</code> on <code>button_2_double</code> <code>2_double</code> on_full_color_temp <code>button_2_hold</code> <code>2_long press</code> hold_color_up <code>button_3_single</code> <code>3_single</code> click_brightness_down <code>button_3_double</code> <code>3_double</code> on_min_brightness <code>button_3_hold</code> <code>3_long press</code> hold_brightness_down <code>button_4_single</code> <code>4_single</code> click_brightness_up <code>button_4_double</code> <code>4_double</code> on_full_brightness <code>button_4_hold</code> <code>4_long press</code> hold_brightness_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)ZHA <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG12LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG12LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG12LMLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXCJKG12LM/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXCJKG12LMZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>button_1_single</code> off <code>button_1_double</code> on_min_color_temp <code>button_1_triple</code>, <code>button_2_triple</code>, <code>button_3_triple</code>, <code>button_4_triple</code> <code>No action</code> <code>button_1_hold</code> hold_colortemp_down <code>button_1_release</code>, <code>button_2_release</code>, <code>button_3_release</code>, <code>button_4_release</code> release <code>button_2_single</code> on <code>button_2_double</code> on_full_color_temp <code>button_2_hold</code> hold_colortemp_up <code>button_3_single</code> click_brightness_down <code>button_3_double</code> on_min_brightness <code>button_3_hold</code> hold_brightness_down <code>button_4_single</code> click_brightness_up <code>button_4_double</code> on_full_brightness <code>button_4_hold</code> hold_brightness_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG12LMZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG12LMZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXCJKG13LM/","title":"WXCJKG13LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXCJKG13LMLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXCJKG13LMZ2MLightController</code> </li> <li> Media Player \u2014 <code>WXCJKG13LMMediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/WXCJKG13LM/#light","title":"Light","text":"<p>Class: <code>WXCJKG13LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>button_1_single</code> <code>1002</code> <code>1_single</code> off <code>button_1_double</code>, <code>button_2_double</code> <code>1004</code>, <code>2004</code> <code>1_double</code>, <code>2_double</code> sync <code>button_1_triple</code>, <code>button_1_hold</code>, <code>button_1_release</code>, <code>button_2_triple</code>, <code>button_2_hold</code>, <code>button_2_release</code>, <code>button_3_triple</code>, <code>button_4_triple</code>, <code>button_5_triple</code>, <code>button_6_triple</code> <code>1005</code>, <code>1001</code>, <code>1003</code>, <code>2005</code>, <code>2001</code>, <code>2003</code>, <code>3005</code>, <code>4005</code>, <code>5005</code>, <code>6005</code> <code>1_triple</code>, <code>1_long</code>, <code>1_release</code>, <code>2_triple</code>, <code>2_long</code>, <code>2_release</code>, <code>3_triple</code>, <code>4_triple</code>, <code>5_triple</code>, <code>6_triple</code> <code>No action</code> <code>button_2_single</code> <code>2002</code> <code>2_single</code> on <code>button_3_single</code> <code>3002</code> <code>3_single</code> click_brightness_down <code>button_3_double</code> <code>3004</code> <code>3_double</code> on_min_brightness <code>button_3_hold</code> <code>3001</code> <code>3_long</code> hold_brightness_down <code>button_3_release</code>, <code>button_4_release</code>, <code>button_5_release</code>, <code>button_6_release</code> <code>3003</code>, <code>4003</code>, <code>5003</code>, <code>6003</code> <code>3_release</code>, <code>4_release</code>, <code>5_release</code>, <code>6_release</code> release <code>button_4_single</code> <code>4002</code> <code>4_single</code> click_brightness_up <code>button_4_double</code> <code>4004</code> <code>4_double</code> on_full_brightness <code>button_4_hold</code> <code>4001</code> <code>4_long</code> hold_brightness_up <code>button_5_single</code> <code>5002</code> <code>5_single</code> click_color_down <code>button_5_double</code> <code>5004</code> <code>5_double</code> on_min_color_temp <code>button_5_hold</code> <code>5001</code> <code>5_long</code> hold_color_down <code>button_6_single</code> <code>6002</code> <code>6_single</code> click_color_up <code>button_6_double</code> <code>6004</code> <code>6_double</code> on_full_color_temp <code>button_6_hold</code> <code>6001</code> <code>6_long</code> hold_color_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXCJKG13LM/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXCJKG13LMZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>button_1_single</code> off <code>button_1_double</code>, <code>button_2_double</code>, <code>button_4_double</code> on_full_brightness <code>button_1_triple</code>, <code>button_1_hold</code>, <code>button_1_release</code>, <code>button_2_triple</code>, <code>button_2_hold</code>, <code>button_2_release</code>, <code>button_3_triple</code>, <code>button_4_triple</code>, <code>button_5_triple</code>, <code>button_6_triple</code> <code>No action</code> <code>button_2_single</code> on <code>button_3_single</code> click_brightness_down <code>button_3_double</code> on_min_brightness <code>button_3_hold</code> hold_brightness_down <code>button_3_release</code>, <code>button_4_release</code>, <code>button_5_release</code>, <code>button_6_release</code> release <code>button_4_single</code> click_brightness_up <code>button_4_hold</code> hold_brightness_up <code>button_5_single</code> click_colortemp_down <code>button_5_double</code> on_min_color_temp <code>button_5_hold</code> hold_colortemp_down <code>button_6_single</code> click_colortemp_up <code>button_6_double</code> on_full_color_temp <code>button_6_hold</code> hold_colortemp_up Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXCJKG13LM/#media-player","title":"Media Player","text":"<p>Class: <code>WXCJKG13LMMediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>button_1_single</code> <code>1002</code> <code>1_single</code> click_volume_down <code>button_1_double</code> <code>1004</code> <code>1_double</code> mute <code>button_1_triple</code>, <code>button_2_triple</code>, <code>button_3_double</code>, <code>button_3_triple</code>, <code>button_3_hold</code>, <code>button_3_release</code>, <code>button_4_double</code>, <code>button_4_triple</code>, <code>button_4_hold</code>, <code>button_4_release</code>, <code>button_5_double</code>, <code>button_5_triple</code>, <code>button_5_hold</code>, <code>button_5_release</code>, <code>button_6_double</code>, <code>button_6_triple</code>, <code>button_6_hold</code>, <code>button_6_release</code> <code>1005</code>, <code>2005</code>, <code>3001</code>, <code>3003</code>, <code>3004</code>, <code>3005</code>, <code>4001</code>, <code>4003</code>, <code>4004</code>, <code>4005</code>, <code>5001</code>, <code>5003</code>, <code>5004</code>, <code>5005</code>, <code>6001</code>, <code>6003</code>, <code>6004</code>, <code>6005</code> <code>1_triple</code>, <code>2_triple</code>, <code>3_double</code>, <code>3_triple</code>, <code>3_long</code>, <code>3_release</code>, <code>4_double</code>, <code>4_triple</code>, <code>4_long</code>, <code>4_release</code>, <code>5_double</code>, <code>5_triple</code>, <code>5_long</code>, <code>6_double</code>, <code>6_triple</code>, <code>6_long</code>, <code>6_release</code> <code>No action</code> <code>button_1_hold</code> <code>1001</code> <code>1_long</code> hold_volume_down <code>button_1_release</code>, <code>button_2_release</code> <code>1003</code>, <code>2003</code> <code>1_release</code>, <code>2_release</code>, <code>5_release</code> release <code>button_2_single</code> <code>2002</code> <code>2_single</code> click_volume_up <code>button_2_double</code> <code>2004</code> <code>2_double</code> play_pause <code>button_2_hold</code> <code>2001</code> <code>2_long</code> hold_volume_up <code>button_3_single</code> <code>3002</code> <code>3_single</code> previous_track <code>button_4_single</code> <code>4002</code> <code>4_single</code> next_track <code>button_5_single</code> <code>5002</code> <code>5_single</code> previous_source <code>button_6_single</code> <code>6002</code> <code>6_single</code> next_source Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMMediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMMediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMMediaPlayerController\n  integration: deconz\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXCJKG13LMMediaPlayerController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG01LM/","title":"WXKG01LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXKG01LMLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXKG01LMZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/WXKG01LM/#notes","title":"Notes","text":"<p>The ZHA implementation of this button does not yet support hold and release actions.</p>"},{"location":"controllers/WXKG01LM/#light","title":"Light","text":"<p>Class: <code>WXKG01LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>single</code> <code>1002</code> <code>single</code> toggle <code>double</code> <code>1004</code> <code>double</code> on_full_brightness <code>triple</code> <code>1005</code> <code>triple</code> on_min_brightness <code>quadruple</code> <code>1006</code> <code>quadruple</code> set_half_brightness <code>many</code> <code>1010</code> <code>No action</code> <code>hold</code> <code>1001</code> hold_brightness_toggle <code>release</code> <code>1003</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXKG01LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG01LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG01LMLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG01LMLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG01LM/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXKG01LMZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single</code> toggle <code>double</code> on_full_brightness <code>triple</code> on_min_brightness <code>quadruple</code> set_half_brightness <code>many</code> <code>No action</code> <code>hold</code> hold_brightness_toggle <code>release</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXKG01LMZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG01LMZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXKG02LM/","title":"WXKG02LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXKG02LMLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXKG02LMZ2MLightController</code> </li> <li> Switch \u2014 <code>WXKG02LMSwitchController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/WXKG02LM/#notes","title":"Notes","text":"<p>Note that all actions related to both, left and right, do the same. This is because ControllerX is design to control just one entity (light or media player). So you can include the <code>actions</code> parameter to include the actions needed. You can check here for reference. Also, this controller support hold action, but not release. This means that there is not smooth brightness changes when holding, just step by step everytime is held.</p>"},{"location":"controllers/WXKG02LM/#light","title":"Light","text":"<p>Class: <code>WXKG02LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> <code>1002</code>, <code>2002</code>, <code>3002</code> <code>both_single</code>, <code>left_single</code>, <code>right_single</code> toggle <code>double_both</code>, <code>double_left</code>, <code>double_right</code> <code>1004</code>, <code>2004</code>, <code>3004</code> <code>both_double</code>, <code>left_double</code>, <code>right_double</code> click_brightness_up <code>hold_both</code>, <code>hold_left</code>, <code>hold_right</code> <code>1001</code>, <code>2001</code>, <code>3001</code> <code>both_long press</code>, <code>left_long press</code>, <code>right_long press</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG02LM/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXKG02LMZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> toggle <code>double_both</code>, <code>double_left</code>, <code>double_right</code> click_brightness_up <code>hold_both</code>, <code>hold_left</code>, <code>hold_right</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXKG02LM/#switch","title":"Switch","text":"<p>Class: <code>WXKG02LMSwitchController</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> <code>1002</code>, <code>2002</code>, <code>3002</code> <code>both_single</code>, <code>left_single</code>, <code>right_single</code> toggle Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMSwitchController\n  integration: z2m\n  controller: sensor.my_controller_action\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMSwitchController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMSwitchController\n  integration: deconz\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG02LMSwitchController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG06LM/","title":"WXKG06LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXKG06LMLightController</code> </li> <li> Switch \u2014 <code>WXKG06LMSwitchController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> </ul>"},{"location":"controllers/WXKG06LM/#notes","title":"Notes","text":"<p>This controller support hold action, but not release. This means that there is not smooth brightness changes when holding, just step by step everytime is held.</p>"},{"location":"controllers/WXKG06LM/#light","title":"Light","text":"<p>Class: <code>WXKG06LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ Predefined actions <code>single</code> <code>1002</code> toggle <code>double</code>, <code>hold</code> <code>1004</code> click_brightness_up <code>1001</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZ <pre><code>example_app:\n  module: controllerx\n  class: WXKG06LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG06LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG06LMLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG06LM/#switch","title":"Switch","text":"<p>Class: <code>WXKG06LMSwitchController</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ Predefined actions <code>single</code> <code>1002</code> toggle Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZ <pre><code>example_app:\n  module: controllerx\n  class: WXKG06LMSwitchController\n  integration: z2m\n  controller: sensor.my_controller_action\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG06LMSwitchController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG06LMSwitchController\n  integration: deconz\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG07LM/","title":"WXKG07LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXKG07LMLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXKG07LMZ2MLightController</code> </li> <li> Switch \u2014 <code>WXKG07LMSwitchController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/WXKG07LM/#notes","title":"Notes","text":"<p>Note that all actions related to both, left and right, do the same. This is because ControllerX is design to control just one entity (light or media player). So you can include the <code>actions</code> parameter to include the actions needed. You can check here for reference. Also, this controller support hold action, but not release. This means that there is not smooth brightness changes when holding, just step by step everytime is held.</p>"},{"location":"controllers/WXKG07LM/#light","title":"Light","text":"<p>Class: <code>WXKG07LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> <code>1002</code>, <code>2002</code>, <code>3002</code> <code>both_single</code>, <code>left_single</code>, <code>right_single</code> toggle <code>double_both</code>, <code>double_left</code>, <code>double_right</code> <code>1004</code>, <code>2004</code>, <code>3004</code> <code>both_double</code>, <code>left_double</code>, <code>right_double</code> click_brightness_up <code>hold_both</code>, <code>hold_left</code>, <code>hold_right</code> <code>1001</code>, <code>2001</code>, <code>3001</code> <code>both_long press</code>, <code>left_long press</code>, <code>right_long press</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG07LM/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXKG07LMZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> toggle <code>double_both</code>, <code>double_left</code>, <code>double_right</code> click_brightness_up <code>hold_both</code>, <code>hold_left</code>, <code>hold_right</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXKG07LM/#switch","title":"Switch","text":"<p>Class: <code>WXKG07LMSwitchController</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> <code>1002</code>, <code>2002</code>, <code>3002</code> <code>both_single</code>, <code>left_single</code>, <code>right_single</code> toggle Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMSwitchController\n  integration: z2m\n  controller: sensor.my_controller_action\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMSwitchController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMSwitchController\n  integration: deconz\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG07LMSwitchController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG11LMRemote/","title":"WXKG11LMRemote","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXKG11LMRemoteLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXKG11LMRemoteZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/WXKG11LMRemote/#light","title":"Light","text":"<p>Class: <code>WXKG11LMRemoteLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ ZHA Predefined actions <code>single</code> <code>1002</code> <code>single</code> toggle <code>double</code> <code>1004</code> <code>double</code> on_full_brightness <code>hold</code> <code>1001</code> <code>hold</code> hold_brightness_toggle <code>release</code> <code>1003</code> <code>release</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXKG11LMRemoteLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG11LMRemoteLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG11LMRemoteLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG11LMRemoteLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG11LMRemote/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXKG11LMRemoteZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single</code> toggle <code>double</code> on_full_brightness <code>hold</code> hold_brightness_toggle <code>release</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXKG11LMRemoteZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG11LMRemoteZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXKG11LMSensorSwitch/","title":"WXKG11LMSensorSwitch","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXKG11LMSensorSwitchLightController</code> </li> </ul> <ul> <li>           deCONZ (deconz)         </li> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/WXKG11LMSensorSwitch/#light","title":"Light","text":"<p>Class: <code>WXKG11LMSensorSwitchLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> deCONZ ZHA Predefined actions <code>1002</code> <code>single</code> toggle <code>1004</code> <code>double</code> on_full_brightness <code>1005</code> <code>triple</code> on_min_brightness <code>1006</code> <code>quadruple</code> set_half_brightness deCONZZHA <pre><code>example_app:\n  module: controllerx\n  class: WXKG11LMSensorSwitchLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG11LMSensorSwitchLightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG12LM/","title":"WXKG12LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXKG12LMLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXKG12LMZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> </ul>"},{"location":"controllers/WXKG12LM/#light","title":"Light","text":"<p>Class: <code>WXKG12LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ Predefined actions <code>single</code> <code>1002</code> toggle <code>double</code> <code>1004</code> on_full_brightness <code>shake</code> <code>1007</code> on_min_brightness <code>hold</code> <code>1001</code> hold_brightness_toggle <code>release</code> <code>1003</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZ <pre><code>example_app:\n  module: controllerx\n  class: WXKG12LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG12LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG12LMLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG12LM/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXKG12LMZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single</code> toggle <code>double</code> on_full_brightness <code>shake</code> on_min_brightness <code>hold</code> hold_brightness_toggle <code>release</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXKG12LMZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG12LMZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXKG15LM/","title":"WXKG15LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>WXKG15LMLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>WXKG15LMZ2MLightController</code> </li> <li> Switch \u2014 <code>WXKG15LMSwitchController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/WXKG15LM/#light","title":"Light","text":"<p>Class: <code>WXKG15LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> toggle <code>double_both</code>, <code>double_left</code>, <code>double_right</code> click_brightness_up <code>triple_both</code>, <code>triple_left</code>, <code>triple_right</code> click_brightness_down <code>hold_both</code>, <code>hold_left</code>, <code>hold_right</code> on_full_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXKG15LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG15LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/WXKG15LM/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>WXKG15LMZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> toggle <code>double_both</code>, <code>double_left</code>, <code>double_right</code> click_brightness_up <code>triple_both</code>, <code>triple_left</code>, <code>triple_right</code> click_brightness_down <code>hold_both</code>, <code>hold_left</code>, <code>hold_right</code> on_full_brightness Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXKG15LMZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG15LMZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/WXKG15LM/#switch","title":"Switch","text":"<p>Class: <code>WXKG15LMSwitchController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single_both</code>, <code>single_left</code>, <code>single_right</code> toggle Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: WXKG15LMSwitchController\n  integration: z2m\n  controller: sensor.my_controller_action\n  switch: switch.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: WXKG15LMSwitchController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  switch: switch.my_entity_id\n</code></pre>"},{"location":"controllers/Z31BRL/","title":"Z31BRL","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>Z31BRLLightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>Z31BRLZ2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> <li>           deCONZ (deconz)         </li> </ul>"},{"location":"controllers/Z31BRL/#light","title":"Light","text":"<p>Class: <code>Z31BRLLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT deCONZ Predefined actions <code>brightness_move_to_level</code> brightness_from_controller_level <code>1002</code> toggle <code>2002</code> click_brightness_up <code>3002</code> click_brightness_down Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt)deCONZ <pre><code>example_app:\n  module: controllerx\n  class: Z31BRLLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Z31BRLLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Z31BRLLightController\n  integration: deconz\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/Z31BRL/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>Z31BRLZ2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>brightness_move_to_level</code> brightness_from_controller_level Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: Z31BRLZ2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: Z31BRLZ2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/ZB3009/","title":"ZB3009","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ZB3009LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>ZB3009Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/ZB3009/#light","title":"Light","text":"<p>Class: <code>ZB3009LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code>, <code>\"off\"</code> toggle <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release <code>color_temperature_move_down</code> click_colortemp_down <code>color_temperature_move_up</code> click_colortemp_up <code>color_temperature_move</code> colortemp_from_controller <code>color_move</code> xycolor_from_controller <code>hue_move</code>, <code>recall_1</code>, <code>recall_3</code>, <code>recall_2</code> <code>No action</code> Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZB3009LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZB3009LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ZB3009/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>ZB3009Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code>, <code>\"off\"</code> toggle <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release <code>color_temperature_move_down</code> click_colortemp_down <code>color_temperature_move_up</code> click_colortemp_up <code>color_temperature_move</code> colortemp_from_controller <code>color_move</code> xycolor_from_controller <code>hue_move</code>, <code>recall_1</code>, <code>recall_3</code>, <code>recall_2</code> <code>No action</code> Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZB3009Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZB3009Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/ZB5121/","title":"ZB5121","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ZB5121LightController</code> </li> </ul> <ul> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/ZB5121/#light","title":"Light","text":"<p>Class: <code>ZB5121LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> ZHA Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>step_with_on_off_0_32_0</code> click_brightness_up <code>move_with_on_off_0_50</code> hold_brightness_up <code>step_with_on_off_1_32_0</code> click_brightness_down <code>move_with_on_off_1_50</code> hold_brightness_down <code>recall_0_1</code> <code>No action</code> <code>stop</code> release ZHA <pre><code>example_app:\n  module: controllerx\n  class: ZB5121LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ZB5122/","title":"ZB5122","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ZB5122LightController</code> </li> </ul> <ul> <li>           ZHA (zha)         </li> </ul>"},{"location":"controllers/ZB5122/#light","title":"Light","text":"<p>Class: <code>ZB5122LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> ZHA Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>hold_brightness_up</code> hold_brightness_up <code>hold_brightness_down</code> hold_brightness_down <code>stop</code>, <code>stop_move_hue</code>, <code>stop_move_step</code> release <code>move_to_color</code> click_xycolor_up <code>move_hue</code> hold_xycolor_up <code>move_to_color_temp</code> colortemp_from_controller <code>move_color_temp</code> hold_colortemp_toggle <code>recall_0_1</code> <code>No action</code> ZHA <pre><code>example_app:\n  module: controllerx\n  class: ZB5122LightController\n  integration: zha\n  controller: 00:11:22:33:44:55:66:77:88\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ZNXNKG02LM/","title":"ZNXNKG02LM","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ZNXNKG02LMLightController</code> </li> <li> Media Player \u2014 <code>ZNXNKG02LMMediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/ZNXNKG02LM/#light","title":"Light","text":"<p>Class: <code>ZNXNKG02LMLightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single</code> toggle <code>double</code> on_full_brightness <code>hold</code> hold_color_toggle <code>release</code>, <code>stop_rotating</code> release <code>start_rotating</code> brightness_from_controller_angle Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZNXNKG02LMLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZNXNKG02LMLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ZNXNKG02LM/#media-player","title":"Media Player","text":"<p>Class: <code>ZNXNKG02LMMediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>single</code> play_pause <code>double</code> next_track <code>hold</code> previous_track <code>release</code>, <code>stop_rotating</code> release <code>start_rotating</code> volume_from_controller_angle Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZNXNKG02LMMediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZNXNKG02LMMediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"controllers/ZS23000278/","title":"ZS23000278","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ZS23000278LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>ZS23000278Z2MLightController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/ZS23000278/#light","title":"Light","text":"<p>Class: <code>ZS23000278LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>brightness_step_up</code> click_brightness_up <code>brightness_step_down</code> click_brightness_down <code>brightness_move_to_level</code> brightness_from_controller_level <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release <code>color_temperature_move</code> colortemp_from_controller <code>color_temperature_move_up</code> click_colortemp_up <code>color_temperature_move_down</code> click_colortemp_down <code>color_move</code> xycolor_from_controller Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZS23000278LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZS23000278LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ZS23000278/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>ZS23000278Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>\"off\"</code> off <code>brightness_step_up</code> click_brightness_up <code>brightness_step_down</code> click_brightness_down <code>brightness_move_to_level</code> brightness_from_controller_level <code>brightness_move_up</code> hold_brightness_up <code>brightness_move_down</code> hold_brightness_down <code>brightness_stop</code> release <code>color_temperature_move</code> colortemp_from_controller <code>color_temperature_move_up</code> click_colortemp_up <code>color_temperature_move_down</code> click_colortemp_down <code>color_move</code> xycolor_from_controller Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZS23000278Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZS23000278Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/ZYCT202/","title":"ZYCT202","text":"Picture Controller types Integrations <ul> <li> Light \u2014 <code>ZYCT202LightController</code> </li> <li> Zigbee2MQTT Light \u2014 <code>ZYCT202Z2MLightController</code> </li> <li> Media Player \u2014 <code>ZYCT202MediaPlayerController</code> </li> </ul> <ul> <li>           Zigbee2MQTT (z2m)         </li> </ul>"},{"location":"controllers/ZYCT202/#light","title":"Light","text":"<p>Class: <code>ZYCT202LightController</code></p> <p>Default delay: <code>350ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>up-press</code> hold_brightness_up <code>down-press</code> hold_brightness_down <code>\"off\"</code> off <code>stop</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZYCT202LightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: light.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZYCT202LightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: light.my_entity_id\n</code></pre>"},{"location":"controllers/ZYCT202/#zigbee2mqtt-light","title":"Zigbee2MQTT Light","text":"<p>Class: <code>ZYCT202Z2MLightController</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code> on <code>up-press</code> hold_brightness_up <code>down-press</code> hold_brightness_down <code>\"off\"</code> off <code>stop</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZYCT202Z2MLightController\n  integration: z2m\n  controller: sensor.my_controller_action\n  light: my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZYCT202Z2MLightController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  light: my_entity_id\n</code></pre>"},{"location":"controllers/ZYCT202/#media-player","title":"Media Player","text":"<p>Class: <code>ZYCT202MediaPlayerController</code></p> <p>Default delay: <code>500ms</code></p> <p>Default mapping:</p> Zigbee2MQTT Predefined actions <code>\"on\"</code>, <code>\"off\"</code> play_pause <code>up-press</code> hold_volume_up <code>down-press</code> hold_volume_down <code>stop</code> release Zigbee2MQTT (HA entity)Zigbee2MQTT (mqtt) <pre><code>example_app:\n  module: controllerx\n  class: ZYCT202MediaPlayerController\n  integration: z2m\n  controller: sensor.my_controller_action\n  media_player: media_player.my_entity_id\n</code></pre> <pre><code>example_app:\n  module: controllerx\n  class: ZYCT202MediaPlayerController\n  integration:\n    name: z2m\n    listen_to: mqtt\n  controller: my_controller\n  media_player: media_player.my_entity_id\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>The purpose of this page is to show some real examples for the configuration. These are configurations placed in <code>/homeassistant/appdaemon/apps/apps.yaml</code></p>"},{"location":"examples/#basic","title":"Basic","text":"<p>E1524/E1810 controller with z2m event entities that controls all the livingroom lights.</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Controller\n  controller: livingroom_controller_action\n  integration:\n    name: z2m\n    listen_to: event\n  light: group.livingroom_lights\n</code></pre> <p>E1524/E1810 controller integrated with Zigbee2MQTT, but using <code>mqtt</code> directly instead of the <code>z2m</code> integration.</p> <pre><code>office_light:\n  module: controllerx\n  class: E1810Controller\n  controller: office_controller # This is the Z2M friendly name of the device\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.office\n</code></pre> <p>Controlling a media player with E1744 with deCONZ:</p> <pre><code>bedroom_speaker:\n  module: controllerx\n  class: E1744MediaPlayerController\n  controller: symfonisk_controller\n  integration: deconz\n  media_player: media_player.bedroom_speaker\n</code></pre> <p>Controlling a light (just on/off) with E1743 with ZHA:</p> <pre><code>bedroom_light:\n  module: controllerx\n  class: E1743Controller\n  controller: 00:67:88:56:06:78:9b:3f\n  integration: zha\n  light: light.simple_light\n  actions:\n    - \"on\"\n    - \"off\"\n</code></pre> <p>Controlling two lights with Aqara double key wireless switch (z2m):</p> <pre><code>controller_left_switch:\n  module: controllerx\n  class: DoubleKeyWirelessAqaraController\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.light1\n  manual_steps: 7\n  actions:\n    - left\n    - left_double\n    - left_long\n\ncontroller_right_switch:\n  module: controllerx\n  class: DoubleKeyWirelessAqaraController\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.light2\n  manual_steps: 7\n  actions:\n    - right\n    - right_double\n    - right_long\n</code></pre> <p>Controlling just the color with E1810 and z2m because toggle and brightness is controlled with zigbee groups.</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  controller: controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.light1\n  actions:\n    - arrow_left_hold\n    - arrow_left_release\n    - arrow_right_hold\n    - arrow_right_release\n    - arrow_right_click\n    - arrow_left_click\n</code></pre> <p>Controlling a simple light with Lutron Caseta Pro Pico, but giving the light a slower transition of 800ms:</p> <pre><code>example_app:\n  module: controllerx\n  class: LutronCasetaProPicoLightController\n  integration: state\n  controller: sensor.controller_action\n  light: light.example_light\n  transition: 800\n</code></pre> <p>Hue Bridge HA integration for the lights and z2m for E1810 IKEA controller.</p> <pre><code>hallway_light_group_no_toggle:\n  # all actions, but toggle/hold for smooth operation with light groups on Hue Bridge\n  # use HA groups to control dimming and color/color temp change\n  # use Hue bridge light group for even and syncronized on/off function\n  module: controllerx\n  class: E1810Controller\n  controller: \"x90fd9ffffe17d796\"\n  integration:\n    name: z2m\n    listen_to: mqtt\n  # transition: 1000 # transition attribute works on Hue bridge\n  smooth_power_on: true\n  light: group.hallway # HA group. ControllerX syncs values from first group entity with remaining entities in group\n  actions:\n    - arrow_left_hold\n    - arrow_left_release\n    - arrow_right_hold\n    - arrow_right_release\n    - arrow_right_click\n    - arrow_left_click\n    - brightness_up_click\n    - brightness_down_click\n    - brightness_up_release\n    - brightness_down_release\n    - brightness_up_hold\n    - brightness_down_hold\n\nhallway_light_group_toggle:\n  # toggle/hold for smooth operation with light groups on Hue Bridge\n  # use Hue bridge light group for even and syncronized on/off function\n  module: controllerx\n  class: E1810Controller\n  controller: \"x90fd9ffffe17d796\"\n  integration:\n    name: z2m\n    listen_to: mqtt\n  # transition: 1000 # transition attribute works on Hue bridge\n  light: light.hallway # Hue light group. On/off completely in sync, as zigbee group commands are used by Hue bridge\n  actions:\n    - toggle\n    - toggle_hold\n</code></pre> <p>Regular use of E1743 controller for a light, but delaying the <code>off</code> action for 10 seconds. The use case could be for when we have a switch at the beginning of the corridor and we do not want the light to turn off until a certain period of time.</p> <pre><code>corridor_controller:\n  module: controllerx\n  class: E1743Controller\n  controller: corridor_controller\n  integration: deconz\n  light: light.corridor\n  action_delay:\n    2002: 10\n</code></pre> <p>Using a xy color light bulb as a color temperature one when it does support it.</p> <pre><code>office:\n  module: controllerx\n  class: E1810Controller\n  controller: office_controller # This is the Z2M friendly name of the device\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light:\n    name: light.office\n    color_mode: color_temp\n</code></pre> <p>Using a xy color light bulb as a color temperature one when it does NOT support it.</p> <pre><code>office:\n  module: controllerx\n  class: E1810Controller\n  controller: zigbee2mqtt/office_controller/action\n  integration: mqtt\n  light: light.office\n  color_wheel: color_temp_wheel\n</code></pre>"},{"location":"examples/#advanced","title":"Advanced","text":"<p>Controlling different lights with the same controller depending where you are.</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Controller\n  controller: controller_id\n  integration: deconz\n  light: light.light1\n  constrain_input_select: input_select.where_am_i,livingroom\n\ncontroller_bedroom:\n  module: controllerx\n  class: E1810Controller\n  controller: controller_id\n  integration: deconz\n  light: light.light2\n  constrain_input_select: input_select.where_am_i,bedroom\n\ncontroller_bathroom:\n  module: controllerx\n  class: E1810Controller\n  controller: controller_id\n  integration: deconz\n  light: light.light3\n  constrain_input_select: input_select.where_am_i,bathroom\n</code></pre> <p>Controlling different lights with the E1810 controller. Using brightness buttons for one light, arrows for another one and the center to turn off a group of lights.</p> <pre><code>light1_controller:\n  module: controllerx\n  class: LightController\n  controller: e1810_controller\n  integration: deconz\n  light: light.light1\n  mapping:\n    2002: \"on\"\n    3002: \"off\"\n    2001: hold_brightness_up\n    2003: release\n    3001: hold_brightness_down\n    3003: release\n\nlight2_controller:\n  module: controllerx\n  class: LightController\n  controller: e1810_controller\n  integration: deconz\n  light: light.light2\n  mapping:\n    4002: \"on\"\n    5002: \"off\"\n    4001: hold_brightness_down\n    4003: release\n    5001: hold_brightness_up\n    5003: release\n\nall_lights_controller:\n  module: controllerx\n  class: LightController\n  controller: e1810_controller\n  integration: deconz\n  light: group.all_lights\n  mapping:\n    1002: \"off\"\n</code></pre> <p>Extending the functionality of the smooth power onfor the E1810, so when clicked or hold each button when the light is off, it sets the light to its minimum or maximum brightness or color, depending on the button pressed. This assumes you have a light with support to color temperature.</p> <pre><code>livingroom_light_on:\n  module: controllerx\n  class: E1810Controller\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.livingroom\n  constrain_input_boolean: light.livingroom,on\n\nlivingroom_light_off:\n  module: controllerx\n  class: LightController\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.livingroom\n  mapping:\n    toggle: toggle\n    brightness_up_click: on_full_brightness\n    brightness_down_click: on_min_brightness\n    brightness_up_hold: on_full_brightness\n    brightness_down_hold: on_min_brightness\n    arrow_right_click: on_full_color_temp\n    arrow_left_click: on_min_color_temp\n    arrow_right_hold: on_full_color_temp\n    arrow_left_hold: on_min_color_temp\n  constrain_input_boolean: light.livingroom,off\n</code></pre> <p>Customising Aqara magic cube with deCONZ. The key values were extracted from the deCONZ section in here and the values were extracted from the predefined media player action list.</p> <pre><code>example_app:\n  module: controllerx\n  class: MediaPlayerController\n  controller: my_magic_cube_id\n  integration:\n    name: deconz\n    type: gesture\n  media_player: media_player.livingroom_speaker\n  mapping:\n    1: play_pause # Shake\n    8: click_volume_down # Rotate left\n    7: click_volume_up # Rotate right\n    3: next_track # Flip90\n    4: previous_track # Flip180\n</code></pre> <p>Customising Aqara magic cube with z2m. This makes use of the <code>mapping</code> attribute to turn on different HA scenes.</p> <pre><code>cube_bedroom:\n  module: controllerx\n  class: Controller\n  controller: cube_bedroom\n  integration:\n    name: z2m\n    listen_to: mqtt\n  mapping:\n    flip90:\n      service: scene.turn_on\n      data:\n        entity_id: scene.bedroom1\n    flip180:\n      service: scene.turn_on\n      data:\n        entity_id: scene.bedroom2\n    tap:\n      service: scene.turn_on\n      data:\n        entity_id: scene.bedroom3\n</code></pre> <p>Customising WXKG01LM de Aqara. We want to toggle the light and turn it on always to brightness 20 (min: 0, max: 255). For this we create one instance app configuration for the default behaviour of the controller, but excluding <code>single</code> which toggles the light. Then we create a custom controller with the <code>mapping</code> attribute to give a behaviour to the <code>single</code> action.</p> <pre><code>mando_aqara_salon:\n  module: controllerx\n  class: WXKG01LMLightController\n  controller: \"0x00158d00027b6d79\"\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.0x000d6ffffec2620d_light\n  merge_mapping:\n    single: # Give an action to the `single` event\n      service: light.toggle\n      data:\n        entity_id: light.0x000d6ffffec2620d_light\n        brightness: 20\n</code></pre> <p>Customising the E1810 to invert the click and hold actions and control a group of sonos devices. By default it skips track when pressing, whit this it skips source by pressing.</p> <pre><code>sonos_speaker:\n  module: controllerx\n  class: MediaPlayerController\n  controller: \"0x90fd9ffffe0cbd69\"\n  integration:\n    name: z2m\n    listen_to: mqtt\n  media_player: group.sonos_all\n  mapping:\n    toggle: play_pause\n    brightness_up_click: click_volume_up\n    brightness_down_click: click_volume_down\n    brightness_up_hold: hold_volume_up\n    brightness_down_hold: hold_volume_down\n    brightness_up_release: release\n    brightness_up_release: release\n    arrow_right_click: next_source\n    arrow_left_click: previous_source\n    arrow_right_hold: next_track\n    arrow_left_hold: previous_track\n</code></pre> <p>This next configuration shows the use of multiple click functionality, and <code>merge_mapping</code>. We want to use the E1810 for a light (<code>light.light1</code>) and toggle another light (<code>light.light2</code>) when clicking twice the toggle button. We could do this in one application configuration as you can see in the multiple click page, but we will do it separatelly to show that the first config needs to change the toggle for <code>toggle$1</code> to be detected as a multiple-clickable action, otherwise when the center button is clicked twice, it will also toggle <code>light.light1</code>.</p> <pre><code>example_app_1:\n  module: controllerx\n  class: E1810Controller\n  controller: my_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.light1\n  merge_mapping:\n    toggle$1: toggle\n\nexample_app_2:\n  module: controllerx\n  class: E1810Controller\n  controller: my_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.light2\n  mapping:\n    toggle$2: toggle\n</code></pre> <p>The following configuration is a tricky one, but at the same time it also shows the power of ControllerX to adapt to any use case. Imagine we want the following for our Symfonisk controller (E1744) with deCONZ:</p> <ul> <li>1 click: Toggle light on/off.</li> <li>2 click: Toggle between (pre-defined) Warm - and Cold-White.</li> <li>3 click: \"switch to alternate behavior\" - instead of the default dimming-behavior when turning left/right - change color-temperature by turning turning left makes light colder (more blueish) and right make it warmer (more reds).</li> <li>rotate left/right: This will depend on the state when clicking 3 times.</li> </ul> <p>Assuming you have created the following input_booleans in HA (<code>input_boolean.light_mode</code>, <code>input_boolean.light_colortemp_mode</code>) we can use the following configuration:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1744LightController\n  controller: symfonisk_controller\n  integration: deconz\n  light: light.livingroom_lamp\n  automatic_steps: 15\n  delay: 150\n  mapping:\n    2001: hold_brightness_up # Right turn\n    3001: hold_brightness_down # Left turn\n    2003: release # Stop right turn\n    3003: release # Stop left turn\n  constrain_input_boolean: input_boolean.light_mode,on\n\nexample_app2:\n  module: controllerx\n  class: E1744LightController\n  controller: symfonisk_controller\n  integration: deconz\n  light: light.livingroom_lamp\n  automatic_steps: 15\n  delay: 150\n  mapping:\n    2001: hold_color_up # Right turn\n    3001: hold_color_down # Left turn\n    2003: release # Stop right turn\n    3003: release # Stop left turn\n  constrain_input_boolean: input_boolean.light_mode,off\n\nexample_app3:\n  module: controllerx\n  class: E1744LightController\n  controller: symfonisk_controller\n  integration: deconz\n  light: light.livingroom_lamp\n  min_color_temp: 200\n  mapping:\n    1004: on_min_color_temp # 2 clicks\n  constrain_input_boolean: input_boolean.light_colortemp_mode,on\n\nexample_app4:\n  module: controllerx\n  class: E1744LightController\n  controller: symfonisk_controller\n  integration: deconz\n  light: light.livingroom_lamp\n  max_color_temp: 400\n  mapping:\n    1004: on_full_color_temp # 2 clicks\n  constrain_input_boolean: input_boolean.light_colortemp_mode,off\n\nexample_app5:\n  module: controllerx\n  class: E1744LightController\n  controller: symfonisk_controller\n  integration: deconz\n  light: light.livingroom_lamp\n  mapping:\n    1002: toggle # 1 clicks\n    1004: # 2 clicks\n      service: input_boolean.toggle\n      data:\n        entity_id: input_boolean.light_colortemp_mode\n    1005: # 3 clicks\n      service: input_boolean.toggle\n      data:\n        entity_id: input_boolean.light_mode\n</code></pre> <p>The following example shows the potential of templating render. Let's say we want to execute different predefined actions every time we click a button (E1810 in this case). First, we can create an input select through UI or YAML in HA:</p> <pre><code>input_select:\n  light_state:\n    options:\n      - on_min_brightness\n      - on_full_brightness\n      - set_half_brightness\n</code></pre> <p>Then we can define the following ControllerX config to change the option of the input_select and apply the predefined action that is selected:</p> <pre><code>example_app:\n  module: controllerx\n  class: E1810Controller\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light: light.my_light\n  mapping:\n    toggle:\n      - service: input_select.select_next\n        data:\n          entity_id: input_select.light_state\n      - action: \"{{ states('input_select.light_state') }}\"\n</code></pre>"},{"location":"examples/sonos-display/","title":"SONOS/SYMFONISK Display example","text":"<p>Using ControllerX - Controlling your Sonos speakers have never been easier \ud83d\ude0e But the occasional wish for a visual check on what\u2019s actually playing, volume setting, media artist/title, active speakers in group etc. is still there \ud83d\udc40 Leaving you with no other choice than adding a display integration as the obvious solution for this need \ud83d\ude09</p> <p>All it takes is an ESP8266 with ESPHome software, an appropriate display, a handfull (well actually 2 handfulls and then some) of HA sensors and you\u2019re all set to go \ud83d\ude80 ESPHome is a system framework for ESP8266 units that has support for several I2C OLED/E-ink display types and numerous sensors, has direct HA integration via add-on and easy, yet powerful YAML configuration. Read more about ESPHome and how to set it up in HA here: https://esphome.io/</p> <p>Current v1.1 display code uses newly merged display on/off and brightness commands. Use ESPHome version 1.15.0b4 or newer !</p> <p>YAML has been tested on both NodeMCUv2 , Wemos D1 Mini and NodeMCU with integrated display using both SSD1306 &amp; SSD1309 displays (I2C connected).</p>"},{"location":"examples/sonos-display/#hardware","title":"Hardware:","text":"<p>I initially used the simple and inexpensive (less than 2 US$ ) SSD1306 0,96\" OLED display for this build. Resolution is only 128x64. But still enough, when using several pages to be displayed continously. The SSD1306 has a 'big brother' in the SSD1309 display. This display has identical resolution as SSD1306, is priced at some 14 US$, can use same drivers/library as SSD1306 but is much, much larger at 2,42\". I really like this good sized and simple I2C display and ended up using this display in the final build, as it's much easier to read from a distance \ud83d\ude42</p> <p>An optional PIR sensor or microwave radar sensor can be added for automatic dimming (brightness control) and turning the display on/off completely. The RCWL 0516 sensor is cheap, but can be somewhat difficult to use in 'tight' builds as it's somewhat sensitive to many things - WiFi in particular. So you could experience some false triggers using this sensor if fitted very close to the ESP8266. AM 312 is a cheap and simple 'no nonsense' PIR sensor that just always works as expected. Sensor can also be used for other purposes as well in HA \ud83d\ude42 Sensor is configured in YAML using pin D5 (GPIO14). Display is set to dim down after 5 minutes with no PIR triggers and completely off after additional 10 minutes without registered movement.</p> <p>Please note that (at least on my display version) SSD1309 display can't be turned completely off with <code>id(display_id).set_brightness(0)</code> command, but this works perfectly on my SSD1306 display. Instead SSD1309 has to be turned on/off with specific <code>id(display_id).turn_on()</code>/<code>id(display_id).turn_off()</code> commands. Check what works on your display and revise implementation method/ESPHome yaml config code accordingly.</p> <p>I've collected some hardware link examples below. These are just some random sellers I've picked. Not necessarily the cheapest or best sellers.</p> <p>Wemos D1 mini \u2013 ESP8266</p> <p>0,96\" 12864 SSD1306 OLED display</p> <p>2,42\u201d 12864 SSD1309 OLED display(direct replacement for the much smaller 0,96\u201d SSD1306 display and can use same library)</p> <p>Alternatively you can use a Wemos NodeMCU ESP8266 with integrated 0,96\" OLED display</p> <p>Optional sensors to dim display when no movement is detected.</p> <p>Movement sensor 1: RCWL 0516 Microwave Micro Wave Radar Sensor Board</p> <p>Movement sensor 2: AM312 # PIR Motion Human Sensor</p> <p>One note on the SSD1309 display In order to get display to work with I2C instead of SPI, you need to do a bit of soldering. On the specific display type I bought, you need to bridge (short) R5 and move R4 to R3. Remember that display will NOT work unless RES is connected to RST on ESP8266 (or any available pin and controlled in ESPHome sw). Note: Display only supports 3,3v on VCC. Some have reported that display tolerates 5v (some might). I wouldn\u2019t take that risk, though! I\u2019ve kept both CS and DS \u2018floating\u2019. Haven\u2019t had any I2C address issues so far. Use pull-up/down resistors if you experience issues.</p> <p>Connections: SSD1306/1309 --&gt; Wemos D1 mini</p> <pre><code>VCC:    3,3v !!! (SSD1306 only: 3,3v-5v)\nGND:    GND\nSDA:    D1\nSCL:    D2\n</code></pre> <p>SSD1309 only --&gt; Wemos D1 mini</p> <pre><code>RES:    D0 or RST\nCS :    NC (No Connection - 'floating'. Default I2C address 0x3c)\nDC :    NC (No Connection - 'floating')\n</code></pre>"},{"location":"examples/sonos-display/#display-setup","title":"Display setup:","text":"<p>My current display setup consists of four pages that all are displayed for 5 seconds. Following information is displayed on the screen:</p> <p>All pages: Source (if not present, display \u2018Sonos/Playlist\u2019), mute sign, volume setting and play/pause/idle status. Also displays shuffle sign when active for playlists</p> <p>Page 1: Active main/passive speakers.</p> <p>Page 2: Media artist/media title (if not available from stream, display time instead)</p> <p>Page 3: Time</p> <p>Page 4: Outdoor temperature sensor value</p>"},{"location":"examples/sonos-display/#true-type-fonts","title":"True Type Fonts:","text":"<p>Three 'standard' Calibri TT fonts are used plus a 'special' version of Heydings Icons font in which I've included some Heydings Controls icons as well. If you experience some strange characters on the display, you probably need to edit the glyphs in ESPHome YAML and add whatever language specific characters you find are missing.</p> <p>Calibri TTF fonts link</p> <p>Heydings Icons special file link</p> <p>Copy Calibri Bold, Calibri Regular, Calibri Light fonts plus the special Heydings Icons Symbols font file to the ESPHome folder <code>/config/esphome/</code></p>"},{"location":"examples/sonos-display/#home-assistant-sensors","title":"Home Assistant sensors:","text":"<p>Below you\u2019ll find the HA template sensors needed in <code>configuration.yaml</code>for ESPHome display to work. ESPHome will establish some four HA sensors as well, presented on HA frontend: PIR sensor, connection status, WiFi strength and display on/off sensor. If display on/off is turned off from HA, then triggering PIR will not turn on display or alter brightness.</p> <p>Note: <code>media_artist</code> and <code>media_title</code> attributes from HA's Sonos integration could be swapped for some radio stations, as these attributes are split from one combined string in the stream. Some radio stations have artist - title order, others use title - artist. You really can't tell... My danish radio stations (source list) all use the 'swapped' version, so my templates below swap these two attributes for radio stations.</p> <p>Enter your main speaker as trigger entity ID for all templates but the first two (search for <code>media_player.office</code> and replace with your main speaker entity). Without this specific hardcoded trigger entity, templates simply doesn't always update correctly. So unfortunately they're needed for now, until I hopefully find a 'cleaner' and more dynamic solution.</p> <pre><code># Sonos sensors\nsensor:\n  - platform: template\n    sensors:\n      sonos_main_friendly:\n        friendly_name: \"Sonos main Friendly\"\n        entity_id: group.sonos_all\n        value_template: \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'friendly_name') }}\"\n      sonos_passives_friendly:\n        friendly_name: \"Sonos passives Friendly\"\n        entity_id: group.sonos_all\n        value_template: &gt;-\n          {% for entity_id in state_attr(\"group.sonos_all\", \"entity_id\")[1:] -%}\n            {% set friendly_name = state_attr(entity_id, \"friendly_name\") %}\n            {%- if loop.last %}{{ friendly_name }}{% else %}{{ friendly_name }}, {% endif -%}\n          {%- endfor %}\n      media_title: # Swap title/artist if 'source' attribute is not present = radio\n        entity_id: media_player.office # Sonos main speaker\n        value_template: &gt;-\n          {% if is_state('sensor.media_source' , \"no source\") %}\n            {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_title') }}\n          {% else %}\n            {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_artist') }}\n          {% endif %}\n      media_artist: # Swap title/artist if 'source' attribute is not present = radio\n        entity_id: media_player.office # Sonos main speaker\n        value_template: &gt;-\n          {% if is_state('sensor.media_source' , \"no source\") %}\n            {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_artist') }}\n          {% else %}\n            {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_title') }}\n          {% endif %}\n      media_album_name:\n        entity_id: media_player.office # Sonos main speaker\n        value_template: \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_album_name') }}\"\n      media_source: # Remove all after 'DR P4 Fyn' as source (to fit on display)\n        entity_id: media_player.office # Sonos main speaker\n        value_template: &gt;-\n          {% if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'source') %}\n            {{states.media_player.office.attributes.source.split('96.8')[0]}}\n          {% else %}\n            no source\n          {% endif %}\n      volume:\n        entity_id: media_player.office # Sonos main speaker\n        value_template: \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'volume_level')|float * 100 }}\"\n      sonos_main_group_entities:\n        entity_id: media_player.office # Sonos main speaker\n        value_template: \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'sonos_group') }}\"\n</code></pre>"},{"location":"examples/sonos-display/#home-assistant-group","title":"Home Assistant group:","text":"<p>Here you define your Sonos speaker entities. main speaker has to be entered as first entity and all that's actually needed. Active passive speakers will dynamically be added on HA restart or when group configuration is changed (via Sonos app/HA service calls eg.) If you're only using one speaker, you still need to create the group in <code>groups.yaml</code> and populate with that single main speaker entity, as the group entity is needed in the code.</p> <p>One note on main speaker, passives and Sonos groups Your defined main speaker actually doesn't need to be the main speaker. As long as it's part of the group (main or passive), then display will still show data for the group. But if defined main speaker is removed from the group, it will be a 'single speaker group' on it's own, and display will reflect main speaker data only.</p> <pre><code>sonos_all:\n  name: sonos_all\n  entities:\n    - media_player.office # This HAS to be your main speaker\n  # - media_player.kitchen    # Optional - passive speaker #1\n  # - media_player.livingroom # Optional - passive speaker #2\n</code></pre>"},{"location":"examples/sonos-display/#home-assistant-automations","title":"Home Assistant automations:","text":"<p>First automation is identical with the one I've already used in my ControllerX Sonos group setup example link.</p> <p>Second automation is purely optional, and not really directly related to the display. It's just a quick shortcut to easily reset active speakers within group, volume and source playing to some defaults you've defined in the automation. Really nice when you have teenagers in the house, messing with active speaker entities in the group, playlists and volume all the time... \ud83d\ude09 The automation is written for an Ikea E1810 remote with z2m ControllerX HA integration. Here <code>toggle_hold</code>(Press and hold center button for appx. 3.5 seconds) is used as trigger.</p> <pre><code>- id: Dynamic Sonos groups\n  alias: Dynamic Sonos groups\n  trigger:\n    platform: state\n    entity_id: sensor.sonos_main_group_entities # Same as defined in configuration.yaml\n    platform: homeassistant\n    event: start\n  action:\n  - service: group.set\n    data_template:\n      object_id: sonos_all # Name of Sonos group in groups.yaml\n      entities: \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'sonos_group') | join(',') }}\"\n\n- id: Sonos reset to defaults settings\n  alias: Sonos reset to defaults settings\n  trigger:\n    platform: state\n    entity_id: sensor.your_E1810_sensor_action\n    to: 'toggle_hold'\n  action:\n  - service: sonos.join\n    data:\n      main: media_player.office # This HAS to be your main speaker\n      entity_id:\n      - media_player.kitchen # passive speaker #1\n      - media_player.livingroom # passive speaker #2\n  - service: media_player.volume_set # Reset volume to 25 for all speakers\n    data_template:\n      entity_id:\n      - media_player.office\n      - media_player.kitchen\n      - media_player.livingroom\n      volume_level: 0.25\n  - service: media_player.select_source # Reset to your default choice of source\n    data:\n      entity_id: media_player.office # This HAS to be your main speaker\n      source: 'DR P4 Fyn 96.8 (Nyheder)'\n  - service: media_player.media_play # Start playing\n    entity_id: media_player.office # This HAS to be your main speaker\n</code></pre>"},{"location":"examples/sonos-display/#esphome-yaml-configuration","title":"ESPHome YAML configuration:","text":"<p>As ESPHome currently don't support attributes, all data to be displayed has to be in separate HA sensors. Hence the huge amount of sensors.</p> <p>If you're not using a movement sensor in your build, you could (but actually don't need to) revise YAML. If you experience issues with the 'floating' GPIO used for the PIR sensor, just pull pin D5 permanently low or high.</p> <p>Two entities needs to be entered. Your Sonos main speaker and optional temperature sensor. If temperature sensor is omitted, you can just revise YAML and delete page 3 &amp; 4 from the display lambda configuration. Also remember to revise <code>interval</code> page count from 4 to 2.</p> <p>Revise <code>sonos_status</code> and <code>outdoor_temp</code> sensors in YAML below, to match your HA entities for Sonos main speaker and outdoor temperature sensor. Create a new ESPHome node and configure it with your ESP8266 board settings and WiFi credentials. Edit node and copy/paste revised YAML below to your node. Remember to insert your node's autogenerated WiFi ap settings to YAML. Save it, upload and enjoy! \ud83c\udf89\ud83d\ude0e</p> <p>One final note on current YAML configuration ESPHome is at max with all these included sensors, schedulers running and the quite extensive display lambda. Addding just one extra sensor to current YAML, will make ESPHome crash on boot. Omitting <code>fast_connect: true</code>from WiFi configuration in YAML will also send ESPHome into an eternal stack trace error boot loop \ud83d\ude80\ud83d\udc80</p> <p>So 'tweak' YAML with care! \ud83d\ude01\ud83d\ude09</p> <pre><code>substitutions:\n  devicename: sonos_display\n  friendly_name: Sonos Display\n  device_description: Sonos SSD1306/1309 display for Sonos groups\n\nesphome:\n  name: $devicename\n  comment: ${device_description}\n  platform: ESP8266\n  board: d1_mini\n\nwifi:\n  ssid: \"your_ssid\"\n  password: \"your_password\"\n  fast_connect: true # Mandatory for fast WiFi connect to avoid stack trace error on boot\n  manual_ip:\n    static_ip: 192.168.XX.XX # Enter your static IP address. Needed for fast WiFi connect to avoid stack trace error on boot\n    gateway: 192.168.XX.XX # Enter your gateway\n    subnet: 255.255.255.0 # Enter your subnet\n\n  # Enable fallback hotspot (captive portal) in case wifi connection fails. Replace with your own node settings\n  ap:\n    ssid: \"Sonos Display Fallback Hotspot\"\n    password: \"your_autogenerated_password\"\n\ncaptive_portal:\n\n# Enable logging\nlogger:\n\n# Enable Home Assistant API\napi:\n\nota:\n\ntime:\n  - platform: homeassistant\n    id: esptime\n\nswitch:\n  # ** Not used - Currently ESPHome can't handle more sensors/switches than already installed ***\n  #- platform: restart\n  #  name: \"${friendly_name} Restart\"\n  #  icon: \"mdi:restart\"\n  - platform: template\n    name: \"${friendly_name} On/Off\"\n    id: sonos_display\n    turn_on_action:\n      - switch.template.publish:\n          id: sonos_display\n          state: ON\n      - lambda: |-\n          id(sonos).turn_on();\n          id(sonos).set_brightness(1);\n    turn_off_action:\n      - switch.template.publish:\n          id: sonos_display\n          state: OFF\n      - lambda: |-\n          id(sonos).turn_off();\n\nsensor:\n  # Outdoor temperature sensor - only used in display lambda page 4\n  - platform: homeassistant\n    id: outdoor_temp\n    entity_id: sensor.your_temperature_sensor\n    internal: true\n\n  - platform: homeassistant\n    id: sonos_volume\n    entity_id: sensor.volume\n    internal: true\n\n    # Create WiFi signal sensor in HA\n  - platform: wifi_signal\n    name: \"${friendly_name} WiFi Signal\"\n    update_interval: 60s\n\ntext_sensor:\n  # Sonos main speaker\n  - platform: homeassistant\n    id: sonos_status\n    entity_id: media_player.your_main_speaker\n    internal: true\n\n  - platform: homeassistant\n    id: media_source\n    entity_id: sensor.media_source\n    internal: true\n\n  - platform: homeassistant\n    id: media_artist\n    entity_id: sensor.media_artist\n    internal: true\n\n  - platform: homeassistant\n    id: media_title\n    entity_id: sensor.media_title\n    internal: true\n\n  # ** Not yet used - Currently ESPHome can't handle more sensors than already installed ***\n  #- platform: homeassistant\n  #  id: media_album_title\n  #  entity_id: sensor.media_album_title // Not in use yet\n  #  internal: true\n\n  - platform: homeassistant\n    id: sonos_main\n    entity_id: sensor.sonos_main_friendly\n    internal: true\n\n  - platform: homeassistant\n    id: sonos_passives\n    entity_id: sensor.sonos_passives_friendly\n    internal: true\n\nbinary_sensor:\n  - platform: homeassistant\n    id: mute\n    entity_id: binary_sensor.is_volume_muted\n    internal: true\n\n  - platform: homeassistant\n    id: shuffle\n    entity_id: binary_sensor.shuffle\n    internal: true\n\n  - platform: gpio\n    pin: D5\n    name: \"${friendly_name} PIR\"\n    device_class: motion\n    on_press:\n      then:\n        - binary_sensor.template.publish:\n            id: dim_display\n            state: ON\n        - binary_sensor.template.publish:\n            id: display_off\n            state: ON\n    on_release:\n      then:\n        - binary_sensor.template.publish:\n            id: dim_display\n            state: OFF\n        - binary_sensor.template.publish:\n            id: display_off\n            state: OFF\n\n    # Create HA connected sensor\n  - platform: status\n    name: \"${friendly_name} Status\"\n\n  - platform: template\n    id: dim_display\n    filters:\n      - delayed_off: 5min # Dim display after 5 minutes\n    on_press: # brightness is float (from 0 to 1). 1 = 100%\n      then:\n        - lambda: |-\n            if (id(sonos_display).state == true) {\n              id(sonos).turn_on();\n              id(sonos).set_brightness(1);\n            }\n    on_release: # brightness is float (from 0 to 1). 0.01 = 1%\n      then:\n        - lambda: |-\n            id(sonos).set_brightness(0.01);\n\n  - platform: template\n    id: display_off\n    filters:\n      - delayed_off: 15min # Turn off display after 15 minutes\n    on_release:\n      then:\n        - lambda: |-\n            id(sonos).turn_off();\n\nfont:\n  - file: \"Calibri Bold.ttf\"\n    id: font_large\n    size: 23\n    glyphs: '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&amp;#''\u00b4\u2019?\u00fc\u00f6\u00e4\u00e9'\n  - file: \"Calibri Regular.ttf\"\n    id: font_medium\n    size: 19\n    glyphs: '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&amp;#''\u00b4\u2019?\u00fc\u00f6\u00e4\u00e9'\n  - file: \"Calibri Light.ttf\"\n    id: font_small\n    size: 11\n    glyphs: '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&amp;#''\u00b4\u2019?\u00fc\u00f6\u00e4\u00e9'\n  - file: \"Calibri Bold.ttf\"\n    id: font_small_bold\n    size: 12\n    glyphs: '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&amp;#''\u00b4\u2019?\u00fc\u00f6\u00e4\u00e9'\n  - file: \"HeydingsIconsSymbols.ttf\"\n    id: font_icons_large\n    size: 23\n    glyphs: \"0679HADJabjsmx\"\n  - file: \"HeydingsIconsSymbols.ttf\"\n    id: font_icons_medium\n    size: 19\n    glyphs: \"0679HADJabjsmx\"\n  - file: \"HeydingsIconsSymbols.ttf\"\n    id: font_icons_14\n    size: 14\n    glyphs: \"0679HADJabjsmx\"\n  - file: \"HeydingsIconsSymbols.ttf\"\n    id: font_icons_small\n    size: 11\n    glyphs: \"0679HADJabjsmx\"\n\nglobals:\n  - id: display_page\n    type: int\n    restore_value: no\n    initial_value: \"0\" # On first boot, value=0 initiates display.turn_on() command. Can't run as on_boot command\n\ninterval:\n  - interval: 5s # Show each page for 5 seconds\n    then:\n      - lambda: |-\n          if (id(display_page) == 0) {\n            id(sonos_display).turn_on();\n          }\n          if (id(display_page) &lt; 4) {\n            id(display_page)++;\n          } else {\n            id(display_page) = 1;\n          }\n\ni2c:\n  sda: D1\n  scl: D2\n  frequency: 100khz # Default 50kHz. Min. setting at 100kHz needed. Otherwise lambda is so slow that warnings appear in log\n\ndisplay:\n  - platform: ssd1306_i2c\n    model: \"SSD1306 128x64\"\n    reset_pin: D0\n    address: 0x3C # Default address for most SSD1306/1309 displays\n    brightness: 100%\n    update_interval: 1s\n    id: sonos\n    pages:\n      lambda: |-\n        if (id(media_source).state != \"no source\") {\n          it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"%.12s\", id(media_source).state.c_str());\n        } else {\n          if (id(display_page) == 1 or (id(display_page) == 3)) {\n            it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"Sonos\"); // if no source list attribute, display Sonos Playlist instead\n          } else {\n            it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"Playlist\"); // if no source list attribute, display Sonos Playlist instead\n          }\n          if (id(shuffle).state) {\n            it.printf(127, 17, id(font_icons_large), TextAlign::BOTTOM_RIGHT, \"x\"); // shuffle playlist sign at top right position\n          }\n        }\n        if (id(mute).state) {\n          it.printf(0, 20, id(font_icons_medium), TextAlign::TOP_LEFT, \"0\"); // speaker mute sign\n        } else {\n          it.printf(0, 20, id(font_icons_medium), TextAlign::TOP_LEFT, \"m\"); // speaker on sign\n        }\n        it.printf(21, 22, id(font_medium), TextAlign::TOP_LEFT, \"%.f\", id(sonos_volume).state);\n        if (id(sonos_status).state == \"playing\") {\n          it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"6\"); // pause sign\n        } else if (id(sonos_status).state == \"paused\") {\n            it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"7\"); // play sign\n        } else {\n            it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"9\"); // stop sign\n        }\n        it.printf(107, 22, id(font_medium), TextAlign::TOP_RIGHT, \"%s\", id(sonos_status).state.c_str());\n\n        if (id(display_page) == 1) {\n          it.printf(00, 53, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"s\"); // star sign for main speaker\n          it.printf(64, 53, id(font_small_bold), TextAlign::BOTTOM_CENTER, \"%s\", id(sonos_main).state.c_str());\n          it.printf(00, 65, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"a\"); // chain sign for passive speaker(s)\n          it.printf(64, 65, id(font_small), TextAlign::BOTTOM_CENTER, \"%s\", id(sonos_passives).state.c_str());\n        } else if (id(display_page) == 2) {\n            if (id(media_title).state != \"None\") {\n              it.printf(73, 53, id(font_small), TextAlign::BOTTOM_CENTER, \"%.24s\", id(media_title).state.c_str());\n              it.printf(73, 65, id(font_small), TextAlign::BOTTOM_CENTER, \"%.24s\", id(media_artist).state.c_str());\n              it.printf(00, 51, id(font_icons_14), TextAlign::BOTTOM_LEFT, \"j\"); // note sign (title)\n              it.printf(00, 65, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"A\"); // person sign (artist)\n            } else {\n                it.strftime(64, 42, id(font_large), TextAlign::TOP_CENTER, \"%H:%M:%S\", id(esptime).now());\n            }\n        } else if (id(display_page) == 3) {\n            it.strftime(64, 42, id(font_large), TextAlign::TOP_CENTER, \"%H:%M:%S\", id(esptime).now());\n        } else {\n            it.printf(64, 42, id(font_large), TextAlign::TOP_CENTER, \"Out: %.1f\u00b0C\", id(outdoor_temp).state);\n        }\n</code></pre>"},{"location":"examples/sonos-display/#change-log","title":"Change log","text":"<ul> <li>Intitial version published July, 2020</li> <li>v1.1 published September, 2020</li> <li>Added optional sensor for brightness control &amp; display on/off</li> <li>Added 'shuffle' &amp; 'mute' signs</li> <li>When idle, display 'stop' sign and 'idle' text</li> <li>Revised display lambda page code</li> <li>Four ESPHome sensors exposed in HA</li> <li>Connected status</li> <li>WiFi strength</li> <li>Display on/off</li> <li>PIR</li> </ul> <p>Future plans:</p> <ul> <li>Design 2,9\" E-paper display version</li> <li>Improve/simplify HA sensor templates (if possible)</li> <li>Remove need for main entity everywhere in config files</li> </ul> <p>Thank you Xavi for providing the perfect solution for some of my templating issues \ud83d\udc4d\ud83d\ude0e</p> <p>September, 2020 @htvekov</p>"},{"location":"examples/sonos/","title":"SONOS/SYMFONISK Examples","text":""},{"location":"examples/sonos/#sonossymfonisk-single-speaker","title":"SONOS/SYMFONISK single speaker","text":"<p>ControllerX can 'out of the box' control single speakers with following small app setup. Supports:</p> <ul> <li>Toggle play/pause, volume up/down, previous/next song (in playlist) and previous/next favourites from Sonos app (source list).</li> </ul> <p>This favourites list can consist of both radio stations, playlists, podcasts etc. Source list is 'circular'. Meaning that choosing next when at last source in list, will skip to first source in list - and vice versa.</p> <pre><code>office_sonos_controller:\n  module: controllerx\n  class: E1810MediaPlayerController\n  controller: controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  volume_steps: 20 # default setting is 10. This will increase default steps to 20 from no volume to full volume\n  media_player: media_player.office\n</code></pre>"},{"location":"examples/sonos/#sonossymfonisk-groups","title":"SONOS/SYMFONISK groups","text":"<p>ControllerX supports Sonos groups as well. If media_player in app is set to a group, then ControllerX will read the Sonos source list from FIRST entity_id in group. So this has to be your chosen main speaker! This setup will work perfectly, if you only use static groups that are never altered (via Sonos app/HA or otherwise). But if your Sonos group alters through the day (other family members redefines group speakers to their liking), you need a dynamic group setting.</p> <p>This can easily be achieved by adding only one sensor and one small automation to your HA configuration.</p>"},{"location":"examples/sonos/#ha-configurationyaml","title":"HA configuration.yaml","text":"<pre><code>- platform: template\n  sensors:\n    sonos_main_group_entities:\n      value_template: \"{{ state_attr('media_player.office', 'sonos_group') }}\" #main speaker\n</code></pre>"},{"location":"examples/sonos/#ha-automationyaml","title":"HA automation.yaml","text":"<pre><code>id: dynamic_sonos_groups\nalias: dynamic_sonos_groups\ntrigger:\n  platform: state\n  entity_id: sensor.sonos_main_group_entities # Same as defined in configuration.yaml\naction:\n  - service: group.set\n    data_template:\n      object_id: sonos_all #name of sonos group in groups.yaml\n      entities: \"{{ state_attr('media_player.office', 'sonos_group') | join(',') }}\" #main speaker\n</code></pre>"},{"location":"examples/sonos/#ha-groupsyaml","title":"HA groups.yaml","text":"<pre><code>name: sonos_all\nentities:\n  - media_player.office #this HAS to be your main speaker\n  - media_player.kitchen #passive speaker #1\n  - media_player.livingroom #passive speaker #2\n</code></pre> <p>And with the following ControllerX configuration, you will be able to control the dynamic group in HA, which will be changed immediately if group is altered eg. from Sonos app. This app version below, has 'flipped' the arrow functions. So click will change source and hold will change previous/next song in playlist. This behaviour will most likely fit better for users that primarily uses favourites (radio stations).</p>"},{"location":"examples/sonos/#appdeamon-appsyaml","title":"Appdeamon apps.yaml","text":"<pre><code>sonos_group:\n  module: controllerx\n  class: MediaPlayerController\n  controller: controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n  volume_steps: 20\n  media_player: group.sonos_all # Sonos group in groups.yaml\n  mapping:\n    toggle: play_pause\n    brightness_up_click: click_volume_up\n    brightness_down_click: click_volume_down\n    brightness_up_hold: hold_volume_up\n    brightness_down_hold: hold_volume_down\n    brightness_up_release: release\n    brightness_down_release: release\n    arrow_right_click: next_source\n    arrow_left_click: previous_source\n    arrow_right_hold: next_track\n    arrow_left_hold: previous_track\n</code></pre> <p>This example was provided by @htvekov</p>"},{"location":"examples/tasmota-double-button/","title":"Tasmota - Control an RGB light with two buttons","text":"<p>Updated November, 2022.</p>"},{"location":"examples/tasmota-double-button/#control-a-single-rgb-light-using-a-tasmota-device-with-two-buttons","title":"CONTROL A SINGLE RGB LIGHT USING A TASMOTA DEVICE WITH TWO BUTTONS","text":"<p>This example shows how to control an RGB light using the <code>Button1</code> to decrease brightness, color temperature, and color, and the <code>Button2</code> to decrease brightness, color temperature, and color. For that, and as explained in the docs, you should set <code>SetOption73 1</code> to detach the buttons from the relays you might have, and to make the device to publish MQTT messages instead.</p>"},{"location":"examples/tasmota-double-button/#motivation","title":"Motivation","text":"<p>In most of my rooms, I have a Sonoff Mini behind the switch in the wall, connected to one or more Zigbee RGB bulbs. Then, I replaced the wall switches with double push buttons of the same brand and model (to keep aesthetics and have my wife's approval). The Sonoff Mini allows connecting a button to the terminal header, plus another button to GPIO16 on the board itself through a pin header used to activate the DIY mode, so I connected those two buttons to the Sonoff so I can control the bulbs without cutting the power when the switch is toggled. I use the left button as <code>Button1</code>and the right button as <code>Button2</code>.</p>"},{"location":"examples/tasmota-double-button/#requirements","title":"Requirements","text":"<p>Tasmota: v12.2.0 or newer</p> <p>ControllerX: v4.24.0 or newer</p>"},{"location":"examples/tasmota-double-button/#this-example-will","title":"This example will","text":"<ul> <li>toggle light on low brightness and warm white on <code>Button1</code> single press</li> <li>toggle light on high brightness and warm white on <code>Button2</code> single press</li> <li>decrease light brightness when <code>Button1</code> is held</li> <li>increase light brightness when <code>Button2</code> is held</li> <li>decrease color temperature on <code>Button1</code> double pressed</li> <li>increase color temperature on <code>Button2</code> double pressed</li> <li>rotate XY color down on <code>Button1</code> triple pressed</li> <li>rotate XY color up on <code>Button2</code> triple pressed</li> </ul>"},{"location":"examples/tasmota-double-button/#controllerx-appsyaml-example","title":"ControllerX apps.yaml example","text":""},{"location":"examples/tasmota-double-button/#button1-decrease","title":"Button1 (decrease)","text":"<pre><code>test_light_down:\n  module: controllerx\n  class: TasmotaButtonLightController\n  controller: stat/test_device/RESULT # define your device topic here\n  integration:\n    name: tasmota\n    component: Button1\n  light: light.example_light # define your own light entity\n  manual_steps: 5\n  merge_mapping:\n    SINGLE:\n      action: toggle\n      attributes:\n        brightness: 76\n        color_temp: 500\n    DOUBLE: click_colortemp_down\n    TRIPLE: click_xycolor_down\n    HOLD:\n      action: hold_brightness_down\n</code></pre>"},{"location":"examples/tasmota-double-button/#button2-increase","title":"Button2 (increase)","text":"<pre><code>test_light_up:\n  module: controllerx\n  class: TasmotaButtonLightController\n  controller: stat/test_device/RESULT # define your device topic here\n  integration:\n    name: tasmota\n    component: Button2\n  light: light.example_light # define your own light entity\n  manual_steps: 5\n  merge_mapping:\n    SINGLE:\n      action: toggle\n      attributes:\n        brightness: 254\n        color_temp: 500\n    DOUBLE: click_colortemp_up\n    TRIPLE: click_xycolor_up\n    HOLD:\n      action: hold_brightness_up\n</code></pre> <p>This example was provided by @cmiguelcabral</p>"},{"location":"examples/tasmota-switchmode11/","title":"Tasmota SwitchMode 11/12 Example - v1.1","text":"<p>Updated August, 2020. Changelog at last page</p>"},{"location":"examples/tasmota-switchmode11/#tasmota-switchmode-1112-wall-switch-implementation-with-home-assistant-controllerx","title":"TASMOTA SWITCHMODE 11/12 WALL SWITCH IMPLEMENTATION WITH HOME ASSISTANT / CONTROLLERX","text":"<p>Want to make your 'dumb' wall switches smart and at the same time improve installation of smart lights WAF \ud83d\udc69\u200d\ud83e\uddb0 ? Then the solution could be to 'Tasmotize' your wall switches, and use Home Asssistant with ControllerX app to control the smart light connected to that switch. With this setup, you'll be able to toggle, turn lights on at full brightness, sync and dim your lights directly from your wall switch. Today, many WIFI switches are so small, that they can fit behind wall outlets/switches or in ceiling outlets. Personally, I've used Shelly One devices and Itead Sonoff Mini's. Both are easy to flash with Tasmota using either USB-to-UART adapter or directly OTA. No soldering is actually needed these days. The flash part and build instructions are to comprehensive to elaborate on further in this documentation. Instructions are 'out there' - Google it! \ud83d\ude09</p> <p>One of my Sonoff Mini installations behind a wall switch. Danish wall switch modules are typically not larger than appx. 50x50mm pr. module (outside measurements). I\u2019ve LK Opus 66 installed, which is a slightly larger type measuring 66mm in width. Still I can squeeze a Sonoff Mini in behind a \u2018typical\u2019 double module wall switch. Shelly devices are a bit smaller, round in shape and in general easier to fit than the Sonoff Mini\u2019s.</p> <p></p> <p>One final warning: Using Shelly/Sonoff devices behind wall switches/outlets involves fiddling with \u26a1HIGH VOLTAGE\u26a1 that could potentially INJURE OR KILL YOU \ud83e\ude78\ud83d\ude31\ud83d\udc80, if not handled/installed correctly !! Furthermore, local building code might prohibit use of such devices in wall outlets and unauthorized installation will most likely be illegal in most countries. If you don't know EXACTLY what you're doing - then DON'T proceed with this project !! Now you've been warned !!</p> <p>Following example is with a Shelly One device, placed in the wall socket behind the switch, to control an Ikea WS bulb in the ceiling outlet. The bulb is connected to Home Assistant via Zigbee2MQTT. I've refitted my wall switch with a spring, so it'll act like a push button.</p> <p>The Switchmode11/12 option in Tasmota, gives the user six different switch commands to be used for automation. With ControllerX only four of these commands are needed, as ControllerX internally controls changes in dimming direction. These commands (events) are send directly to ControllerX via MQTT.</p>"},{"location":"examples/tasmota-switchmode11/#switchmode1112-tasmota-output-commands-are","title":"Switchmode11/12 Tasmota output commands are:","text":"<pre><code>Switchstate=2: toggle (Normal TOGGLE function. One single press)\nSwitchstate=4: inc-dec (HOLD function. Send after delay defined with Setoption32)\nSwitchstate=5: inv (INVERSE dim direction function. Not used in this implementation, as ControllerX handles this internally)\nSwitchstate=6: clear (Delayed RELEASE function. Send when button is released AFTER delay defined with Setoption32. Not used in this implementation)\nSwitchstate=7: clear (Normal RELEASE function. Send immediately after button is released\nSwitchstate=8: double (DOUBLE press function. Two consecutive presses within time delay defined with SetOption32\n</code></pre>"},{"location":"examples/tasmota-switchmode11/#requirements","title":"Requirements:","text":"<p>Tasmota: v8.4.0.2 or newer</p> <p>ControllerX: v3.4.0b1 or newer</p>"},{"location":"examples/tasmota-switchmode11/#shelly-device-tasmota-setup-use-switchmode-11","title":"Shelly device Tasmota setup (Use switchmode 11 !!):","text":"<p>Module type: Shelly 1 (46):</p>"},{"location":"examples/tasmota-switchmode11/#sonoff-mini-device-tasmota-setup-use-switchmode-12","title":"Sonoff Mini device Tasmota setup (Use switchmode 12 !!):","text":"<p>Module type: Sonoff Basic (1)</p> <p>GPIO4: Switch1 (9)</p>"},{"location":"examples/tasmota-switchmode11/#setup-controllerx-app","title":"Setup ControllerX app:","text":"<p>Both examples listed below will:</p> <ul> <li>toggle light(s) upon single button press</li> <li>dim light(s) up/down when button is held</li> <li>Turn light(s) on at full brightness upon double press</li> </ul> <p>First example is with two separate controllers. This will also handle <code>HOLD FROM LIGHTS OFF</code> situation. Which, when lights are off, will <code>SYNC</code> light/lights when button is held for 0,8 sec.</p>"},{"location":"examples/tasmota-switchmode11/#controllerx-appsyaml-example-no-1","title":"ControllerX apps.yaml example no. 1:","text":"<pre><code>controller_switchmode11_on:\n  module: controllerx\n  class: LightController\n  controller: tasmota_topic # Normally z2m friendly name. Here topic used in Tasmota rules\n  integration: state\n    name: z2m\n    listen_to: mqtt\n    action_key: action  # Defaults to action if not specified\n  light: light.your_light # define your own light entity\n  constrain_input_boolean: light.your_light,on # This whole configuration will work when the light is on\n  mapping:\n    toggle: toggle\n    inc-dec: hold_brightness_toggle\n    clear: release\n    double: on_full_brightness\n\ncontroller_switchmode11_off:\n  module: controllerx\n  class: LightController\n  controller: tasmota_topic # Normally z2m friendly name. Here topic used in Tasmota rules\n  integration: state\n    name: z2m\n    listen_to: mqtt\n    action_key: action  # Defaults to action if not specified\n  light: light.your_light # define your own light entity\n  constrain_input_boolean: light.your_light,off # This whole configuration will work when the light is off\n  mapping:\n    toggle: toggle\n    inc-dec: sync\n    double: on_full_brightness\n</code></pre> <p>Second example is a more simple setup, where <code>smooth_power_on</code> is enabled instead, when button is held from lights off position.</p>"},{"location":"examples/tasmota-switchmode11/#controllerx-appsyaml-example-no-2","title":"ControllerX apps.yaml example no. 2:","text":"<pre><code>tasmota_switchmode11:\n  module: controllerx\n  class: LightController\n  controller: tasmota_topic  # Normally z2m friendly name. Here topic used in Tasmota rules\n  integration: state\n    name: z2m\n    listen_to: mqtt\n    action_key: action  # Defaults to action if not specified\n  smooth_power_on: true # enable 'smooth power on' feature when button is held from lights off\n  delay: 250 # change delay if you want faster/slower dimming response (default: 350 ms.)\n  light: light.your_light # define your own light entity\n  mapping:\n    toggle: toggle\n    inc-dec: hold_brightness_toggle\n    clear: release\n    double: on_full_brightness\n</code></pre>"},{"location":"examples/tasmota-switchmode11/#notes-on-appdaemon-and-has-state-machine","title":"Notes on Appdaemon and HA's state machine:","text":"<p>Things unfortunately take time when HA's state machine is involved! This can for some be notisable (for others not), when Appdaemon apps has to check HA states by eg. using constrain_input_boolean's (as in example 1) or change HA states by toggling lights. In my setup, using a constrain_input_boolean adds some 100 ms. delay on execution. Not much on its own, but still worth to keep in mind. Toggling lights via HA automation is also some 100 ms. faster than toggling through Appdaemon/ControllerX. So in order to get the fastest possible toggle of lights, I'm personally using a simple HA automation for toggling lights and let ControllerX handle everything else \ud83d\ude42</p> <p>Optional HA toggle automation below. Remember to remove <code>toggle</code> from mapping in Appdaemon/ControllerX apps.yaml \ud83d\ude09</p> <pre><code># Toggle lights through HA using direct MQTT events. Quicker responce than using platform state or directly in appdaemon ControllerX app\n- alias: tasmota_switchmode11_toggle\n  trigger:\n    platform: mqtt\n    topic: zigbee2mqtt/tasmota_topic\n    payload: \"{\\\"action\\\": \\\"toggle\\\"}\" # escape characters needed !\n  action:\n    service: light.toggle\n    data:\n      entity_id:\n      light.your_light\n</code></pre>"},{"location":"examples/tasmota-switchmode11/#setup-needed-commands-and-rules-in-tasmota-software-via-console","title":"Setup needed commands and rules in Tasmota software via console:","text":"<pre><code>Powerretain1 1    Retain Tasmota power settings i HA in event of power outage\nSetoption1 1      Allow only single, double and hold press button actions\nSetoption32 8     Delay for HOLD button (in 0,1 sec.). I use 8 = 0,8 sec. Max value allowed is 63 !!\nSetoption34 50    Minimize delay between backlog commands to 50 ms. (Default 200 ms.)\nSwitchtopic 0     Disable switchtopic. Needed when using rules in Tasmota.\nSwitchmode1 11    Set Tasmota to switchmode11\n\n\nRULE1\non switch1#state=2 do publish zigbee2mqtt/tasmota_topic {\"action\": \"toggle\"} endon\non switch1#state=8 do publish zigbee2mqtt/tasmota_topic {\"action\": \"double\"} endon\non switch1#state=7 do backlog publish zigbee2mqtt/tasmota_topic {\"action\": \"clear\"};rule3 1 endon\n\nRULE2\non mqtt#disconnected do rule1 0 endon\non mqtt#connected do rule1 1 endon\n\nRULE3 5\non switch1#state=4 do backlog publish zigbee2mqtt/tasmota_topic {\"action\": \"inc-dec\"};rule3 0 endon\n</code></pre> <p>NB: Note the extra decimal '5' in RULE3 !!</p> <p>RULE1 sends the TOGGLE and DOUBLE press command via MQTT . CLEAR command is fired upon button release and RULE3 is enabled again (ready for next HOLD command).</p> <p>RULE2 handles the 'fall back' to direct switch control if MQTT server is unavailable. Nice WAF feature, if HA/MQTT server is down. Then lights still can be toggled on/off using the wall switch.</p> <p>RULE3 sends the HOLD command and disables itselves (to ensure only one HOLD command is fired).</p> <p>RULE3 is set as 'run once' in Tasmota (with the decimal 5 after the rule number) to prevent some extra HOLD commands gets fired before rule is disabled.</p> <p>Rules also needs to be 'escaped', if used with HA automation. Tasmota will automatically add needed escape characters, if rules are entered without.</p>"},{"location":"examples/tasmota-switchmode11/#changelog","title":"Changelog:","text":"<p>doc v1.0:</p> <ul> <li>Initial example documentation May, 2020</li> </ul> <p>doc v1.1:</p> <ul> <li>Deprecated use of custom controllers in example. These will shortly be deprecated as well in ControllerX</li> <li>Changed from HA sensor state to official z2m MQTT event implementation using JSON objects (speed improvement!)</li> <li>New switchmode 11/12 <code>DOUBLE</code> press command implemented</li> </ul> <p>This example was provided by @htvekov</p>"},{"location":"others/enable-mqtt-plugin/","title":"Enable MQTT Plugin","text":"<p>If we want to use the <code>mqtt</code> integration or the <code>listen_to: mqtt</code> from <code>z2m</code> integration as well as the <code>Z2MLightController</code>, we will need to activate the MQTT Plugin on the AppDaemon configuration (normally located in <code>/addon_configs/a0d7b954_appdaemon/appdaemon.yaml</code>). We will need the add the following highlighted section in that file:</p> <pre><code>---\nsecrets: /homeassistant/secrets.yaml\nappdaemon:\n  latitude: X.XXXXXXX\n  longitude: X.XXXXXXX\n  elevation: XXXX\n  time_zone: XXXXXXXX\n  missing_app_warnings: 0 # (1)\n  app_dir: /homeassistant/appdaemon/apps\n  plugins:\n    HASS:\n      type: hass\n    MQTT:\n      type: mqtt\n      namespace: mqtt # This is important\n      client_host: host # (2)\n      client_user: XXXXX # (3)\n      client_password: XXXXX\nhttp:\n  url: http://127.0.0.1:5050\nadmin:\napi:\nhadashboard:\n</code></pre> <ol> <li>Extra tip: you can add <code>missing_app_warnings</code> if you don't want any warning spam from ControllerX when starting AppDaemon.</li> <li>This is the host without indicating the port (e.g. 192.168.1.10).</li> <li>You should be able to get user and password from MQTT broker.</li> </ol> <p>Then you can just restart the AppDaemon addon/server.</p>"},{"location":"others/run-appdaemon/","title":"What's AppDaemon and why I need it","text":"<p>AppDaemon let's you run Home Assistant automation with Python code, instead of yaml configuration. When it comes simple automations, yaml or the Automation editor are great, but if the automation gets more complicated, then it gets more difficult to control through yaml, this is where AppDaemon comes into place.</p> <p>This is the reason this project is built on top of AppDaemon. Now you might be convinced, but you have no idea of how to install it and set it up. If you are using Home Assistant with the Supervisor, you can install the addon called <code>AppDaemon</code> from the addon store. You can follow the addon instructions and once is up and running, you can check the installation page.</p>"},{"location":"others/update/","title":"Update ControllerX","text":"<p>Note that AppDaemon will need to be restarted when installing a new version of ControllerX. This is due to AppDaemon not reimporting the modules again. If AppDaemon server is not restarted, then it will keep executing the old version.</p>"},{"location":"others/z2m-ha-sensor-deprecated/","title":"Zigbee2MQTT - HA sensor is deprecated","text":"<p>Zigbee2MQTT HA sensor deprecated since ControllerX v4.29.0</p> <p>Zigbee2MQTT 2.0.0 brought some breaking changes, and one of them was to deprecate the Home Assistant action sensors, which is the default option for Zigbee2MQTT integration in ControllerX.</p> <p>You might be here because of a warning in AppDaemon logs that look like the following:</p> <p>Quote</p> <p>\u26a0\ufe0f Listening to HA sensor actions is now deprecated and will be removed in the future. Use <code>listen_to: mqtt</code> or <code>listen_to: event</code> instead. Read more about it here: https://xaviml.github.io/controllerx/others/z2m-ha-sensor-deprecated</p> <p>This might be because your controller configuration looks like:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Controller\n  controller: sensor.livingroom_controller_action\n  integration: z2m\n  light: light.livingroom\n</code></pre> <p>The issue is within the <code>integration: z2m</code> which is defaulted to read a HA <code>sensor</code>. You need to switch to either <code>mqtt</code> (recommended) or HA <code>event</code> (experimental).</p>"},{"location":"others/z2m-ha-sensor-deprecated/#switch-to-mqtt-listener-recommended","title":"Switch to MQTT listener (recommended)","text":"<p>In case of switching to MQTT (as recommneded by Zigbee2MQTT), you would need to first enable MQTT plugin. Then, change your configuration to something like the following:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Controller\n  controller: livingroom_controller # (1)\n  integration:\n    name: z2m\n    listen_to: mqtt # (2)\n  light: light.livingroom\n</code></pre> <ol> <li>This is the device friendly_name in Zigbee2MQTT. Check here how to get this value.</li> <li>By indicating <code>mqtt</code> here, ControllerX will listen to MQTT controller topic.</li> </ol>"},{"location":"others/z2m-ha-sensor-deprecated/#switch-to-ha-event-sensor-listener-experimental","title":"Switch to HA Event sensor listener (experimental)","text":"<p>Another option is to listen the newly (and experimental) event entity from Zigbee2MQTT 2.0.0. First, we will need to enable the experimental feature in Zigbee2MQTT as explained here. Then, you would need to switch configuration to something like:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Controller\n  controller: office_controller_action # (1)\n  integration:\n    name: z2m\n    listen_to: event # (2)\n  light: light.livingroom\n</code></pre> <ol> <li>This is the event entity without the <code>event.</code> prefix. Check here how to get this value.</li> <li>By indicating <code>event</code> here, ControllerX will listen to the event entity changes.</li> </ol>"},{"location":"others/zigbee2mqtt-light-controller/","title":"Zigbee2MQTT Light Controller","text":"<p>This is supported since ControllerX v4.21.0</p> <p>ControllerX has always given support for Light Controller which allows amongst other features to smoothly change attributes (brightness, color temperature) values by requesting the changes periodically to Home Assistant. This has allowed to work with lights integrated with many integrations (e.g.: Zigbee2MQTT, deCONZ, WLED, Hue). However, this generalization has penalized Zigbee2MQTT which has its own mechanism to change brightness and color temp over time which works much smoother than the Light Controller.</p> <p>Zigbee2MQTT allows to send the following topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with a payload like <code>{\"brightness_move\": -40}</code> which will change the brightness down with 40 steps over time. Then, we can send to the same topic the following payload to make it stop: <code>{\"brightness_move\": \"stop\"}</code>. Zigbee2MQTT does not have an specific page with this documentation since it depends on the device itself. For example, we can see all this further explained for the LED1545G12 light.</p> <p>ControllerX has always wanted to integrate this inside the Light Controller, but there are many features that are not compatible with what Zigbee2MQTT offers:</p> <ul> <li>Hold/Click modes (bounce, loop)</li> <li>Color looping</li> <li>Define a minimum and maximum attribute values</li> </ul> <p>For this reason, it has been decided to create a new controller type, Z2M Light Controller, which allows most of the same functionalities as Light Controller, but using MQTT features from Zigbee2MQTT.</p> <p>Imagine we have a light that in Zigbee2MQTT has friendly name <code>livingroom</code> and entity <code>light.livingroom</code> in Home Assistant. Then, let's say we had the following ControllerX configuration for E1810:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Controller # (1)\n  controller: sensor.livingroom_controller_action\n  integration: z2m\n  light: light.livingroom\n</code></pre> <ol> <li><code>E1810Controller</code> is a <code>Light Controller</code></li> </ol> <p>This allows us to control the the <code>livingroom</code> light with the Light Controller, however if we replace <code>E1810Controller</code> for the new <code>E1810Z2MLightController</code> and the <code>light.livingroom</code> for <code>livingroom</code> we will be using Z2M Light Controller:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Z2MLightController # (1)\n  controller: sensor.livingroom_controller_action\n  integration: z2m\n  light: livingroom # (2)\n</code></pre> <ol> <li>This is a <code>Z2M Light Controller</code></li> <li>This the Zigbee2MQTT friendly name</li> </ol> <p>This will be sending MQTT messages through Home Assistant, but if we have the MQTT plugin enabled in AppDaemon, then we could send the MQTT through MQTT plugin:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Z2MLightController\n  controller: sensor.livingroom_controller_action\n  integration: z2m\n  light:\n    name: livingroom\n    mode: mqtt # (1)\n</code></pre> <ol> <li><code>mode</code> can either be <code>ha</code> or <code>mqtt</code> (default: <code>ha</code>). On the one hand, <code>ha</code> will send the mqtt messages through Home Assistant with <code>mqtt.publish</code> service. On the other hand, <code>mqtt</code> will send the MQTT messages through MQTT plugin from AppDaemon (hence skipping HA).</li> </ol> <p>Finally, we can have the full ControllerX configuration listening and sending to MQTT broker directly without going through Home Assistant:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Z2MLightController\n  controller: livingroom_controller # (1)\n  integration:\n    name: z2m\n    listen_to: mqtt\n  light:\n    name: livingroom\n    mode: mqtt\n</code></pre> <ol> <li><code>livingroom_controller</code> is the Zigbee2MQTT friendly name of the controller</li> </ol> <p>With this latest configuration, we can keep using the light even if Home Assistant is down since all interactions go:</p> <pre><code>Zigbee2MQTT &lt;&gt; MQTT Broker &lt;&gt; AppDaemon (ControllerX)\n</code></pre> <p>Many of the existing devices now have support to <code>Z2MLightController</code>, and you can use it in the <code>class</code> as you can now use <code>LightController</code> as well. Check Supported controllers pages to see the class names.</p>"},{"location":"start/configuration/","title":"Configuration","text":"<p>Once AppDaemon and Controller has been installed, you can proceed to configure ControllerX in <code>/homeassistant/appdaemon/apps/apps.yaml</code>. This file follows the AppDaemon specifications. ControllerX app links 1 controller with one or multiple devices like:</p> <pre><code>example_app:\n  module: controllerx\n  class: &lt;class of your controller&gt;\n  controller: &lt;controller entity id&gt;\n  integration: &lt;z2m | deconz | zha&gt;\n  light: &lt;light, group entity id&gt;\n</code></pre> <p>or:</p> <pre><code>example_app:\n  module: controllerx\n  class: &lt;class of your controller&gt;\n  controller: &lt;controller entity id&gt;\n  integration: &lt;z2m | deconz | zha&gt;\n  light:\n    name: &lt;light, group entity id&gt;\n    color_mode: auto | xy_color | color_temp\n</code></pre> <p>or:</p> <pre><code>example_app:\n  module: controllerx\n  class: &lt;class of your controller&gt;\n  controller: &lt;controller entity id&gt;\n  integration: &lt;z2m | deconz | zha&gt;\n  media_player: &lt;media player, group entity id&gt;\n</code></pre> <p>or:</p> <pre><code>example_app:\n  module: controllerx\n  class: &lt;class of your controller&gt;\n  controller: &lt;controller entity id&gt;\n  integration: &lt;z2m | deconz | zha&gt;\n  switch: &lt;switch, group entity id&gt;\n</code></pre>"},{"location":"start/configuration/#parameters","title":"Parameters","text":"<p>These are the generic app parameters for all type of controllers. You can see the rest in here.</p> key type value description <code>module</code>* string <code>controllerx</code> The Python module <code>class</code>* string <code>E1810Controller</code> The Python class. Check the classes for each controller on the supported controllers page. <code>controller</code>* string | list <code>sensor.controller</code> or <code>hue_switch1, hue_switch2</code> This is the controller id, which will depend on the integration. See in the chosen integration page to know how to get the controller id. <code>integration</code>* string | dict See here the available integrations. This is the integration that the device was integrated. <code>actions</code> list All actions This is a list of actions to be included and controlled by the app. To see which actions has each controller check the individual controller pages in here. This attribute cannot be used together with <code>excluded_actions</code>. <code>excluded_actions</code> list Empty list This is a list of actions to be excluded. To see which actions has each controller check the individual controller pages in here. This attribute cannot be used together with <code>actions</code>. <code>action_delta</code> dict | int 300 This is the threshold time between the previous action and the next one (being the same action). If the time difference between the two actions is less than this attribute, then the action won't be called. I recommend changing this if you see the same action being called twice. A different <code>action_delta</code> per action can be defined in a mapping. <code>multiple_click_delay</code> int 500 Indicates the delay (in milliseconds) when a multiple click action should be trigger. The higher the number, the more time there can be between clicks, but there will be more delay for the action to be triggered. <code>action_delay</code> dict | int 0 This can be used to set a delay to each action. By default, the delay for all actions is 0. If defining a map, the key for the map is the action and the value is the delay in seconds. Otherwise, we can set a default time like <code>action_delay: 10</code>, and this will add a delay to all actions. <code>previous_state</code> dict | str - This can be used to restrict when an action is performed depending on the previous state of the entity. This is just applicable for <code>state</code> and <code>z2m</code> (with not MQTT) integrations. For example, it can be used when we want the action to be triggered only with a specific previous state. <code>mapping</code> dict - This can be used to replace the behaviour of the controller and manually select what each button should be doing. By default it will ignore this parameter. Read more about it in here. The functionality included in this attribute will remove the default mapping. <code>merge_mapping</code> dict - This can be used to merge the default mapping from the controller and manually select what each button should be doing. By default it will ignore this parameter. Read more about it in here. The functionality included in this attribute is added on top of the default mapping. <code>mode</code> dict | int <code>single</code> This has the purpose of defining what to do when an ation(s) is/are executing. The options and the behaviour is the same as Home Assistant automation modes since it is based on that. The only difference is that <code>queued</code> only queues 1 task after the one is being executed. One can define a mapping for each action event with different modes. <p>Integration dictionary for <code>integration</code> attribute.</p> key type value description <code>name</code>* string See here the available integrations. This is the integration that the device was integrated. <p>In addition, you can add arguments. Each integration has its own arguments.</p> <p>* Required fields</p>"},{"location":"start/configuration/#explained-with-yaml","title":"Explained with YAML","text":"<pre><code>example_app: # It can be anything\n  module: controllerx\n\n  # `class` value depends on the controller you want to use\n  # Check the classes for each controller on the supported controllers page\n  # Supported controller page: https://xaviml.github.io/controllerx/controllers/\n  class: Controller # or E1810Controller, LightController, HueDimmerController, etc.\n\n  # `controller` value depends on the integration used (z2m, deconz, zha).\n  # Check https://xaviml.github.io/controllerx/others/extract-controller-id for more info\n  controller: sensor.my_controller_action # or my_controller_id or 00:67:88:56:06:78:9b:3f\n\n  # `integration` is the integration used for your controller\n  # It can be used as object like:\n  # integration:\n  #   name: z2m\n  #   listen_to: mqtt\n  # Check https://xaviml.github.io/controllerx/start/integrations for more info\n  integration: z2m # or deconz, mqtt, zha, state, etc.\n\n  # `actions` and `excluded_actions` can be used to indicate which actions from the default mapping\n  # will be used or not. These 2 attributes cannot be used at the same time.\n  actions: # or excluded_actions. This is optional.\n    - toggle\n    - brightness_up_click\n\n  # `action_delta` is the threshold to avoid firing the same action twice\n  action_delta: 300 # default. This is optional.\n\n  # `multiple_click_delay` is used for the multiclick functionality\n  # Check https://xaviml.github.io/controllerx/advanced/multiple-clicks for more info\n  multiple_click_delay: 500 # default. This is optional.\n\n  # `action_delay` lets you configure delays to existing actions\n  action_delay: # This is optional.\n    toggle: 10 # This will fire `toggle` action in 10 seconds after pressed.\n\n  # `mode` allows you to define the strategy when an action is already executing\n  # Possible values are `single`, `restart`, `queued` and `parallel`\n  mode: single # default. This is optional.\n\n  # `mapping` and `merge_mapping` let you override the default behaviour of your controller.\n  # `merge_mapping` updates the default mapping, and `mapping` overrides it completely.\n  # Check https://xaviml.github.io/controllerx/advanced/custom-controllers for more info\n  merge_mapping: # or `mapping`. This is optional.\n    brightness_up_click: toggle_full_brightness # use predefined actions\n    toggle: # or HA service calls\n      service: scene.turn_on\n      data:\n        entity_id: scene.my_scene\n    toggle$2: # This scripts will be called when toggle is fired twice within 500ms (multiple_click_delay)\n      - service: script.my_script\n      - service: script.my_script_with_arguments\n        data:\n          my_attr: test\n\n  # From here on, we can include specific attribute from type controllers like\n  # Light, MediaPlayer, Switch or Cover controller for example\n  # Check https://xaviml.github.io/controllerx/start/type-configuration for more info\n  light: light.my_light # or media_player, switch, cover\n</code></pre>"},{"location":"start/installation/","title":"AppDaemon installation","text":"<p>This installation guide assumes that ControllerX runs on AppDaemon addon, which can be found in the addon store. If you prefer to use your own AppDaemon instance, you can find the latest ControllerX code in the Manual section.</p> <p>You can read here what's AppDaemon and why is needed.</p>"},{"location":"start/installation/#appdaemon-addon","title":"AppDaemon addon","text":"<p>First, we will need to install the AppDaemon from the <code>Add-on store</code>. This will create the following folder in your system <code>/addon_configs/a0d7b954_appdaemon</code>, which we will need to modify the <code>/addon_configs/a0d7b954_appdaemon/appdaemon.yaml</code> (e.g. File Editor addon):</p> <pre><code>---\nsecrets: /homeassistant/secrets.yaml # (1)\nappdaemon:\n  latitude: X.XXXXXXX # (2)\n  longitude: X.XXXXXXX\n  elevation: XXXX\n  time_zone: XXXXXXXX\n  exclude_dirs:\n    - cx_core # (3)\n  app_dir: /homeassistant/appdaemon/apps # (4)\n  plugins:\n    HASS:\n      type: hass\nhttp:\n  url: http://127.0.0.1:5050\nadmin:\napi:\nhadashboard:\n</code></pre> <ol> <li>This line is important for AppDaemon to get the secrets from the correct path.</li> <li>Substitute with the correct values, or leave the default ones.</li> <li>Make sure to add this to not get a cyclic error when starting AppDaemon.</li> <li>This line is important for AppDaemon to get the correct apps path where HACS install ControllerX in.</li> </ol> <p>Note that by this point the addon might fail since <code>/homeassistant/appdaemon</code> might not exists yet, but you can keep following the installation steps.</p> <p>You can read more about these changes in this GitHub discussion.</p>"},{"location":"start/installation/#enabling-mqtt-plugin-optional","title":"Enabling MQTT plugin (optional)","text":"<p>In case of using Zigbee2MQTT integration, it is recommended to enable MQTT plugin since the default HA sensor listener is now deprecated.</p>"},{"location":"start/installation/#controllerx-installation","title":"ControllerX installation","text":"<p>You can proceed to install ControllerX either manually or through HACS in the <code>/homeassistant/appdaemon/apps/</code> folder.</p>"},{"location":"start/installation/#hacs","title":"HACS","text":"<p>The easiest way to add this to your Home Assistant installation is using HACS with <code>Enable AppDaemon apps discovery &amp; tracking</code> checked. If you don't have it enabled, go to <code>Configuration &gt; Integrations &gt; HACS (Options)</code>. You will find ControllerX in the <code>Automation</code> section on HACS. This will automatically add ControllerX in <code>/homeassistant/appdaemon/apps/</code>, and updates will be tracked by HACS and update within the same folder.</p>"},{"location":"start/installation/#manual","title":"Manual","text":"<p>Download the latest version, and then place the <code>controllerx</code> folder in your machine <code>/homeassistant/appdaemon/apps/controllerx</code>. The <code>controllerx.py</code> needs to be in <code>/homeassistant/appdaemon/apps/controllerx/controllerx.py</code>.</p>"},{"location":"start/installation/#setup-appsyaml","title":"Setup <code>apps.yaml</code>","text":"<p>Once we have the addon and ControllerX installed, we can create <code>/homeassistant/appdaemon/apps/apps.yaml</code>, where we can configure ControllerX in.</p>"},{"location":"start/type-configuration/","title":"Controller types","text":"<p>Each device supports a type of controller and this is what gives them the functionality over an entity.</p> <p>Here you can check the specific parameters that each type of controller needs. Check the configuration page for the generic parameters.</p>"},{"location":"start/type-configuration/#light-controller","title":"Light controller","text":"<p>This controller allows the devices to control light or group of lights. This allows you to:</p> <ul> <li>Turn on/off light(s)</li> <li>Toggle light(s)</li> <li>Manual increase/decrease of brightness and color</li> <li>Smooth increase/decrease (holding button) of brightness and color</li> <li>Color loop changing if the light supports xy color.</li> </ul> key type value description <code>light</code>* string | dictionary <code>group.livingroom_lights</code> or <code>light.kitchen</code> The light (or group of lights) you want to control <code>manual_steps</code> int 10 Number of steps to go from min to max when clicking. If the value is 2 with one click you will set the light to 50% and with another one to 100%. <code>automatic_steps</code> int 10 Number of steps to go from min to max when smoothing. If the value is 2 with one click you will set the light to 50% and with another one to 100%. <code>min_brightness</code> int 1 The minimum brightness to set to the light. <code>max_brightness</code> int 255 The maximum brightness to set to the light. <code>min_white_value</code> int 1 The minimum white value to set to the light. <code>max_white_value</code> int 255 The maximum white value to set to the light. <code>min_color_temp</code> int 153 The minimum color temperature to set to the light. <code>max_color_temp</code> int 500 The maximum color temperature to set to the light. <code>smooth_power_on</code> boolean False If <code>True</code> the associated light will be set to minimum brightness when brightness up is clicked or hold ad light is off. <code>delay</code> int Controller specific Delay in milliseconds that takes between sending the instructions to the light (for the smooth functionality). Note that if leaving to 0, you might get uncommon behavior. <code>max_loops</code> int 50 Maximum number of loops when holding. The loop will stop either with a release action or reaching the <code>max_loops</code> value. <code>hold_release_toggle</code> boolean False If <code>true</code>, a <code>hold</code> action will work as a release when another <code>hold</code> is running. This is useful when you have a button with just one action event and you want to use the hold-release feature, then you just need to map that event to a <code>hold</code> action. <code>release_delay</code> float 0 <code>release</code> actions will be delayed this amount of time (in seconds). This is to avoid cases where <code>release</code> is send almost at the same time as <code>hold</code> actions. <code>transition</code> int 300 Time in milliseconds that takes the light to transition from one state to another one. <code>add_transition</code> boolean True If <code>true</code> adds transition if supported, otherwise it does not adds the <code>transition</code> attribute. <code>add_transition_turn_toggle</code> boolean True If <code>false</code> does not add transition when turning on/off or toggling, otherwise it adds the <code>transition</code> attribute to the call. See FAQ #6 for a further explanation on the use of this parameter. <code>color_wheel</code> string | list <code>default_color_wheel</code> It defines the color wheel used when changing the xy color either when click or hold actions are used. Check down to know more about the options. <code>supported_features</code> int <code>0b101100</code> or <code>44</code> See below for the explanation. <code>supported_color_modes</code> list <code>[\"xy\", \"rgb\"]</code> It overrides the <code>supported_color_modes</code> that can be found in light attributes. Values can be <code>color_temp</code>, <code>hs</code>, <code>xy</code>, <code>rgb</code>, <code>rgbw</code> and <code>rgbww</code>. <code>update_supported_features</code> boolean False If <code>true</code>, it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. <code>hold_toggle_direction_init</code> string <code>up</code> It indicates the first direction of the hold toggle actions (<code>up</code> or <code>down</code>). <p>* Required fields</p> <p>Light dictionary for the <code>light</code> attribute:</p> key type value description <code>name</code>* string <code>light.kitchen</code> The light (or group of lights) you want to control <code>color_mode</code> string <code>auto</code> This attribute can take <code>auto</code>, <code>xy_color</code> or <code>color_temp</code> as value. <code>auto</code> will check first if the light supports <code>xy_color</code> and then <code>color_temp</code>. <code>xy_color</code> will cicle through different colors infinitely. <code>color_temp</code> will change the color temperature attribute of the light. If a light supports both, user can pick which action wants for the light(s). <p>* Required fields</p> <p>Information about <code>color_wheel</code> attribute:</p> <p>This attribute can be either an string or a list. These are the possible string values:</p> value description <code>default_color_wheel</code> These are the 24 colors that appear in the circle color of home assistant. <code>color_temp_wheel</code> These are the xy colors translated from color temperature (2000K to 6488K). They were extracted from here. <p>Otherwise, a custom xy color list can be defined like the following:</p> <pre><code>example_app:\n  module: controllerx\n  class: &lt; device class or LightController &gt;\n  controller: &lt; your controller id &gt;\n  integration: &lt; your integration &gt;\n  light: light.your_light\n  color_wheel:\n    - [0.525, 0.411]\n    - [0.167, 0.338]\n    - [0.324, 0.329]\n</code></pre>"},{"location":"start/type-configuration/#zigbee2mqtt-light-controller","title":"Zigbee2MQTT Light controller","text":"<p>This controller (<code>Z2MLightController</code>) allows the devices to control Zigbee2MQTT lights. It allows you to:</p> <ul> <li>Turn on/off light</li> <li>Toggle light</li> <li>Manual increase/decrease of brightness and color</li> <li>Smooth increase/decrease (holding button) of brightness and color</li> </ul> <p>You can read more about this specific controller here.</p> key type value description <code>light</code>* string | dictionary <code>my_light</code> The light you want to control. This is the friendly name light from Zigbee2MQTT. <code>click_steps</code> float 70 Number of steps that are passed to Zigbee2MQTT for click actions. <code>hold_steps</code> float 70 Number of steps that are passed to Zigbee2MQTT for hold actions. <code>transition</code> float 0.5 Transition sent to Zigbee2MQTT when changing brightness or color temp. <code>use_onoff</code> bool <code>false</code> This allows click and hold actions to turn on/off the light when off or minimum brightness is reached. <p>* Required fields</p> <p>Light dictionary for the <code>light</code> attribute:</p> key type value description <code>name</code>* string <code>light.kitchen</code> The light you want to control. This is the friendly name light from Zigbee2MQTT. <code>mode</code> string <code>ha</code> This attribute can take <code>ha</code>, <code>mqtt</code>. On the one hand, <code>ha</code> will send the mqtt messages through Home Assistant with <code>mqtt.publish</code> service. On the other hand, <code>mqtt</code> will send the MQTT messages through MQTT plugin from AppDaemon (hence skipping HA). <code>topic_prefix</code> string <code>zigbee2mqtt</code> MQTT base topic for Zigbee2MQTT MQTT messages. The topic sent will be <code>&lt;topic_prefix&gt;/&lt;friendly_name&gt;/set</code>. <p>* Required fields</p>"},{"location":"start/type-configuration/#media-player-controller","title":"Media player controller","text":"<p>This allows you to control media players. It supports volume, play/pause and skipping forward/backward the track and the source.</p> key type value description <code>media_player</code>* string <code>group.livingroom_speakers</code> or <code>media_player.bedroom_speaker</code> The media player (or group of media players) you want to control <code>volume_steps</code> int 10 Number of steps to go from min to max when clicking or holding. If the value is 2 with one click you will set the volume to 50% and with another one to 100%. <code>delay</code> int Controller specific Delay in milliseconds that takes between sending the volume up/down instructions. Note that the maximum value is 1000 and if leaving to 0, you might get uncommon behavior. <code>max_loops</code> int 50 Maximum number of loops when holding. The loop will stop either with a release action or reaching the <code>max_loops</code> value. <code>hold_release_toggle</code> boolean False If <code>true</code>, a <code>hold</code> action will work as a release when another <code>hold</code> is running. This is useful when you have a button with just one action event and you want to use the hold-release feature, then you just need to map that event to a <code>hold</code> action. <code>release_delay</code> float 0 <code>release</code> actions will be delayed this amount of time. This is to avoid cases where <code>release</code> is send almost at the same time as <code>hold</code> actions. <code>supported_features</code> int <code>0b10111111</code> or <code>191</code> See below for the explanation. <code>update_supported_features</code> boolean False If <code>true</code>, it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. <p>* Required fields</p>"},{"location":"start/type-configuration/#switch-controller","title":"Switch controller","text":"<p>This allows you to control <code>switch</code> entities as well as <code>input_boolean</code> and <code>binary_sensor</code>. It supports turning on/off and toggling.</p> key type value description <code>switch</code>* string <code>group.switches</code> or <code>switch.dishwasher</code> The switch (or group of switches) you want to control <p>* Required fields</p>"},{"location":"start/type-configuration/#cover-controller","title":"Cover controller","text":"<p>This allows you to control covers. It supports opening/closing and stop covers.</p> key type value description <code>cover</code>* string <code>group.all_covers</code> or <code>cover.kitchen</code> The cover (or group of covers) you want to control <code>open_position</code> number 100 The open position (between 0 and 100) <code>close_position</code> number 0 The close position (between 0 and 100) <code>cover_duration</code> number - Duration of the cover to open and/or close in seconds, so <code>toggle_open</code> and <code>toggle_close</code> can stop the cover if the cover is still moving. This is recommended to be used when the cover does not report <code>opening</code> and <code>closing</code> states, otherwise, it is not necessary. <code>supported_features</code> int <code>0b10111111</code> or <code>191</code> See below for the explanation. <code>update_supported_features</code> boolean False If <code>true</code>, it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. <p>* Required fields</p>"},{"location":"start/type-configuration/#supported_features-field","title":"\"supported_features\" field","text":"<p>This field will override the <code>supported_features</code> attribute from the entity (light, media player, etc). By default, ControllerX will check this value from Home Assistant, however, there are times that this attribute does not reflect properly the features that the entity supports. ControllerX automatically will select one action or another depending on this value, this is why it's important that reflects the supported features. This is defined as a bit field in Home Assistant, so its binary representation of the number will defined which features it supports. You can see the values for each entity below.</p>"},{"location":"start/type-configuration/#light","title":"Light","text":"feature value EFFECT 4 FLASH 8 TRANSITION 32 <p>If you want to express support for everything, the value is <code>0b101100</code> or <code>44</code>.</p>"},{"location":"start/type-configuration/#media-player","title":"Media player","text":"feature value PAUSE 1 SEEK 2 VOLUME_SET 4 VOLUME_MUTE 8 PREVIOUS_TRACK 16 NEXT_TRACK 32 TURN_ON 128 TURN_OFF 256 PLAY_MEDIA 512 VOLUME_STEP 1024 SELECT_SOURCE 2048 STOP 4096 CLEAR_PLAYLIST 8192 PLAY 16384 SHUFFLE_SET 32768 SELECT_SOUND_MODE 65536 SUPPORT_BROWSE_MEDIA 131072 SUPPORT_REPEAT_SET 262144 SUPPORT_GROUPING 524288 <p>If you want to express support for everything, the value is <code>0b1111111111110111111</code> or <code>524223</code>.</p>"},{"location":"start/type-configuration/#cover","title":"Cover","text":"feature value OPEN 1 CLOSE 2 SET_COVER_POSITION 4 STOP 8 OPEN_TILT 16 CLOSE_TILT 32 STOP_TILT 64 SET_TILT_POSITION 128 <p>If you want to express support for everything, the value is <code>0b11111111</code> or <code>255</code>.</p>"},{"location":"start/integrations/","title":"Integrations","text":"<p>Integrations are a way to abstract the logic from the event extraction in ControllerX. Each integration is responsible for listening to the state or event and decoding the events from controllers in a way that ControllerX understands.</p> <p>These are the integrations supported by ControllerX.</p>"},{"location":"start/integrations/#integrations-with-mappings","title":"Integrations with mappings","text":"<p>These are integrations with default mapping for specific controllers.</p> Integration Configuration value Zigbee2MQTT <code>z2m</code> deCONZ <code>deconz</code> ZHA <code>zha</code> Homematic <code>homematic</code> Lutron Cas\u00e9ta <code>lutron_caseta</code> Shelly <code>shelly</code> Shelly for HASS <code>shellyforhass</code>"},{"location":"start/integrations/#custom-integrations","title":"Custom integrations","text":"<p>These are integrations that do not require a default mapping. Designed for custom soltions.</p> Integration Configuration value State <code>state</code> MQTT <code>mqtt</code> Event <code>event</code>"},{"location":"start/integrations/#example","title":"Example","text":"<p>One could place the configuration name directly in the integration parameter:</p> <pre><code>example_app:\n  module: controllerx\n  ...\n  integration: z2m\n  ...\n</code></pre> <p>Or in the <code>name</code> parameter inside <code>integration</code> in case you want to add other integration parameters:</p> <pre><code>example_app:\n  module: controllerx\n  ...\n  integration:\n    name: z2m\n  ...\n</code></pre>"},{"location":"start/integrations/deconz/","title":"deCONZ","text":"<p>ControllerX listens to <code>deconz_event</code> events and actions get fired by default with the <code>event</code> attribute from the <code>data</code> object. However, you can change the attribute to listen to by adding a <code>type</code> attribute. In addition, you can select which attribute to listen to (<code>id</code> or <code>unique_id</code>) with <code>listen_to</code>.</p>"},{"location":"start/integrations/deconz/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>deconz</code> <code>listen_to</code> Selects which attribute to listen to (<code>id</code> or <code>unique_id</code>). <code>id</code> <code>type</code> The attribute to listen to. <code>event</code> <p>* Required fields</p>"},{"location":"start/integrations/deconz/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for deCONZ, you can go to <code>Developer Tools &gt; Events</code> then down the bottom you can subscribe for <code>deconz_event</code> and start listening. Then, press any button and you will see the event of the button, you will need to copy the <code>id</code> inside the <code>data</code> object.</p>"},{"location":"start/integrations/deconz/#example","title":"Example","text":"<pre><code>example_app:\n  module: controllerx\n  class: MFKZQ01LMLightController\n  controller: magic_cube\n  integration:\n    name: deconz\n    listen_to: unique_id # defaults to `id`\n    type: gesture # defaults to `event`\n  light: light.example_light\n</code></pre>"},{"location":"start/integrations/event/","title":"Event","text":"<p>The <code>event</code> integration is meant to be used for a custom event and it is not attached to any type of integration.</p>"},{"location":"start/integrations/event/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>event</code> <code>event_type</code>* The event we are listening to (e.g. <code>zha_event</code>). <code>-</code> <code>controller_key</code>* The attribute of the controller to listen to (e.g. <code>device_ieee</code>). <code>-</code> <code>action_template</code>* The action template that will be built from the event data (e.g. <code>action_{command}</code>). <code>-</code> <p>* Required fields</p>"},{"location":"start/integrations/event/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for Event, you can go to <code>Developer Tools &gt; Events</code> then down the bottom you can subscribe for the event type you are interested in and start listening. Then, press any button and you will see the event of the button, you will need to copy the relevant attribute inside the <code>data</code> object.</p> <p>For further explanation and example, please check here.</p>"},{"location":"start/integrations/homematic/","title":"Homematic","text":"<p>This integration (<code>homematic</code>) listens to <code>homematic.keypress</code> events. It creates an action like <code>&lt;action_type&gt;_&lt;channel&gt;</code>. It does not have any additional arguments.</p>"},{"location":"start/integrations/homematic/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>homematic</code> <p>* Required fields</p>"},{"location":"start/integrations/homematic/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for Homematic, you can go to <code>Developer Tools &gt; Events</code> then down the bottom you can subscribe for <code>homematic.keypress</code> and start listening. Then, press any button and you will see the event of the button, you will need to copy the <code>name</code> inside the <code>data</code> object.</p>"},{"location":"start/integrations/lutron_caseta/","title":"Lutron Cas\u00e9ta","text":"<p>This integration (<code>lutron_caseta</code>) listens to <code>lutron_caseta_button_event</code> events. It creates an action like <code>button_&lt;number&gt;_&lt;action type&gt;</code>. It does not have any additional arguments.</p>"},{"location":"start/integrations/lutron_caseta/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>lutron_caseta</code> <p>* Required fields</p>"},{"location":"start/integrations/lutron_caseta/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for Lutron Cas\u00e9ta, you can go to <code>Developer Tools &gt; Events</code> then down the bottom you can subscribe for <code>lutron_caseta_button_event</code> and start listening. Then, press any button and you will see the event of the button, you will need to copy the relevant attribute inside the <code>data</code> object.</p>"},{"location":"start/integrations/mqtt/","title":"MQTT","text":"<p>This integration (<code>mqtt</code>) listens for the topic sent from the <code>controller</code> attribute. Although this integration makes sense to use together with custom controllers, it works with the actions from zigbee2mqtt.</p> <p>ControllerX will be listening directly from MQTT rather than Home Assistant (which listens from MQTT). Not only can you use this with zigbee2mqtt, but also with any other MQTT integration. This works for JSON and non-JSON values in the payload. If a specific attribute needs to be extracted from JSON payload, the <code>key</code> (which works like <code>action_key</code> from Zigbee2MQTT integration) attribute can be used:</p>"},{"location":"start/integrations/mqtt/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>mqtt</code> <code>key</code> The key to retrieve the data from. <code>-</code> <p>* Required fields</p>"},{"location":"start/integrations/mqtt/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for MQTT, the <code>controller</code> attribute must have the MQTT topic to listen from. It is important that the topic payload contains directly the action name and not a JSON. This means that in case of using the MQTT integration with a z2m controller, then the topic to listen to must be <code>zigbee2mqtt/&lt;friendly name&gt;/action</code> or <code>zigbee2mqtt/&lt;friendly name&gt;/click</code>. You can see the topic on the Zigbee2MQTT logs.</p>"},{"location":"start/integrations/mqtt/#example","title":"Example","text":"<pre><code>example_app:\n  module: controllerx\n  class: LightController\n  controller:\n    - zigbee2mqtt/stairway_sensor01_occupancy\n    - zigbee2mqtt/stairway_sensor02_occupancy\n  light: light.stairway\n  integration:\n    name: mqtt\n    key: occupancy\n  mapping:\n    \"true\": \"on\"\n    \"false\": \"off\"\n</code></pre> <p>This example will turn on the light when the following payload is shown for one of the 2 topics in the <code>controller</code> key:</p> <pre><code>{\n  \"battery\": 99,\n  \"illuminance\": 0,\n  \"illuminance_lux\": 0,\n  \"linkquality\": 255,\n  \"occupancy\": true,\n  \"temperature\": 27,\n  \"voltage\": 2985\n}\n</code></pre> <p>By default, mqtt will read non-JSON values. Last but not least, the MQTT plugin needs to be enabled.</p>"},{"location":"start/integrations/shelly/","title":"Shelly","text":"<p>This integration (<code>shelly</code>) listens to <code>shelly.click</code> events. It creates an action like <code>&lt;click_type&gt;_&lt;channel&gt;</code>. It does not have any additional arguments.</p>"},{"location":"start/integrations/shelly/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>shelly</code> <p>* Required fields</p>"},{"location":"start/integrations/shelly/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for Shelly, you can go to <code>Developer Tools &gt; Events</code> then down the bottom you can subscribe for <code>shelly.click</code> and start listening. Then, press any button and you will see the event of the button, you will need to copy the <code>device</code> inside the <code>data</code> object. You can read more about the event here.</p>"},{"location":"start/integrations/shellyforhass/","title":"Shelly for HASS","text":"<p>This integration (<code>shellyforhass</code>) listens to <code>shellyforhass.click</code> events. It creates an action like <code>&lt;action_type&gt;</code>. It does not have any additional arguments.</p>"},{"location":"start/integrations/shellyforhass/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>shellyforhass</code> <p>* Required fields</p>"},{"location":"start/integrations/shellyforhass/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for Shelly for HASS, you can go to <code>Developer Tools &gt; Events</code> then down the bottom you can subscribe for <code>shellyforhass.click</code> and start listening. Then, press any button and you will see the event of the button, you will need to copy the <code>entity_id</code> inside the <code>data</code> object. You can read more about the event here.</p>"},{"location":"start/integrations/state/","title":"State","text":"<p>This integration (<code>state</code>) listens for the state of a sensor and the action is fired with the changed event. You can add <code>attribute</code> parameter if you want to listen to state change on the state attribute level. Read more about the options in here.</p>"},{"location":"start/integrations/state/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>state</code> <code>attribute</code> The attribute to listen to for state changes. <code>-</code> <p>* Required fields</p>"},{"location":"start/integrations/state/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for State, you can go to <code>Developer Tools &gt; States</code> and find the entity id of the sensor you want to use.</p>"},{"location":"start/integrations/state/#example","title":"Example","text":"<p>Listening for the attribute <code>click</code> from the sensor <code>sensor.my_custom_button</code>:</p> <pre><code>example_app:\n  module: controllerx\n  class: LightController\n  controller: sensor.my_custom_button\n  integration:\n    name: state\n    attribute: click\n  light: light.example_light\n  mapping:\n    1_click: \"on\"\n    2_click: \"off\"\n</code></pre>"},{"location":"start/integrations/tasmota/","title":"Tasmota","text":"<p>This integration (<code>tasmota</code>) listens for the MQTT topic sent from the <code>controller</code> attribute, and gets the action from the attribute defined in <code>component</code>.</p>"},{"location":"start/integrations/tasmota/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>tasmota</code> <code>component</code>* The component we are listening to (e.g. <code>Button1</code>). <code>-</code> <code>key</code> The key to retrieve the data from. <code>Action</code> <p>* Required fields</p> <p>For this integration to work, SetOption73 (for Buttons) and SetOption114 (for Switches) need to be set in Tasmota.</p> <p>Tasmota payload:</p> <pre><code>{\n  \"Button1\": {\n    \"Action\": \"TOGGLE\"\n  }\n}\n</code></pre>"},{"location":"start/integrations/tasmota/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>Tasmota integration relies on MQTT plugin, so the <code>controller</code> is the MQTT topic to listen to (e.g. <code>stat/tasmota_device/RESULT</code>).</p>"},{"location":"start/integrations/tasmota/#example","title":"Example","text":"<pre><code>example_app:\n  module: controllerx\n  class: TasmotaButtonLightController\n  controller: stat/tasmota_device/RESULT\n  integration:\n    name: tasmota\n    component: Button1\n  light: light.example_light\n</code></pre>"},{"location":"start/integrations/zha/","title":"ZHA","text":"<p>This integration (<code>zha</code>) listens to <code>zha_event</code> events and concatenates the command with the argument for the action string. It does not have any additional arguments.</p>"},{"location":"start/integrations/zha/#parameters","title":"Parameters","text":"Parameter Description Default <code>name</code>* Integration name. <code>zha</code> <p>* Required fields</p>"},{"location":"start/integrations/zha/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":"<p>To extract the controller ID for ZHA, you can go to <code>Developer Tools &gt; Events</code> then down the bottom you can subscribe for <code>zha_event</code> and start listening. Then, press any button and you will see the event of the button, you will need to copy the <code>device_ieee</code> inside the <code>data</code> object. It is a number like the following 00:67:88:56:06:78:9b:3f.</p>"},{"location":"start/integrations/zigbee2mqtt/","title":"Zigbee2MQTT","text":"<p>This integration (<code>z2m</code>) is meant to be used for zigbee2mqtt. It listens to the states from the HA sensor entities. These are the accepted attributes:</p>"},{"location":"start/integrations/zigbee2mqtt/#parameters","title":"Parameters","text":"Parameters Description Default <code>name</code> Integration name <code>z2m</code> <code>listen_to</code> Indicates whether it listens for HA states (<code>ha</code>), MQTT topics (<code>mqtt</code>) or HA Event state (<code>event</code>). <code>ha</code> <code>action_key</code> The key inside the topic payload that contains the fired action from the controller. <code>action</code> <code>action_group</code> A list of allowed action groups for the controller configuration. <code>-</code> <code>topic_prefix</code> MQTT base topic for Zigbee2MQTT MQTT messages. <code>zigbee2mqtt</code>"},{"location":"start/integrations/zigbee2mqtt/#how-to-extract-the-controller-attribute","title":"How to extract the <code>controller</code> attribute","text":""},{"location":"start/integrations/zigbee2mqtt/#ha-states-listen_to-ha","title":"HA States (<code>listen_to: ha</code>)","text":"<p>Warning</p> <p>This option is deprecated since ControllerX v4.29.0.</p> <p>Note</p> <p>This option requires enabling <code>legacy_action_sensor</code> in Zigbee2MQTT. This can be done in Zigbee2MQTT <code>Settings &gt; Home Assistant integration</code>. Then enable <code>Home Assistant legacy action sensors</code>. Note that this option is deprecated from Zigbee2MQTT 2.0 and will be removed in the future.</p> <p>To extract the controller ID for Zigbee2MQTT, you can find it in <code>Configuration &gt; Integrations &gt; MQTT</code> and then select the controller. The parameter you need is the entity id of the sensor that by default finishes in <code>_action</code>.</p>"},{"location":"start/integrations/zigbee2mqtt/#mqtt-topics-listen_to-mqtt","title":"MQTT topics <code>listen_to: mqtt</code>","text":"<p>Note</p> <p>This option requires enabling the MQTT plugin.</p> <p>To use the <code>mqtt</code> option, the MQTT topic is the friendly name of the controller in Zigbee2MQTT. This friendly name can be found in the Zigbee2MQTT configuration for the specific device.</p> <p>For example, if the MQTT topic is <code>zigbee2mqtt/livingroom_controller</code>, the friendly name (and <code>controller</code> attribute) of the controller would be <code>livingroom_controller</code>.</p>"},{"location":"start/integrations/zigbee2mqtt/#event-state-listen_to-event","title":"Event state <code>listen_to: event</code>","text":"<p>Note</p> <p>This option requires enabling <code>experimental_event_entities</code> in Zigbee2MQTT. This can be done in Zigbee2MQTT <code>Settings &gt; Home Assistant integration</code>. Then enable <code>Home Assistant experimental event entities</code>. Note that this option is experimental from Zigbee2MQTT 2.0.</p> <p>To extract the controller ID for Zigbee2MQTT, you can find it in <code>Configuration &gt; Integrations &gt; MQTT</code> and then select the controller. The parameter you need is the entity id of the action event without the <code>event.</code> prefix. E.g. if the event is <code>event.livingroom_controller_action</code>, the <code>controller</code> attribute should be <code>livingroom_controller_action</code>.</p>"},{"location":"start/integrations/zigbee2mqtt/#example","title":"Example","text":"<p>Imagine we have the following configuration already created for a <code>z2m</code> controller listening to HA state:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Controller\n  controller: sensor.livingroom_controller_action\n  integration:\n    name: z2m\n    listen_to: ha\n  light: light.bedroom\n</code></pre> <p>Then, if we want to listen to the MQTT topic directly (skipping the HA state machine), we will need to change to:</p> <pre><code>livingroom_controller:\n  module: controllerx\n  class: E1810Controller\n  controller: livingroom_controller\n  integration:\n    name: z2m\n    listen_to: mqtt\n    action_key: action # By default is `action` already\n  light: light.bedroom\n</code></pre>"}]}