# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main
  - dev
  - refs/tags/*

pr:
  - main
  - dev

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: Build Stage
    jobs:
      - job: Build
        displayName: Build job
        strategy:
          matrix:
            Python37:
              python.version: "3.7"
            Python38:
              python.version: "3.8"
            Python39:
              python.version: "3.9"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(python.version)
            displayName: Prepare Python $(python.version)
          - script: pip install poetry
            displayName: Install poetry
          - script: poetry config virtualenvs.create false && poetry install
            displayName: Install dependencies
          - script: pre-commit run --all-files --show-diff-on-failure
            displayName: Run pre-commit
          - script: pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=apps --cov-report=xml --cov-report=html
            displayName: Tests (pytest)
          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
  - stage: Deploy
    displayName: Deploy Stage
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    jobs:
      - job: Deploy
        displayName: Deploy job
        steps:
          - task: ArchiveFiles@2
            displayName: Zipping apps/controllerx folder
            inputs:
              rootFolderOrFile: $(System.DefaultWorkingDirectory)/apps/controllerx
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/controllerx.zip
          - script: sed -i 's/VERSION_TAG/${{ variables['Build.SourceBranchName'] }}/g' RELEASE_NOTES.md
            displayName: Replace version in RELEASE_NOTES.md
          - script: "sed -i 's/PRERELEASE_NOTE/_Note: Some links might not work or might be not updated due to being a pre-release, and documentation is not yet available_/g' RELEASE_NOTES.md"
            displayName: Replace prerelease note in RELEASE_NOTES.md
            condition: contains(variables['Build.SourceBranchName'], 'b')
          - script: sed -i 's/PRERELEASE_NOTE//g' RELEASE_NOTES.md
            displayName: Replace prerelease note in RELEASE_NOTES.md
            condition: not(contains(variables['Build.SourceBranchName'], 'b'))
          - task: GithubRelease@0
            displayName: Create GitHub Release
            inputs:
              gitHubConnection: github.com_xaviml
              repositoryName: xaviml/controllerx
              isPreRelease: ${{ contains(variables['Build.SourceBranchName'], 'b') }}
              assets: $(Build.ArtifactStagingDirectory)/controllerx.zip
              title: $(Build.SourceBranchName)
              releaseNotesSource: file
              releaseNotesFile: RELEASE_NOTES.md
